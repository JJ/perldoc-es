=head1 NOMBRE
X<función>

perlfunc - Funciones incluídas en Perl

=head1 DESCRIPCIÓN

Las funciones de esta sección pueden servir como términos en una expresión.
Se agrupan en dos categorías principales: operadores de listas y operadores unarios con nombre.  Difieren en su relación de precedencia cuando son seguidos por una coma.  (Ver la tabla de precedencia en L<perlop>.)  Los operadores de listas toman más de un argumento, mientras que los operadores unarios nunca toman más de un argumento.  Así, una coma determina al argumento de un operador unario, pero sólo sirve de separación entre argumentos en un operador de listas.  Un operador unario generalmente proveé de un contexto escalar a su argumento, mientras que un operador de listas puede proveer tanto de un contexto escalar como un contexto de lista, a sus argumentos.  Si aparecen ambos, los argumentos escalares van antes que los argumentos de listas.  (Note aquí que sólo puede aparecer un argumento de lista). Por ejemplo, splice() tiene tres argumentos escalares seguidos por una lista, mientras que gethostbyname() tiene cuatro argumentos.

En las descripciones sintácticas que siguen a continuación, los operadores de listas que esperan una lista (y proveen de un contexto lista para los elementos de la lista) se muestran con un argumento así: LISTA.  Tal lista puede consistir en cualquier combinación de argumentos escalares o valores de lista; los valores de lista serán incluidos en la lista como si cada elemento individual fuera interpolado en ese punto en la lista, formando un largo y unidimensional valor de lista.
Las comas deberían separar elementos de la LISTA.

Cualquier función en la lista de abajo puede ser usada tanto con paréntesis como sin ellos alrededor de sus argumentos.  (Las descripciones sintácticas omiten los paréntesis). Si usa los paréntesis, la simple (pero ocasionalmente sorprendente) regla es esta: Si I<se parece> a una función, por eso I<es> una función y la precedencia no importará.  De lo contrario es un operador de lista u operador unario, y la precedencia sí importa.  Y el espacio en blanco entre la función y el paréntesis izquierdo no cuenta, por lo que deberá tener cuidado algunas veces:

    print 1+2+4;	# Imprime 7.
    print(1+2) + 4;	# Imprime 3.
    print (1+2)+4;	# ¡También imprime 3!
    print +(1+2)+4;	# Imprime 7.
    print ((1+2)+4);	# Imprime 7.

Si corre Perl con la opción B<-w> le avisará sobre todo esto.  Por ejemplo, la tercera línea de arriba produce:

    print (...) interpreted as function at - line 1.
(print (...) interpretado como función en - línea 1)
    Useless use of integer addition in void context at - line 1.
(Inútil uso de suma de enteros en contexto void en - línea 1)

Unas pocas funciones no toman ningún argumento, por lo que funcionan tando como operadores unarios como operadores de lista.  Estas incluyen funciones como C<time> y C<endpwent>.  Por ejemplo, C<time+86_400> siempre significa C<time() + 86_400>.

Para funciones que pueden ser usadas tanto en contexto escalar como en lista, un fallo no abortivo es indicado generalmente devolviendo el valor indefinido, y en contexto lista devolviendo la lista nula.

Recuerde la siguiente regla importante: B<No hay regla> que relacione el comportamiento de una expresión en contexto lista a su comportamiento en contexto escalar, o viceversa.  Puede hacer dos cosas totalmente diferentes.
Cada operador y función decide qué clase de valor será más apropiado para devolver en contexto escalar.  Algunos operadores devuelven la longitud de la lista que se hubiera devuelto en contexto lista.  Algunos operadores devuelven el primer valor de la lista.  Algunos operadores devuelven el último valor de la lista.  Algunos operadores devuelven una cuenta del número de operaciones exitosas.  En general, ellos hacen lo que usted busca, a menos que busque la coherencia.
X<contexto>

Un array con nombre en contexto escalar es muy diferente de lo que en un primer vistazo pudiera ser una lista en contexto escalar.  No puede conseguir que una lista como C<(1,2,3)> se convierta en contexto escalar porque el compilador conoce el contexto en tiempo de compilación.  Generará aquí el operador coma, no la versión de construcción de listas.  Esto significa que nunca será una lista.

En general, funciones en Perl que sirven como envoltorios para llamadas al sistema del mismo nombre (como  chown(2), fork(2), closedir(2), etc.) todas ellas devuelven verdadero cuando tienen éxito y C<undef> en otro caso, como se menciona en las descripciones de más abajo.  Esto es diferente de las interfaces C, que devuelven C<-1> en caso de fallo.  Excepciones a esta regla son C<wait>, C<waitpid> y C<syscall>.  Llamadas al sistema también actualizan la variable especial C<$!> en caso de fallo.  Otras funciones no, excepto accidentalmente.

=head2 Funciones Perl por Categoría
X<función>

Aquí están las funciones Perl (incluyen cosas que parecen funciones, como algunas palabras clave y operadores con nombre) agrupados por categoría.  Algunas funciones aparecen en más de un sitio.

=over 4

=item Funciones para ESCALARES o strings
X<escalar> X<string> X<carácter> X<caracteres>

C<chomp>, C<chop>, C<chr>, C<crypt>, C<hex>, C<index>, C<lc>, C<lcfirst>,
C<length>, C<oct>, C<ord>, C<pack>, C<q/STRING/>, C<qq/STRING/>, C<reverse>,
C<rindex>, C<sprintf>, C<substr>, C<tr///>, C<uc>, C<ucfirst>, C<y///>

=item Expresiones Regulares y coincidencia de patrones
X<expresión regular> X<regex> X<regexp>

C<m//>, C<pos>, C<quotemeta>, C<s///>, C<split>, C<study>, C<qr//>

=item Funciones Numéricas
X<numérico> X<numérica> X<número> X<trigonométrico> X<trigonometría>

C<abs>, C<atan2>, C<cos>, C<exp>, C<hex>, C<int>, C<log>, C<oct>, C<rand>,
C<sin>, C<sqrt>, C<srand>

=item Funciones para @ARRAY verdaderos
X<array>

C<pop>, C<push>, C<shift>, C<splice>, C<unshift>

=item Funciones para listas de datos
X<lista>

C<grep>, C<join>, C<map>, C<qw/STRING/>, C<reverse>, C<sort>, C<unpack>

=item Funciones para %HASH verdaderos
X<hash>

C<delete>, C<each>, C<exists>, C<keys>, C<values>

=item Funciones de entrada y salida
X<I/O> X<input> X<output> X<dbm> X<entrada> X<salida>

C<binmode>, C<close>, C<closedir>, C<dbmclose>, C<dbmopen>, C<die>, C<eof>,
C<fileno>, C<flock>, C<format>, C<getc>, C<print>, C<printf>, C<read>,
C<readdir>, C<rewinddir>, C<seek>, C<seekdir>, C<select>, C<syscall>,
C<sysread>, C<sysseek>, C<syswrite>, C<tell>, C<telldir>, C<truncate>,
C<warn>, C<write>

=item Funciones para datos de longitud fija o registros

C<pack>, C<read>, C<syscall>, C<sysread>, C<syswrite>, C<unpack>, C<vec>

=item Functones para manejadores de archivos, ficheros o directorios
X<fichero> X<manejador> X<directorio> X<pipe> X<link> X<symlink>

C<-I<X>>, C<chdir>, C<chmod>, C<chown>, C<chroot>, C<fcntl>, C<glob>,
C<ioctl>, C<link>, C<lstat>, C<mkdir>, C<open>, C<opendir>,
C<readlink>, C<rename>, C<rmdir>, C<stat>, C<symlink>, C<sysopen>,
C<umask>, C<unlink>, C<utime>

=item Palabras clave relativas al control de flujo de su programa Perl
X<control de flujo>

C<caller>, C<continue>, C<die>, C<do>, C<dump>, C<eval>, C<exit>,
C<goto>, C<last>, C<next>, C<redo>, C<return>, C<sub>, C<wantarray>

=item Palabras clave relacionadas con el ámbito

C<caller>, C<import>, C<local>, C<my>, C<our>, C<package>, C<use>

=item Funciones Varias

C<defined>, C<dump>, C<eval>, C<formline>, C<local>, C<my>, C<our>, C<reset>,
C<scalar>, C<undef>, C<wantarray>

=item Funciones para procesos y grupos de procesos
X<proceso> X<pid> X<proceso id>

C<alarm>, C<exec>, C<fork>, C<getpgrp>, C<getppid>, C<getpriority>, C<kill>,
C<pipe>, C<qx/STRING/>, C<setpgrp>, C<setpriority>, C<sleep>, C<system>,
C<times>, C<wait>, C<waitpid>

=item Palabras clave relacionadas con módulos perl
X<módulo>

C<do>, C<import>, C<no>, C<package>, C<require>, C<use>

=item Palabras clave relacionadas a clases y orientado a objetos
X<objeto> X<clase> X<package> X<paquete>

C<bless>, C<dbmclose>, C<dbmopen>, C<package>, C<ref>, C<tie>, C<tied>,
C<untie>, C<use>

=item Funciones de socket de bajo nivel
X<socket> X<sock>

C<accept>, C<bind>, C<connect>, C<getpeername>, C<getsockname>,
C<getsockopt>, C<listen>, C<recv>, C<send>, C<setsockopt>, C<shutdown>,
C<socket>, C<socketpair>

=item Funciones de comunicación de interprocesos System V
X<IPC> X<System V> X<semáforo> X<memoria compartida> X<memoria> X<mensaje>

C<msgctl>, C<msgget>, C<msgrcv>, C<msgsnd>, C<semctl>, C<semget>, C<semop>,
C<shmctl>, C<shmget>, C<shmread>, C<shmwrite>

=item Obteniendo información del usuario y grupo
X<usuario> X<grupo> X<password> X<contraseña> X<uid> X<gid>  X<passwd> X</etc/passwd>

C<endgrent>, C<endhostent>, C<endnetent>, C<endpwent>, C<getgrent>,
C<getgrgid>, C<getgrnam>, C<getlogin>, C<getpwent>, C<getpwnam>,
C<getpwuid>, C<setgrent>, C<setpwent>

=item Obteniendo información de la red
X<network> X<red> X<protocolo> X<host> X<hostname> X<IP> X<dirección> X<servicio>

C<endprotoent>, C<endservent>, C<gethostbyaddr>, C<gethostbyname>,
C<gethostent>, C<getnetbyaddr>, C<getnetbyname>, C<getnetent>,
C<getprotobyname>, C<getprotobynumber>, C<getprotoent>,
C<getservbyname>, C<getservbyport>, C<getservent>, C<sethostent>,
C<setnetent>, C<setprotoent>, C<setservent>

=item Funciones relacionadas con el Tiempo
X<tiempo> X<fecha>

C<gmtime>, C<localtime>, C<time>, C<times>

=item Funciones nuevas en perl5
X<perl5>

C<abs>, C<bless>, C<chomp>, C<chr>, C<exists>, C<formline>, C<glob>,
C<import>, C<lc>, C<lcfirst>, C<map>, C<my>, C<no>, C<our>, C<prototype>,
C<qx>, C<qw>, C<readline>, C<readpipe>, C<ref>, C<sub*>, C<sysopen>, C<tie>,
C<tied>, C<uc>, C<ucfirst>, C<untie>, C<use>

* - C<sub> era una palabra clave en perl4, pero en perl5 es un operador, por lo cual puede ser usado con paréntesis.

=item Funciones obsoletas en perl5

C<dbmclose>, C<dbmopen>

=back

=head2 Portabilidad
X<portabilidad> X<adaptación> X<Unix> X<portable>

Perl nació en Unix y por eso puede acceder a todas las llamadas normales del sistema Unix.  En entornos no Unix, la funcionalidad de algunas llamadas del sistema Unix pueden no estar disponibles, o los detalles de la funcionalidad disponible diferir ligeramente.  Las funciones Perl afectadas por esto son:

C<-X>, C<binmode>, C<chmod>, C<chown>, C<chroot>, C<crypt>,
C<dbmclose>, C<dbmopen>, C<dump>, C<endgrent>, C<endhostent>,
C<endnetent>, C<endprotoent>, C<endpwent>, C<endservent>, C<exec>,
C<fcntl>, C<flock>, C<fork>, C<getgrent>, C<getgrgid>, C<gethostbyname>,
C<gethostent>, C<getlogin>, C<getnetbyaddr>, C<getnetbyname>, C<getnetent>,
C<getppid>, C<getpgrp>, C<getpriority>, C<getprotobynumber>,
C<getprotoent>, C<getpwent>, C<getpwnam>, C<getpwuid>,
C<getservbyport>, C<getservent>, C<getsockopt>, C<glob>, C<ioctl>,
C<kill>, C<link>, C<lstat>, C<msgctl>, C<msgget>, C<msgrcv>,
C<msgsnd>, C<open>, C<pipe>, C<readlink>, C<rename>, C<select>, C<semctl>,
C<semget>, C<semop>, C<setgrent>, C<sethostent>, C<setnetent>,
C<setpgrp>, C<setpriority>, C<setprotoent>, C<setpwent>,
C<setservent>, C<setsockopt>, C<shmctl>, C<shmget>, C<shmread>,
C<shmwrite>, C<socket>, C<socketpair>,
C<stat>, C<symlink>, C<syscall>, C<sysopen>, C<system>,
C<times>, C<truncate>, C<umask>, C<unlink>,
C<utime>, C<wait>, C<waitpid>

Para más información sobre la portabilidad de estas funciones, ver L<perlport> y otra documentación específica de la plataforma que esté disponible.

=head2 Listado alfabético de las funciones Perl

=over 8

=item -X MANEJADOR
X<-r>X<-w>X<-x>X<-o>X<-R>X<-W>X<-X>X<-O>X<-e>X<-z>X<-s>X<-f>X<-d>X<-l>X<-p>
X<-S>X<-b>X<-c>X<-t>X<-u>X<-g>X<-k>X<-T>X<-B>X<-M>X<-A>X<-C>

=item -X EXPR

=item -X

Un test de fichero, donde X es una de las letras listadas abajo.  Este operador unario toma un argumento, un nombre de fichero o un manejador, y testea el fichero asociado para ver si algo sobre él es cierto.  Si el argumento está omitido, se testea C<$_>, excepto para C<-t>, que testea STDIN.
Mientras no se diga lo contrario, devuelve C<1> para verdadero y C<''> para falso, o el valor indefinido si el fichero no existe.  A pesar de los nombres graciosos, la precedencia es la misma que en cualquier otro operador unario y el argumento puede ser rodeado por paréntesis como cualquier otro operador unario.  El operador puede ser cualquier de:

    -r	Fichero es leíble por el uid/gid en vigor.
    -w	Fichero es escribible por el uid/gid en vigor.
    -x	Fichero es ejecutable por el uid/gid en vigor.
    -o	Fichero es propiedad del uid en vigor.

    -R	Fichero es leíble por el uid/gid real.
    -W	Fichero es escribible por el uid/gid real.
    -X	Fichero es ejecutable por el uid/gid real.
    -O	Fichero es propiedad del uid real.

    -e	Fichero existe.
    -z	Fichero tiene tamaño cero (está vacío).
    -s	Fichero no tiene tamaño cero (devuelve el tamaño en bytes).

    -f	Fichero es un fichero normal.
    -d	Fichero es un directorio.
    -l	Fichero es un enlace simbólico.
    -p	Fichero es una tubería con nombre (FIFO), o el manejador es una tubería.
    -S	Fichero es un socket.
    -b	Fichero es un archivo especial por bloques.
    -c	Fichero es un archivo especial de caracteres.
    -t	Manejador está abierto a una tty.

    -u	Fichero tiene puesto el bit setuid.
    -g	Fichero tiene puesto el bit setgid.
    -k	Fichero tiene puesto el bit sticky.

    -T	Fichero es un fichero de texto ASCII (suposición heurística).
    -B	Fichero es un archivo "binario" (opuesto de -T).

    -M	Tiempo de modificación del fichero menos el tiempo de arranque del script, en días.
    -A	Lo mismo para el tiempo de acceso.
    -C	Lo mismo para el cambio de la fecha del inodo (Unix, puede diferir en otras plataformas)

Ejemplo:

    while (<>) {
	chomp;
	next unless -f $_;	# ignora especiales
	#...
    }

La interpretación de los operadores de permisos de fichero C<-r>, C<-R>, C<-w>, C<-W>, C<-x> y C<-X> es por defecto basado sólamente en el modo del fichero y en los uid y gid del usuario.  Puede haber otras razones por las que no pueda leer, escribir o ejecutar un fichero.  Esas razones pueden ser por ejemplo controles de acceso a sistemas de ficheros en red, ACL (listas de control de acceso), sistemas de ficheros de sólo lectura y formatos de ejecutables no reconocibles.

También note que, para el superusuario en el sistema de ficheros local, los test C<-r>, C<-R>, C<-w> y C<-W> siempre devuelven 1, y C<-x> y C<-X> devuelven 1 si cualquier bit de ejecución está puesto en el modo.  Scripts ejecutados por el superusuario pueden necesitar hacer un stat() para determinar el modo actual del fichero, o temporalmente poner su uid efectivo a otro valor.

Si está usando ACL, hay un pragma llamado C<filetest> que puede producir resultados más precisos que los simples bits de modo de stat().
Cuando esté bajo 'acceso' por <use filetest> los test de fichero mencionados arriba testearán cuándo los permisos pueden (o no) ser concedidos usando la familia de llamadas del sistema access().  También note que C<-x> y C<-X> pueden bajo este pragma devolver valores verdaderos incluso si los bits de permiso de ejecución no están puestos (ni cualquier permiso ACL extra de ejecución).  Este comportamiento tan extraño es debido a las definiciones subyacentes de las llamadas del sistema.  Lea la documentación para el pragma C<filetest> para más información.

Note que C<-s/a/b/> no realiza una substitución negada.  Diciendo C<-exp($foo)> todavía funciona como se espera; sólo letras sueltas siguiendo a un menos son interpretadas como test de ficheros.

Las opciones C<-T> y C<-B> funcionan como sigue.  El primer bloque o así del fichero es examinado para buscar extraños caracteres como códigos de control o caracteres con el bit alto puesto.  Si se encuentran demasiados caracteres extraños (>30%), es un fichero C<-B>; de lo contrario es un fichero C<-T>.  También, cualquier fichero conteniendo caracteres nulos en el primer bloque son considerados ficheros binarios.  Si C<-T> o C<-B> se usan con un manejador, el buffer actual de IO es examinado en vez del primer bloque.  Ambos C<-T> y C<-B> devuelven verdadero en un fichero nulo o en un fichero en el EOF (fin de fichero) cuando se testee un manejador.  Debido a que tiene que leer el fichero para hacer el test C<-T>, en la mayoría de las ocasiones querrá usar primero C<-f>, como enC<next unless -f $fichero && -T $fichero>.

Si a cualquiera de los test de fichero (o los operadores C<stat> o C<lstat>) se les da el manejador de fichero especial consistente en un solitario subrayado (guión bajo), entonces se usa la estructura stat del fichero del test anterior (u operador stat), ahorrando una llamada del sistema.  (Esto no funciona con  C<-t> y necesita recordar que lstat() y C<-l> dejarán valores en la estructura stat para el enlace simbólico, no el fichero real).  (También, si el buffer stat se rellenó con una llamada C<lstat>, C<-T> y C<-B> serán reinicializados con los resultados de C<stat _>).
Ejemplo:

    print "Puedo hacerlo.\n" if -r $a || -w _ || -x _;

    stat($nombre_de_fichero);
    print "Leíble\n" if -r _;
    print "Escribible\n" if -w _;
    print "Ejecutable\n" if -x _;
    print "Setuid\n" if -u _;
    print "Setgid\n" if -g _;
    print "Sticky\n" if -k _;
    print "Texto\n" if -T _;
    print "Binario\n" if -B _;

=item abs VALOR
X<abs> X<absoluto>

=item abs

Devuelve el valor absoluto del argumento.
Si se omite VALOR, se usa C<$_>.

=item accept NUEVOSOCKET,SOCKETGENÉRICO
X<accept>

Acepta un conexión socket entrante, como lo hace la llamada del sistema accept(2).  Devuelve la dirección empaquetada si ha tenido éxito, de lo contrario, falso.
Ver el ejemplo en L<perlipc/"Sockets: Comunicación Cliente/Servidor">.

En sistemas que soportan la bandera cerrar-en-ejecución sobre ficheros, la bandera será puesta para el nuevo descriptor de fichero abierto, determinado por el valor de $^F.  Ver L<perlvar/$^F>.

=item alarm SEGUNDOS
X<alarm>
X<SIGALRM>
X<timer> X<temporizador>

=item alarm

Ordena mandar una señal SIGALRM al proceso actual después de que haya pasado el número de segundos especificados.  Si no se ha especificado SEGUNDOS, se usará el valor almacenado en C<$_>. (En algunas máquinas, desafortunadamente, el tiempo transcurrido puede ser hasta un segundo más o menos del especificado debido a cómo los segundos son contados, y la planificación de procesos pueden retrasar la entrega de la señal incluso más).

Sólo un temporizador puede estar contando cada vez.  Cada llamada desactiva el temporizador anterior, y se puede indicar un argumento C<0> para cancelar el temporizador anterior sin empezar uno nuevo.  El valor devuelto es la cantidad de tiempo restante del temporizador anterior.

Para lapsos más finos que un segundo, puede usar la versión de Perl de cuatro argumentos de select() dejando los 3 primeros argumentos indefinidos, o puede usar la interface C<syscall> para acceder a setitimer(2) si su sistema lo soporta.  El módulo Time::HiRes (de CPAN, y siendo desde Perl 5.8 parte de la distribución estándar) puede también ser útil.

Normalmente es un fallo entremezclar llamadas a C<alarm> y C<sleep>.
(C<sleep> puede internamente estar implementado en su sistema con C<alarm>)

Si quiere usar C<alarm> controlar la duración de una llamada del sistema necesita una pareja C<eval>/C<die>.  No puede confiar que la alarma que llama a la llamada del sistema falle y ponga C<$!> a C<EINTR> porque Perl activa manejadores de señal para reiniciar llamadas al sistema en algunos sistemas.  Usando C<eval>/C<die> siempre funciona, teniendo en cuenta las advertencias dadas en L<perlipc/"Señales">.

    eval {
	local $SIG{ALRM} = sub { die "alarma\n" }; # NB: se requiere \n
	alarm $timeout;
	$nread = sysread SOCKET, $buffer, $size;
	alarm 0;
    };
    if ($@) {
	die unless $@ eq "alarma\n";   # propagar errores inesperados
    	# tiempo agotado
    }
    else {
    	# no se agotó el tiempo
    }

Para más información ver L<perlipc>.

=item atan2 Y,X
X<atan2> X<arcotangente> X<tan> X<tangente>

Devuelve el arcotangente de Y/X en el rango -PI a PI.

Para la operación tangente, puede usar la función C<Math::Trig::tan>, o usar la conocidad relación:

    sub tan { sin($_[0]) / cos($_[0])  }

Note que atan2(0, 0) no está bien definida.

=item bind SOCKET,NOMBRE
X<bind>

Enlaza una dirección de red a un socket, como lo hace la llamada del sistema bind.  Devuelve verdadero si tiene éxito; de lo contrario, falso.  NOMBRE debe ser una dirección empaquetada del tipo apropiado para el socket.  Ver los ejemplos en L<perlipc/"Sockets: Comunicación Cliente/Servidor">.

=item binmode MANEJADOR, CAPA
X<binmode> X<binario> X<texto> X<DOS> X<Windows>

=item binmode MANEJADOR

Ordena que el modo de lectura o escritura para el MANEJADOR sea en "binario" o "texto" en sistemas donde las bibliotecas en tiempo de ejecución distingan entre ficheros binarios y de texto.  Si MANEJADOR es una expresión, el valor es tomado como el nombre del manejador.  Devuelve verdadero en éxito; de lo contrario devuelve C<undef> y pone C<$!> (errno).

En algunos sistemas (en general, sistemas basados en DOS y Windows) binmode() es necesario cuando no esté trabajando con un fichero de texto.  Para una mejor portabilidad es una buena idea siempre usarlo cuando sea apropiado, y nunca usarlo cuando no sea apropiado.  También, el personal puede poner su I/O para que sea codificado en Unicode UTF-8, y no bytes.

En otras palabras: indiferentemente de la plataforma, use binmode() en datos binarios, como por ejemplo imágenes.

Si CAPA está presente es un único string, pero puede contener múltiples directivas. Las directivas alteran el comportamiento del manejador del fichero.
Tiene sentido usar binmode sobre un fichero de texto cuando CAPA está presente.

Si se omite CAPA o se especifica como C<:raw> el manejador se prepara para pasar datos binarios. Esto incluye desactivar posibles traducciones CRLF y marcarlas como bytes (como opuesto a los caracteres Unicode).
Note que, a pesar de estar implícito en I<"Programming Perl"> (el dromedario) o en otra lugar, C<:raw> I<no> es el inverso simple de C<:crlf> -- otras capas que pudieran afectar la naturaleza binaria del flujo son I<también> desactivadas. Ver L<PerlIO>, L<perlrun> y la discusión sobre la variable de entorno PERLIO.

C<:bytes>, C<:crlf> y C<:utf8>, y cualquier otra directiva de la forma C<:...> se llaman I<capas> I/O.  El pragma C<open> puede ser usado para establecer las capas I/O por defecto.  Ver L<open>.

I<El parámetro CAPA de la función binmode() se describe como "DISCIPLINA" en "Programming Perl, 3rd Edition".  Sin embargo, desde la publicación de este libro, conocido por muchos como "Camel III", el consenso sobre el nombre de esta funcionalidad se ha movido desde "disciplina" a "capa".  Toda documentación desde esta versión de Perl se refiere a "capas" en vez de a "disciplinas".  Ahora volvamos a la documentación normal...>

Para marcar MANEJADOR como UTF-8, use C<:utf8>.

En general, binmode() debe ser llamada después de open() pero antes de que cualquier I/O se realice sobre el manejador.  Llamando binmode() normalmente vaciará cualquier dato pendiente almacenado en la salida (y quizás datos pendientes a la entrada) del manejador.  Una excepción a esto es la capa C<:encoding> que cambia la codificación por defecto del manejador; ver L<open>.
La capa C<:encoding> algunas veces necesita ser llamada en mitad del flujo de datos y no lo vacía.  C<:encoding> también se coloca, implícitamente, por encima de la capa C<:utf8> porque Perl internamente operará con caracteres Unicode codificados en UTF-8.

El sistema operativo, controladores de dispositivos, bibliotecas C y Perl en tiempo de ejecución trabajan al unísono para permitirle al programador tratar un simple carácter (C<\n>) como el final de línea, independientemente de su representación externa.  En muchos sistemas operativos, la representación nativa de un fichero texto coincide con su representación interna, pero en algunas plataformas la representación externa de C<\n> se realiza con más de un carácter.

Mac OS, todas las variantes de Unix y los ficheros Stream_LF sobre VMS usan un único carácter al final de cada línea en la representación externa del texto (incluso si el carácter único es un RETORNO DE CARRO en Mac OS y un AVANCE DE LÍNEA en Unix y la mayor parte de los ficheros VMS). En otros sistemas como OS/2, DOS y los distintos sabores de MS-Windows tu programa vee un C<\n> como un simple C<\cJ>, pero es almacenado en los ficheros de texto como los dos caracteres C<\cM\cJ>.  Esto significa que, si no usas binmode() en estos sistemas, las secuencias C<\cM\cJ> en disco serán convertidas a C<\n> en la entrada y cualquier C<\n> en tu programa será convertido de nuevo en C<\cM\cJ> en la salida.  Esto es lo que quiere para ficheros de texto, pero puede ser desastroso para ficheros binarios.

Otra consecuencia de usar binmode() (en algunos sistemas) es que las marcas especiales de fin-de-fichero serán vistas como parte del flujo de datos.
Para los sistemas de la familia Microsoft esto significa que si sus datos binarios contienenC<\cZ>, el subsistema I/O lo considerarán como el fin del fichero, a menos que use binmode().

binmode() no sólo es importante para las operaciones readline() y print(), sino también cuando se usan read(), seek(), sysread(), syswrite() y tell() (ver L<perlport> para más detalles).  Ver las variables C<$/> y C<$\> en L<perlvar> para cómo poner manualmente sus secuencias de fin de línea en su entrada y salida.

=item bless REF,NOMBRECLASE
X<bless>

=item bless REF

Esta función dice que la cosa referenciada por REF es ahora un objeto del paquete NOMBRECLASE (I<bless> es bendición en inglés, que se podría traducir mejor por bautizar, en el sentido de 'dar un nombre' al objeto).  Si se omite NOMBRECLASE, se usa el paquete actual.  Como un C<bless> a menudo es la última cosa de un constructor, devuelve la referencia por conveniencia.  Siempre usar la versión de dos argumentos si una clase derivada puede heredar la función con un nuevo bautizo.
Ver L<perltoot> y L<perlobj> para saber más sobre bautizos (y bautizar) de objetos.

Considerar siempre bautizar objetos de NOMBRECLASE que mezcle mayúsculas y minúsculas.
El espacio de nombres en minúsculas está considerado reservado para los pragmas de Perl.  Los tipos incluidos tienen todos sus nombres en mayúscula. Para evitar confusiones, evite nombres de paquete también de esta manera.  Asegúrese de que NOMBRECLASE es un valor verdadero.

Ver L<perlmod/"Módulos Perl">.

=item caller EXPR
X<caller> X<call stack> X<stack> X<stack trace> X<pila> X<pila de llamadas>

=item caller

Devuelve el contexto de la llamada a la subrutina actual.  En contexto escalar, devuelve el nombre del paquete del llamante si aquel es un llamante, es decir, si estamos en una subrutina, C<eval> o C<require>, y el valor indefinido en otro caso.  En contexto lista, devuelve

    ($paquete, $nombre_fichero, $linea) = caller;

Con EXPR, devuelve alguna información extra que el depurador usa para imprimir un rastreo de la pila.  El valor de EXPR indica cuántos marcos de llamada se ha de retroceder antes del actual.

    ($paquete, $fichero, $linea, $subritina, $hasargs,
    $wantarray, $evaltext, $is_require, $hints, $bitmask) = caller($i);

Aquí, $subrutina puede ser C<(eval)> si el marco de llamada no es una llamada a una subrutina, sino un C<eval>.  En tal caso, se añaden los nuevos elementos $evaltext y C<$is_require>: C<$is_require> es verdadero si el marco es creado por una sentencia C<require> o C<use>, $evaltext contiene el texto de la sentencia C<eval EXPR>.  En particular, para una sentencia C<eval BLOQUE>, $fichero es C<(eval)>, pero $evaltext es indefinido.  (Note también que cada sentencia C<use> crea un marco C<require> dentro de un marco C<eval EXPR>).  $subrutina puede ser también C<(unknown)> (desconocida) si esta subrutina en particular parece haber sido borrada de la tabla de símbolos.
C<$hasargs> es verdadero si una nueva instancia de C<@_> fue creada para este marco.
C<$hints> y C<$bitmask> contienen detalles para los cuales caller fue compilado.  Los valores C<$hints> y C<$bitmask> están sujetos a cambios entre versiones de Perl y no se espera que sean utilizados para uso externo.

 Además, cuando se le llama desde el interior de un paquete DB, caller devuelve información más detallada: actuliza la variable C<@DB::args> con los argumentos con los que la subrutina fue invocada.

Cuidado con el optimizador, que puede optimizar marcos de llamada antes de que C<caller> tenga la oportunidad de obtener la información.  Esto significa que C<caller(N)> quizás no devuelva información sobre el marco de llamada que espera, para C<< N > 1 >>.  En particular, C<@DB::args> podría tener información de la llamada a la anterior llamada a C<caller>.

=item chdir EXPR
X<chdir> X<cd>

=item chdir MANEJADOR

=item chdir MANEJADORDIR

=item chdir

Cambia el directorio de trabajo a EXPR, si es posible. Si se omite EXPR, cambia al directorio especificado por C<$ENV{HOME}>, si está puesto; si no, cambia al directorio especificado por C<$ENV{LOGDIR}>. (Bajo VMS, la variable C<$ENV{SYS$LOGIN}> es también comprobada y usada si está puesta). Si ninguna está puesta, C<chdir> no hace nada. Devuelve verdadero si tuvo éxito, sino, falso. Ver ejemplo en C<die>.

En sistemas que soportan fchdir, podría pasarle como argumento un manejador de fichero o un manejador de directorio.  En sistemas que no soportan fchdir, pasarle manejadores produce un error fatal en tiempo de ejecución.

=item chmod LISTA
X<chmod> X<permisos> X<modo>

Cambia los permisos de una lista de ficheros.  El primer elemento de la lista debe ser un modo numérico, que normalmente estará en octal, y que, definitivamente, I<no> debe ser una cadena de dígitos en octal: C<0644> es correcto, C<'0644'> no lo es.  Devuelve el número de ficheros cambiados con éxito.  Ver también L</oct>, si todo lo que tiene es una cadena.

    $num = chmod 0755, 'foo', 'bar';
    chmod 0755, @ejecutables;
    $modo = '0644'; chmod $modo, 'foo';      # !!! pone el modo a
                                             # --w----r-T
    $modo = '0644'; chmod oct($modo), 'foo'; # esto es mejor
    $modo = 0644;   chmod $modo, 'foo';      # este es el mejor

En sistemas que soportan fchmod, podría pasar manejadores de fichero en lugar de los ficheros.  En sistemas que no soportan fchmod, pasarle manejadores produce un error fatal en tiempo de ejecución.

    open(my $fh, "<", "foo");
    my $permisos = (stat $fh)[2] & 07777;
    chmod($permisos | 0600, $fh);

También puede importar las constantes simbólicas C<S_I*> desde el módulo Fcntl:

    use Fcntl ':mode';

    chmod S_IRWXU|S_IRGRP|S_IXGRP|S_IROTH|S_IXOTH, @ejecutables;
    # Esto es idéntico a chmod 0755 del ejemplo de arriba.

=item chomp VARIABLE
X<chomp> X<INPUT_RECORD_SEPARATOR> X<$/> X<newline> X<eol> X<nueva línea> X<fin de línea>

=item chomp( LISTA )

=item chomp

Esta es la versión segura de L</chop>, que quita cualquier string restante que corresponda al valor actual de C<$/> (también conocido como $INPUT_RECORD_SEPARATOR -separador de registros en entrada- en el módulo C<English>).  Devuelve el número total de caracteres eliminados de todos sus argumentos.  Se utiliza a menudo para eliminar el carácter de nueva línea del final de un registro de entrada cuando es importante que el registro al final le pueda faltar ese carácter.  En modo párrafo (C<$/ = "">), elimina todos los caracteres de nueva línea del string.
En modo chupón (C<$/ = undef>) o en modo registros de longitud fija (C<$/> es una referencia a un entero o algo parecido, ver L<perlvar>) chomp() no elimina nada.
Si VARIABLE se omite, usa C<$_>.  Ejemplo:

    while (<>) {
	chomp;	# evitar \n en el último campo
	@array = split(/:/);
	# ...
    }

Si VARIABLE es un hash, recorta los valores del hash, pero no sus claves.

Puede recortar cualquier cosa que sea un lvalue (valor a la izquierda), incluyendo una asignación:

    chomp($cwd = `pwd`);
    chomp($respuesta = <STDIN>);

Si recorta una lista, cada elemento es recortado y se devuelve el número total de caracteres eliminados.

Si el pragma C<encoding> está en el ámbito actual entonces la longitud devuelta es calculada a partir de la longitud de los caracteres C<$/> Unicode, que no siempre es de la longitud de C<$/> en la codificación nativa.

Nota que los paréntesis son necesarios cuando esté recortando cualquier cosa que no sea una simple variable.  Esto es porque C<chomp $cwd = `pwd`;> es interpretado como C<(chomp $cwd) = `pwd`;>, en vez de un C<chomp( $cwd = `pwd` )> que es lo que se esperaba.  Similarmente, C<chomp $a, $b> es interpretado como C<chomp($a), $b> en vez de un C<chomp($a, $b)>.

=item chop VARIABLE
X<chop>

=item chop( LISTA )

=item chop

Recorta el último carácter de un string y devuelve el carácter recortado.  Es más eficiente que C<s/.$//s> porque ni escanea ni copia el string.  Si VARIABLE se omite, recorta C<$_>.
Si VARIABLE es un hash, recorta los valores del hash, pero no sus claves.

Puede recortar cualquier cosa que sea un lvalue (valor a la izquierda), incluyendo una asignación.

Si recorta una lista, cada elemento es recortado.  Sólo se devuelve el valor del último recorte.

Note que C<chop> devuelve el último carácter.  Para devolver todos menos el último carácter, use C<substr($string, 0, -1)>.

Ver también L</chomp>.

=item chown LISTA
X<chown> X<owner> X<user> X<group> X<propietario> X<usuario> X<grupo>

Cambia el propietario (y grupo) de una lista de ficheros.  Los primeros dos elementos de la lista deben ser el valor I<numérico> del uid y gid, en este orden.  Un valor de -1 en cualquier posición es interpretado en la mayoría de los sistemas como que se deja el actual valor sin cambiar.  Devuelve el número de ficheros cambiados con éxito.

    $num = chown $uid, $gid, 'foo', 'bar';
    chown $uid, $gid, @ficheros;

En sistemas que soportan fchown, podría pasar manejadores de fichero en lugar de los ficheros.  En sistemas que no soportan fchown, pasarle manejadores produce un error fatal en tiempo de ejecución.

Aquí hay un ejemplo que obtiene el uid numérico a partir del fichero de contraseñas:

    print "Usuario: ";
    chomp($usuario = <STDIN>);
    print "Ficheros: ";
    chomp($patron = <STDIN>);

    ($login,$pass,$uid,$gid) = getpwnam($usuario)
	or die "$usuario no está en fichero de contraseñas";

    @ary = glob($patron);	# expande los nombres de fichero
    chown $uid, $gid, @ary;

En la mayoría de los sistemas, no se le permite cambiar la propiedad del fichero a menos que sea el superusuario, aunque sí pueda cambiar el grupo a cualquiera de sus grupos secundarios.  En sistemas inseguros, estas restricciones pueden estar más relajadas, pero no es una suposición normal.
En sistemas POSIX, puede detectar esta condición de esta manera:

    use POSIX qw(sysconf _PC_CHOWN_RESTRICTED);
    $puedo_hacer_chown = not sysconf(_PC_CHOWN_RESTRICTED);

=item chr NÚMERO
X<chr> X<character> X<ASCII> X<Unicode> X<carácter>

=item chr

Devuelve el carácter representado por NÚMERO en el conjunto de caracteres.
Por ejemplo, C<chr(65)> es C<"A"> tanto en ASCII como en Unicode, y chr(0x263a) es una cara sonriente en Unicode.  Nota que los caracteres del 128 al 255 (inclusive) no están codificados por defecto en Unicode UTF-8 por razones de compatibilidad hacia atrás (pero vea L<encoding>).

Si se omite NÚMERO, se usa C<$_>.

Para lo contrario, use L</ord>.

Note que bajo el pragma C<bytes> el NÚMERO es enmascarado a los 8 bits más bajos.

Ver L<perlunicode> y L<encoding> para más información sobre Unicode.

=item chroot FICHERO
X<chroot> X<root>

=item chroot

Esta funcion trabaja como la llamada del sistema del mismo nombre: hace que el directorio indicado sea el directorio raíz de los siguientes caminos que comiencen por un C</> en su proceso y todos sus hijos.  (No cambia su actual directorio de trabajo actual, que no queda afectado). Por razones de seguridad, esta llamada está reservada al superusuario.  Si FICHERO se omite, hace un C<chroot> a C<$_>.

=item close MANEJADOR
X<close>

=item close

Cierra el fichero o tubería asociada con el manejador, devolviendo verdadero sólo si la memoria intermedia de IO (E/S) se han podido despejar y se ha cerrado el descriptor de archivo del sistema.  Cierra el manejador actualmente seleccionado si se omite el argumento.

No tiene porqué cerrar el MANEJADOR si inmediatamente va a hacer otro C<open> sobre él mismo, porque C<open> le cerrará por usted.  (Ver C<open>). Sin embargo, un C<close> explícito en un fichero de entrada reiniza el contador de líneas (C<$.>), mientras que un C<close> implícito hecho por C<open>, no.

Si el manejador proviene de una tubería abierta, C<close> adicionalmente devolverá falso si alguna de las otras llamadas del sistema implicadas falla, o si el programa sale con un valor de estado de no cero.  (Si el único problema fue que el programa salió con un valor no cero, C<$!> será puesto a C<0>). Cerrar una tubería implica esperar a que el proceso que ejecuta la tubería termine, para el caso de que quiera obtener después la salida de la tubería, e implícitamente pone el valor del estado de salida del comando en C<$?>.

Cerrar prematuramente la lectura final de una tubería (p.e. antes de que el proceso de escritura a él desde el otro lado se haya cerrado) resultará en un SIGPIPE enviado al escritor.  Si el otro lado no puede manejar esto, asegúrese de leer todos los datos antes de cerrar la tubería.

Ejemplo:

    open(OUTPUT, '|sort >foo')  # tubería a sort
        or die "No puedo iniciar sort: $!";
    #...			# pintar material a la salida
    close OUTPUT		# esperar a que termine sort
        or warn $! ? "Error cerrando tubería sort: $!"
                   : "Estatus de salida $? desde sort";
    open(INPUT, 'foo')		# obtener el resultado de sort
        or die "No puedo abrir 'foo' para entrada: $!";

MANEJADOR puede ser una expresión cuyo valor puede ser usado como un manejador indirecto, normalmente el nombre real del manejador.

=item closedir MANEJADORDIR
X<closedir>

Cierra un directorio abierto por C<opendir> y devuelve el éxito de la llamada del sistema.

=item connect SOCKET,NOMBRE
X<connect>

Intenta conectarse a un socket remoto, como lo hace la llamada del sistema connect.  Devuelve verdadero si tiene éxito; de lo contrario, falso.  NOMBRE debe ser una dirección empaquetada del tipo apropiado para el socket.  Ver los ejemplos en L<perlipc/"Sockets: Comunicación Cliente/Servidor">.

=item continue BLOQUE
X<continue>

C<continue> es realmente una sentencia de control de flujo en lugar de una función.  Si existe un BLOQUE C<continue> adjunto a un BLOQUE (típicamente en un C<while> o C<foreach>), siempre es ejecutado justo antes de que la condicional sea de nuevo evaluada, igual que la tercera parte de un bucle C<for> en C.  Así, puede ser usado para incrementar una variable de bucle, incluso cuando el bucle ha sido interrumpido por medio de una sentencia C<next> (por lo que es similar a la sentencia C<continue> del C).

C<last>, C<next> o C<redo> pueden aparecer dentro de un bloque C<continue>.  C<last> y C<redo> se comportarán como si se hubieran ejecutado dentro del bloque principal.  También C<next>, pero como el ejecutará un bloque C<continue>, será algo más divertido.

    while (EXPR) {
	### redo siempre viene aquí
	hacer_algo;
    } continue {
	### next siempre viene aquí
	hacer_algo_despues;
	# entonces regresa arriba a recomprobar la EXPR
    }
    ### last siempre viene aquí

Omitiendo la sección C<continue> es semánticamente equivalente a usar uno vacío, lo cual es lógico.  En este caso, C<next> sube directamente a comprobar la condición al principio del bucle.

=item cos EXPR
X<cos> X<cosine> X<acos> X<arccosine> X<coseno> X<arcocoseno>

=item cos

Devuelve el coseno de EXPR (expresado en radianes).  Si EXPR se omite, devuelve el coseno de C<$_>.

Para la inversa de la operación coseno, puede usar la función C<Math::Trig::acos()>, o usar esta relación:

    sub acos { atan2( sqrt(1 - $_[0] * $_[0]), $_[0] ) }

=item crypt TEXTOPLANO,SALTO
X<crypt> X<digest> X<hash> X<salt> X<plaintext> X<password> X<decrypt> X<cryptography> X<passwd> X<contraseña>

Crea un string resumen exáctamente igual que la función crypt(3) de la biblioteca C (asumiendo que realmente tenga una versión de la que no haya sido exterpida por ser considerada un arma).

crypt() es una función hash de un sólo sentido.  El TEXTOPLANO y el SALTO se convierten en un pequeño string, llamado I<digest> (compendio, resumen), que es devuelto.  Los mismos TEXTOPLANO y SALTO siempre devolverán el mismo string, pero no hay una forma (conocida) de obtener el TEXTOPLANO original desde el hash.  Pequeños cambios en TEXTPLANO o SALTO resultarán en grandes cambios en el I<digest>.

No existe la función decrypt.  Esta función no es muy útil para criptografía (para esto, mire en los módulos F<Crypt> en su espejo CPAN más cercano) y el nombre "crypt" es un poco equívoco.  En cambio se usa principalmente para comprobar si dos trozos de textos son el mismo sin tener que transmitirlo o almacenarlo.  Un ejemplo es comprobando si se ha dado una contraseña correcta.  El I<digest> de una contraseña se almacena, no la propia contraseña.  El usuario escribe la contraseña que es en-crypt()-tada con el mismo salto con el que fue almacenado el I<digest>.  Si los dos I<digest> coinciden, la contraseña es correcta.

Cuando verifique un string i<digest> debe usar el propio I<digest> como el salto (como C<crypt($plano, $digest) eq $digest>).  El SALTO usado para crear el I<digest> es visible como parte del I<digest>.  Esto asegura que crypt() hará el hash del nuevo string con el mismo salto que el I<digest>.
Esto permite a su código trabajar con el estándar L<crypt|/crypt> y con implementaciones más exóticas.  En otras palabras, no asuma nada sobre el string devuelto, o que cuántos bytes ocupa el I<digest>.

Tradicionalmente el resultado es un string de 13 bytes: los dos primeros bytes son el salto, seguido de 11 bytes del conjunto C<[./0-9A-Za-z]>, y sólo los primeros ocho bytes del I<digest> interesan, pero esquemas alternativos de cálculo de hash (como MD5), esquemas de seguridad de alto nivel (como C2) e implementacionesen plataformas no UNIX pueden producir strings diferentes.

Cuando escoja un nuevo salto cree un string de dos caracteres elegidos aleatoriamente del conjunto C<[./0-9A-Za-z]> (como por ejemplo C<join '', ('.', '/', 0..9, 'A'..'Z', 'a'..'z')[rand 64, rand 64]>).  Este conjunto de caracteres es sólo una recomendación; los caracteres permitidos en el salto dependen solamente de la función crypt del sistema y Perl no puede restringir el salto que C<crypt()> acepte.

Aquí hay un ejemplo que se asegura que quien corra el programa conoce su contraseña:

    $pwd = (getpwuid($<))[1];

    system "stty -echo";
    print "Password: ";
    chomp($palabra = <STDIN>);
    print "\n";
    system "stty echo";

    if (crypt($palabra, $pwd) ne $pwd) {
	die "Lo siento...\n";
    } else {
	print "correcto\n";
    }

Naturalmente es muy imprudente dar la propia contraseña a cualquiera que lo pregunte.

La función L<crypt|/crypt> no es apropiada para calcular el hash de grandes volúmenes de información, teniendo en cuenta que no es posible luego volver a obtener la misma información.  Mire en el módulo L<Digest> por algoritmos más robustos.

Si usa crypt() en un string Unicode (que I<potencialmente> tiene caracteres con codificación superior al 255), Perl intenta hacer sentido a la situación intentando hacer una degradación (una copia del string) a un string de bytes antes de llamar a crypt() (sobre esa copia).  Si esto funciona, bien.  Si no, crypt() muere con C<Wide character in crypt>.

=item dbmclose HASH
X<dbmclose>

[Esta función ha sido largamente supeditada por la función C<untie>].

Rompe la ligadura entre un fichero DBM y un hash.

=item dbmopen HASH,NOMBREDB,MÁSCARA
X<dbmopen> X<dbm> X<ndbm> X<sdbm> X<gdbm>

[Esta función ha sido largamente supeditada por la función C<tie>].

Liga un fichero dbm(3), ndbm(3), sdbm(3), gdbm(3), o Berkeley DB a un hash.  HASH es el nombre del hash.  (A diferencia de un C<open> normal, el primer argumento I<no> es un manejador, aunque lo parezca).  NOMBREDB es el nombre de la base de datos (sin la extensión F<.dir> o F<.pag> si las tuviera).  Si la base de datos no existe, se crea con la protección especificada por MÁSCARA (y modificada por C<umask>).  Si su sistema sólo soporta las viejas funciones DBM, sólo puede realizar un C<dbmopen> en su programa.  En las viejas versiones de Perl, si el sistema no tenía ni DBM ni ndbm, llamando a C<dbmopen> producía un error fatal; ahora lo intentaría con sdbm(3).

Si no tiene permiso de escritura al fichero DBM, sólo podrá leer las variables hash, pero no asignarlas.  Si quiere comprobar si puede escribir o no, use comprobaciones de fichero o intente asignar una entrada hash ficticia dentro de un C<eval>, que atrapará el error.

Note que las funciones como C<keys> y C<values> pueden devolver largas listas cuando se usan con ficheros DBM grandes.  Puede preferir usar la función C<each> para iterar sobre ficheros DBM grandes.  Ejemplo:

    # imprime los desplazamientos en el fichero histórico
    dbmopen(%HIST,'/usr/lib/news/history',0666);
    while (($clave,$valor) = each %HIST) {
	print $clave, ' = ', unpack('L',$valor), "\n";
    }
    dbmclose(%HIST);

Ver también L<AnyDBM_File> para una descripción más general de los pros y contras de las distintas formas dbm, así como L<DB_File> para ver una implementación particularmente rica.

Puede controlar qué biblioteca DBM usará cargando la biblioteca antes de llamar a dbmopen():

    use DB_File;
    dbmopen(%NS_Hist, "$ENV{HOME}/.netscape/history.db")
	or die "No puedo abrir el archivo histórico del netscape: $!";

=item defined EXPR
X<defined> X<undef> X<undefined> X<definido> X<indefinido>

=item defined

Devuelve un valor Booleano indicando si EXPR tiene un valor que no sea el valor indefinido C<undef>.  Si EXPR no está presnte, C<$_> será lo comprobado.

Muchas operaciones devuelven C<undef> para indicar un fallo, fin de fichero, error del sistema, variable no inicializada u otras condiciones excepcionales.  Esta función le permite distinguir C<undef> de otros valores.  (Un simple test Booleano no distinguirá entre C<undef>, cero, el string vacío y C<"0">, que son todos igualmente falso). Note que como C<undef> es un escalar válido, su presencia no indica I<necesariamente> una condición excepcional: C<pop> devuelve C<undef> cuando su argumento es un array vacío, I<o> cuando el elemento a devolver sea un C<undef>.

Puede usar también C<defined(&func)> para comprobar si la subrutina C<&func> ha sido definida.  El valor devuelto no es afectado por ninguna declaración posterior de C<&func>.  Note que una subrutina que no ha sido definida puede ser ejecutada: su paquete puede tener un método C<AUTOLOAD> que la hace aparecer la primera vez que es llamada -- ver L<perlsub>.

El uso de C<defined> sobre datos agregados (hashes y arrays) está desaconsejado.  Se usó para informar si la memoria para los datos agregados había sido reservada.  Este comportamiento puede desaparecer en futuras versiones de Perl.
Utilize en su lugar una comprobación de tamaño:

    if (@un_array) { print "tiene elementos array\n" }
    if (%un_hash)   { print "tiene elementos hash\n"   }

Cuando se usa con un elemento de un hash, le indica si el valor está definido, no si la clave existe en el hash.  Use L</exists> para este propósito.

Ejemplos:

    print if defined $switch{'D'};
    print "$valor\n" while defined($valor = pop(@array));
    die "No puedo hacer un readlink $sym: $!"
	unless defined($valor = readlink $sym);
    sub foo { defined &$bar ? &$bar(@_) : die "No bar"; }
    $debugging = 0 unless defined $debugging;

Nota: mucha gente tiende a sobrevalorar C<defined> y, para su sorpresa, descubren que el número C<0> y C<""> (el string de longitud cero) son, de hecho, valores definidos.  Por ejemplo, si dice

    "ab" =~ /a(.*)b/;

El patrón de búsqueda tiene éxito, y C<$1> es definida, a pesar del hecho de que se ha correspondido con "nada".  No ha fallado al corresponder con cualquier cosa.  Más bien, ha coincidido con algo que parece tener cero caracteres de longitud.  Todo esto trata sobre la honraded.  Cuando una función devuelve un valor indefinido, se asume que no puede dar una respuesta honrada.  Así que puede usar C<defined> sólo cuando está cuestionando la integridad de lo que está intentando hacer.  En otras ocasiones, una simple comparación con C<0> o C<""> es lo que necesita.

Ver también L</undef>, L</exists>, L</ref>.

=item delete EXPR
X<delete>

Dad una expresión que especifica un elemento de un hash, un elemento de un array, una porción de hash o una porción de un array, borra los elementos especificados del hash o array.
En caso de un array, si los elementos del array se encuentran al final, el tamaño del array se reducirá al mayor elemento que dé verdadero en la comprobación de exists() (o 0 si no existe tal elemento).

Devuelve una lista con el mismo número de elementos que el número de elementos por los cuales se intentó su borrado.  Cada elemento de la lista consiste del valor del elemento borrado o un valor indefinido.  En contexto escalar, esto significa que obtiene el valor del último elemento borrado (o el valor indefinido si este elemento no existía).

    %hash = (foo => 11, bar => 22, baz => 33);
    $escalar = delete $hash{foo};            # $escalar es 11
    $escalar = delete @hash{qw(foo bar)};    # $escalar es 22
    @array  = delete @hash{qw(foo bar baz)}; # @array es (undef,undef,33)

Borrando de C<%ENV> modifica el entorno.  Borrando de un hash enlazado a un fichero DBM borra esa entrada del fichero DBM.  Borrando de un hash o array C<enlazado> no necesariamente devolverá algo.

Borrando un elemento de un array devolverá efectivamente esa posición del array a su inicial y no inicializado estado.  Subsiguiente comprobación del mismo elemento con exists() devolverá falso.  También, borrando elementos de un array en mitad del array no desplazará el índice de los elementos que estén por debajo de ellos.  Use splice() para esto.  Ver L</exists>.

Lo siguiente borra (ineficientemente) todos los valores de %HASH y @ARRAY:

    foreach $clave (keys %HASH) {
	delete $HASH{$clave};
    }

    foreach $indice (0 .. $#ARRAY) {
	delete $ARRAY[$indice];
    }

Así como estos:

    delete @HASH{keys %HASH};

    delete @ARRAY[0 .. $#ARRAY];

Pero esto es más lento que simplemente asignar una lista vacía o indefiniendo %HASH o @ARRAY:

    %HASH = ();		# vacía completamente %HASH
    undef %HASH;	# hace que %HASH nunca haya existido

    @ARRAY = ();	# vacía completamente @ARRAY
    undef @ARRAY;	# hace que @ARRAY nunca haya existido

Note que EXPR puede ser tan arbitrariamente complicada con tal de que el final de la operación sea un elemento de un hash, de un array o una porción de un hash o array:

    delete $ref->[$x][$y]{$clave};
    delete @{$ref->[$x][$y]}{$clave1, $clave2, @masclaves};

    delete $ref->[$x][$y][$indice];
    delete @{$ref->[$x][$y]}[$indice1, $indice2, @masindices];

=item die LISTA
X<die> X<throw> X<excepción> X<raise> X<$@> X<abort>

Fuera de un C<eval>, imprime el valor de LIST al C<STDERR> y sale con el valor actual de C<$!> (errno).  Si C<$!> es C<0>, sale con el valor de C<<< ($? >> 8) >>> (estatus de la `orden`).  Si C<<< ($? >> 8) >>> es C<0>, sale con C<255>.  Dentro de un C<eval()>, el mensaje de error es colocado en C<$@> y el C<eval> termina con el valor indefinido.  Esta es la forma para que C<die> cree una excepcion.

Ejemplos equivalentes:

    die "No puedo cd a spool: $!\n" unless chdir '/usr/spool/news';
    chdir '/usr/spool/news' or die "No puedo cd a spool: $!\n"

Si el último elemento de LISTA no acaba en el carácter de nueva línea, se imprimen también el valor actual del número de línea y el actual número de línea de entrada (si existe), junto con un carácter de nueva línea.  Note que el "número de línea de entrada" (también conocido como "chunk" -tarugo-) está sujeto a cualquier noción de "línea" que sea efectiva en ese momento, y también está disponible en la variable especial C<$.>.  Ver L<perlvar/"$/"> y L<perlvar/"$.">.

Consejo: algunas veces añadir C<", parado"> a tu mensaje hará aparecerle con un sentido mejor cuando se le añada el string C<"at foo line 123">.
Suponga que está corriendo el script "canasta".

    die "/etc/games no está bien";
    die "/etc/games no está bien, parado";

produce, respectivamente

    /etc/games no está bien at canasta line 123.
    /etc/games no está bien, parado at canasta line 123.

Ver también exit(), warn() y el módulo Carp.

Si la LISTA está vacía y C<$@> ya contiene un valor (típicamente de un eval anterior) este valor es reusado después de añadirle C<"\t...propagated">.
Esto es útil para propagar excepciones:

    eval { ... };
    die unless $@ =~ /Excepción esperada/;

Si LISTA está vacía y C<$@> contiene una referencia a un objeto que tiene un método C<PROPAGATE>, éste método será llamado con los parámetros adicionales del fichero y número de línea.  El valor de retorno reemplaza el valor en C<$@>.  es decir, como si se ejecutara C<< $@ = eval { $@->PROPAGATE(__FILE__, __LINE__) }; >>.

Si C<$@> está vacío entonces se usa el string C<"Died">.

die() puede ser llamada también con una referencia como argumento.  Si ocurre que es atrapado dentro de un eval(), $@ contiene la referencia.  Este comportamiento permite una implementación del manejo de las excepciones más elaborada usando objetos que mantienen el estado sobre la naturaleza de la excepción.  Tal esquema es algunas veces preferible a emparejar strings particulares de $@ usando expresiones regulares.  Aquí hay un ejemplo:

    use Scalar::Util 'blessed';

    eval { ... ; die Some::Module::Exception->new( FOO => "bar" ) };
    if ($@) {
        if (blessed($@) && $@->isa("Some::Module::Exception")) {
            # procesar Some::Module::Exception
        }
        else {
            # procesar el resto de posibles excepciones
        }
    }

Como Perl convertirá en cadena de caracteres los mensajes de excepción no capturados antes de mostrarlos, quizás quiera sobrecargar las operaciones de conversión a cadena en objetos de excepción propios.  Ver L<overload> para los detalles sobre esto.

Puede disponer que una retrollamada se ejecute antes de que C<die> haga sus funciones, actualizando el gancho C<$SIG{__DIE__}>.  El manejador asociado será llamado con el texto del error y puede cambiar el mensaje de error, si le parece, llamando de nuevo a C<die>.  Ver L<perlvar/$SIG{expr}> para los detalles sobre cómo colocar entradas C<%SIG> y L<"eval BLOCK"> para algunos ejemplos.  Aunque esta característica está preparada para ser ejecutada sólo antes de que el programa termine, este no es el caso: el gancho C<$SIG{__DIE__}>, ¡es llamado incluso dentro de cadenas y bloques eval()uados!  Si uno quiere que el gancho no haga nada en estas situaciones, ponga

	die @_ if $^S;

como primera línea del manejador (ver L<perlvar/$^S>).  Debido a que provoca una acción extraña a gran distancia, este comportamiento no intuitivo puede ser arreglado en una distribución futura.

=item do BLOQUE
X<do> X<block> X<bloque>

No es realmente una función.  Devuelve el valor del último comando en la secuencia de comandos indicada por BLOQUE.  Cuando se encuentra acompañado por los modificadores de bucle C<while> o C<until>, ejecuta el BLOQUE una vez antes de comprobar la condición del bucle. (En otras sentencias los modificadores de bucle comprueban primero la condición).

C<do BLOQUE> I<no> cuenta como un bucle, así que las sentencias de control de bucle C<next>, C<last>, o C<redo> no pueden ser usadas para dejar o reiniciar el bloque.
Ver L<perlsyn> para estrategias alternativas.

=item do SUBRUTINA(LISTA)
X<do>

Esta forma de llamada de subrutina ha sido depreciada.  Ver L<perlsub>.

=item do EXPR
X<do>

Usa el valor de EXPR como el nombre de un fichero y ejecuta los contenidos del fichero como un script Perl.

    do 'stat.pl';

es igual que

    eval `cat stat.pl`;

excepto que es más eficiente y conciso, mantiene el nombre del fichero en los mensajes de error, busca en los directorios @INC y actualiza C<%INC> si el fichero es encontrado.  Ver L<perlvar/Nombres predefinidos> para estas variables.  También difiere en que el código evaluado con C<do NOMBREFICHERO> no puede ver a las variables léxicas en el ámbito en que se ejecuta; C<eval STRING> sí.  Es lo mismo, sin embargo, en que vuelve a parsear el fichero cada vez que lo llama, así que, probablemente, no querrá hacer esto dentro de un bucle.

Si C<do> no puede leer el fichero, devuelve undef y pone C<$!> al valor del error.  Si C<do> puede leer el fichero pero no puede compilarlo, devuelve undef y pone un mensaje de error en C<$@>.   Si el fichero se compila bien, C<do> devuelve el valor de la última expresión evaluada.

Note que la inclusión de bibliotecas de módulos es mejor hacerla con los operadores C<use> y C<require>, que también hacen comprobación automática de errores y generan una excepción si existe algún problema.

Puede usar C<do> para leer en un programa un fichero de configuración.  Comprobación manual de errores se puede hacer así:

    # leer en ficheros de configuración: primero el sistema, luego el usuario
    for $fichero ("/share/prog/defaults.rc",
               "$ENV{HOME}/.someprogrc")
   {
	unless ($return = do $fichero) {
	    warn "no puedo parsear $fichero: $@" if $@;
	    warn "no puedo hacer $fichero: $!"   unless defined $return;
	    warn "no puedo ejecutar $fichero"    unless $return;
	}
    }

=item dump ETIQUETA
X<dump> X<core> X<undump>

=item dump

Esta función provoca un volcado inmediato del núcleo de ejecución.  Ver también la opción de línea de comando B<-u> en L<perlrun>, que hace lo mismo.
Principalmente esto se utiliza en conjunción con el programa B<undump> (no suministrado) para convertir tu volcado del núcleo en un binario ejecutable después de haber inicializado todas las variables al comienzo del programa.  Cuando el nuevo binario es ejecutado, comenzará ejecutando un C<goto ETIQUETA> (con todas las restricciones que C<goto> padece).
Piense en él como un goto entre un volcado del núcleo y una reencarnación.
Si se omite C<ETIQUETA>, reinicia el programa desde el principio.

B<ATENCIÓN>: Cualquier fichero abierto en el momento del volcado I<no> será abierto cuando el programa sea reencarnado, con una muy posible confusión por parte de Perl.

Esta función es obsoleta desde hace mucho tiempo, en parte porque es muy difícil convertir un volcado del núcleo en un ejecutable, y porque el compilador incorporado para generar bytecode portable y el compilador de código C lo han superado ampliamente.  Y así es por qué debe invocarlo como C<CORE::dump()>, si no quiere ser avisado de que posiblemente ha cometido una falta ortográfica.

Si está pensando usar L<dump> para aumentar la velocidad de un programa, considerar el generar bytecode o código nativo C, tal como se describe en L<perlcc>.  Si sólo está intentando acelerar un guión CGI, considere usar la extensión C<mod_perl> en B<Apache>, o el módulo de CPAN, CGI::Fast.
Puede también considerar el método de autocarga, que le hará I<parecer> que su programa corre más rápido.

=item each HASH
X<each> X<hash, iterator> X<iterador>

Cuando se llama en contexto lista, devuelve una lista de dos elementos consistentes en la clave y el valor del siguiente elementos del hash, así que de esta manera puede iterar por el.  Cuando se le llama en contexto escalar, sólo devuelve la clave del siguiente elemento del hash. 

Las entradas son devueltas en un aparente orden aleatorio.  El actual orden aleatorio está sujeto a cambio en futuras versiones de Perl, pero está garantizado que sea en el mismo orden que las funciones C<keys> o C<values> producirían sobre el mismo hash.  Desde Perl 5.8.1 la ordenación es diferente incluso entre diferentes ejecuciones de Perl por razones de seguridad (ver L<perlsec/"Ataques por Complejidad Algorítmica">).

Cuando se haya leído completamente el hash, se devuelve un array nulo en contexto lista (que cuando es asignado produce un valor falso (C<0>)) y un C<undef> en contexto escalar.  La siguiente llamada a C<each> reiniciará la iteración.  Existe un único iterador por cada hash, compartido por las llamadas a las funciones C<each>, C<keys> y C<values> en el programa; puede ser reinicializado leyendo todos los elementos del hash, o evaluando C<keys HASH> o C<values HASH>.  Si añades o borras elementos de un hash mientras está iterando sobre él, puede encontrarse con entradas desaparecidas o duplicadas, así que no lo haga.  Excepción: Siempre es seguro borrar el último item devuelto por C<each()>, por lo que entonces el siguiente código funcionará:

        while (($clave, $valor) = each %hash) {
          print $clave, "\n";
          delete $hash{$clave};   # Esto es seguro
        }

Lo siguiente imprime su entorno como el programa printenv(1), sólo que en un orden diferente:

    while (($clave,$valor) = each %ENV) {
	print "$clave=$valor\n";
    }

Ver también C<keys>, C<values> y C<sort>.

=item eof MANEJADORFICHERO
X<eof>
X<end of file> X<fin de fichero>
X<end-of-file>

=item eof ()

=item eof

Devuelve 1 si el la siguiente lectura sobre MANEJADORFICHERO devolverá un fin de fichero, o si MANEJADORFICHERO no está abierto.  MANEJADORFICHERO puede ser una expresión cuyo valor da el manejador real.  (Note que esta función realmente lee un carácter y luego lo C<ungetc>, así que no es muy útil en un contexto interactivo). No lea de un fichero que se ha terminado (o llame a C<eof(MANEJADORFICHERO)> sobre él) después de obtener un fin-de-fichero.  Tipos de ficheros como por ejemplo terminales pueden perder la condición de fin-de-fichero si lo hace.

Un C<eof> sin argumento usa el último fichero leído.  Usar C<eof()> con paréntesis vacíos es muy diferente.  Se refiere a un pseudo fichero formado por los ficheros listados en la línea de comandos y accedidos vía el operador C<< <> >>.  Como C<< <> >> no es explícitamente abierto, como lo sería un manejador de fichero, un C<eof()> antes de que un C<< <> >> sea usado, causará que C<@ARGV> sea examinado para determinar si la entrada está disponible.   De forma semejante, un C<eof()> después de que un C<< <> >> haya devuelto un fin-de-fichero asumirá que está procesando otra lista C<@ARGV>, y si no ha puesto un nuevo C<@ARGV>, leerá la entrada desde C<STDIN>; ver L<perlop/"Operadores E/S">.

En un bucle C<< while (<>) >>, C<eof> o C<eof(ARGV)> pueden usarse para detectar el fin de un fichero; C<eof()> sólo detectará el final del último fichero.  Ejemplos:

    # reiniciar el numerado de líneas en cada fichero de entrada
    while (<>) {
	next if /^\s*#/;	# salta comentarios
	print "$.\t$_";
    } continue {
	close ARGV  if eof;	# No eof()!
    }

    # inserta guiones justo antes de la última línea del último fichero
    while (<>) {
	if (eof()) {		# testea final del último fichero
	    print "--------------\n";
	}
	print;
	last if eof();          # necesario si estamos leyendo de una terminal
    }

Truco práctico: casi nunca necesita usar C<eof> en Perl, porque los operadores de entrada normalmente devuelven C<undef> cuando no hay más datos, o si ocurrió un error.

=item eval EXPR
X<eval> X<try> X<catch> X<evaluate> X<parse> X<execute>

=item eval BLOQUE

=item eval

En la primera forma, el valor devuelto por EXPR es parseado y ejecutado como si fuera un pequeño programa Perl.  El valor de la expresión (que es en sí mismo determinada en contexto escalar) es primero parseada, y si no hay ningún error, ejecutada en el contexto léxico del actual programa Perl, por lo que no se mantienen después ningún valor de variable o definiciones de subrutinas o formatos.  Note que el valor es parseado cada vez que se ejecuta C<eval>.
Si EXPR se omite, se evalua C<$_>.  Esta forma es típicamente usada para retrasar el parseo subsecuente ejecución del texto de EXPR hasta el momento de la ejecución.

En la segunda forma, el código dentro del BLOQUE es parseado sólo una vez -al mismo tiempo que el código que rodea al mismo C<eval> es parseado- y ejecutado dentro del contexto del actual programa Perl.  Esta forma es típicamente usada para atrapar excepciones más eficientemente que la primera forma (ver arriba), mientras que también provee del beneficio de comprobar el código dentro del BLOQUE en tiempo de compilación.

El último punto y coma, si lo hay, puede ser omitido del valor de EXPR o dentro de BLOQUE.

En ambas formas, el valor devuelto es el valor de la última expresión evaluada dentro del mini-programa; una sentencia return se puede usar también, como si fuera una subrutina.  La expresión que da el valor de retorno es evaluada en contexto vacío (void), escalar o lista, dependiendo del contexto en que se encuentre el C<eval>.  Ver L</wantarray> para saber cómo determinar el contexto de la evaluación.

Si hay algún error de sintaxis o en tiempo de ejecución, o se ejecuta una sentencia C<die>, un valor indefinido es devuelto por C<eval> y C<$@> es puesto al mensaje de error.  Si no hay errores, se garantiza que C<$@> será un string nulo.  Tenga cuidado porque usar C<eval> ni silencia perl a la hora de imprimir avisos al STDERR, ni rellena el texto de los mensajes de error de los mensajes de aviso dentro de C<$@>.
Para hacer cualquiera de estas dos cosas debe usar C<$SIG{__WARN__}>, o desactivar los avisos dentro del BLOQUE o EXPR usando S<C<no warnings 'all'>>.
Ver L</warn>, L<perlvar>, L<warnings> y L<perllexwarn>.

Note que, como C<eval> atrapa errores considerados fatales, es útil para determinar cuando una característica en particular (como C<socket> o C<symlink>) está implementada.  También es la excepción en el sistema de atrapado de Perl, donde el operador die se usa para levantar excepciones.

Si el código a ser ejecutado no varía, puede usar la forma BLOQUE de eval para atrapar errores en tiempo de ejecución sin incurrir en la penalidad de recompilar cada vez.  El error, si está, es devuelto en C<$@>.
Ejemplos:

    # hace la división-por-cero no fatal
    eval { $respuesta = $a / $b; }; warn $@ if $@;

    # lo mismo, pero menos eficiente
    eval '$respuesta = $a / $b'; warn $@ if $@;

    # un error en tiempo de compilación
    eval { $respuesta = };			# MAL

    # un error en tiempo de ejecución
    eval '$respuesta =';	# pone $@

Usar la forma C<eval{}> como una trampa de excepciones en bibliotecas puede tener algunos problemas.  Debido al posible mal estado de la llamada C<__DIE__>, quizás deseé no activar ninguna de las llamadas C<__DIE__> que el código de usuario puede haber instalado.
Puede usar la construcción C<local $SIG{__DIE__}> para este propósito, como se muestra en este ejemplo:

    # una muy privada trampa de excepción para la división-por-cero
    eval { local $SIG{'__DIE__'}; $respuesta = $a / $b; };
    warn $@ if $@;

Esto es especialmente significativo, dado que las llamadas C<__DIE__> pueden llamar de nuevo a C<die>, que tiene el ejecto de cambiar los mensajes de error:

    # llamadas __DIE__ pueden modificar los mensajes de error
    {
       local $SIG{'__DIE__'} =
              sub { (my $x = $_[0]) =~ s/foo/bar/g; die $x };
       eval { die "foo vive aquí" };
       print $@ if $@;                # imprime "bar vive aquí"
    }

Debido a que provoca una acción extraña a gran distancia, este comportamiento no intuitivo puede ser arreglado en una futura distribución.

Dentro de C<eval>, debe, especialmente, recordar que es lo que está haciendo en cada momento:

    eval $x;		# CASO 1
    eval "$x";		# CASO 2

    eval '$x';		# CASO 3
    eval { $x };	# CASO 4

    eval "\$$x++";	# CASO 5
    $$x++;		# CASO 6

Los casos 1 y 2 se comportan idénticamente: ejecutan el código contenido en la variable $x.  (Aunque el caso 2 tiene unas engañosas dobles comillas haciendo maravillar al lector de qué es lo que que puede pasar -que es nada-).  Los casos 3 y 4 se comportan de la misma manera: ejecutan el código C<'$x'>, que no hace nada excepto devolver el valor de $x.  (El caso 4 es el preferido por razones puramente visuales, pero también tiene la ventaja de la compilación en tiempo de compilación en lugar de en tiempo de ejecución). Caso 5 es aquel donde normalmente I<debería> usar dobles comillas, excepto que en esta situación en particular, puede usar en su lugar referencias simbólicas instead, como en el caso 6.

C<eval BLOQUE> I<no> cuenta como un bucle, así que las sentencias de control de bucle C<next>, C<last>, o C<redo> no pueden ser usadas para dejar o reiniciar el bloque.

Note que como caso especial, un C<eval ''> ejecutado dentro del paquete C<DB> no ve el usual ámbito léxico circundante, más bien el ámbito del primer trozo de código no-DB que le llamó. No necesitará preocuparse de esto a menos que esté escribiendo un depurador Perl.

=item exec LISTA
X<exec> X<execute> X<ejecutar>

=item exec PROGRAMA LISTA

La función C<exec> ejecuta un comando del sistema I<y nunca regresa> --use C<system> en lugar de C<exec> si quiere que regrese.  Fallará y devolverá falso sólo si el comando no existe I<y> es ejecutado directamente en lugar de hacerlo con el shell de comandos del sistema (ver abajo).

Como es un error normal usar C<exec> en lugar de C<system>, Perl le avisará si hay alguna sentencia a continuación que no sea C<die>, C<warn> o C<exit> (si C<-w> está puesto - pero usted siempre lo tiene así, ¿verdad?).   Si I<verdaderamente> quiere continuar un C<exec> con otra sentencia, puede usar algunas de estas formas para evitar el aviso:

    exec ('foo')   or print STDERR "no puedo exec foo: $!";
    { exec ('foo') }; print STDERR "no puedo exec foo: $!";

Si hay más de un argumento en LISTA, o si LISTA es un array con más de un valor, se llama a execvp(3) con los argumentos de LISTA.
Si sólo hay un argumento escalar o un array con un elemento dentro de él, se comprueba si el argumento tiene metacaracteres, y si hay alguno, el argumento entero es pasado al shell de comandos para que sea parseado (suele ser C</bin/sh -c> en plataformas Unix, pero varía en otras plataformas).
Si no hay metacaracteres shell en el argumento, es dividido en palabras y pasadas directamente a C<execvp>, que es más eficiente.
Ejemplos:

    exec '/bin/echo', 'Tus argumentos son: ', @ARGV;
    exec "sort $salida | uniq";

Si realmente no quiere ejecutar el primer argumento, pero quiere engañar al programa que está ejecutando sobre su propio nombre, puede especificar el programa que quiera ejecutar como un "objeto indirecto" (sin la coma) enfrente de la LISTA.  (Esto siempre fuerza la interpretación de la LISTA como una lista multievaluada, incluso si sólo hay un único escalar en la lista). Ejemplo:

    $shell = '/bin/csh';
    exec $shell '-sh';		# pretende ser un shell del login

o, más directamente,

    exec {'/bin/csh'} '-sh';	# pretende ser un shell del login

Cuando los argumentos son ejecutados vía el shell del sistema, los resultados estarán sujetos a sus peculiaridades y capacidades.  Ver L<perlop/"`STRING`"> para los detalles.

Usar un objeto indirecto con C<exec> o C<system> es también más seguro.  Este uso (que también funciona bien con system()) fuerza la interpretación de los argumentos como una lista multievaluada, incluso si la lista sólo tiene un argumento.  De esta forma estará protegido de la expansión de los comodines del shell o de la división en palabras con un espacio en blanco dentro de ellas.

    @args = ( "echo sorpresa" );

    exec @args;               # sujeto a los escapes del shell
                                # if @args == 1
    exec { $args[0] } @args;  # seguro incluso con una lista de un argumento

La primera versión, sin el objeto indirecto, ejecuta el programa I<echo>, pasándole C<"sorpresa"> como argumento.  La segunda versión no: intentó ejecutar un programa llamado literalmente I<"echo surprise">, no lo encontró, y puso C<$?> a un valor distinto de cero para indicar un fallo.

A partir de la versión v5.6.0, Perl intentará vaciar todos los ficheros abiertos para salida antes de ejecutar exec, pero esto puede no estar soportado en todas las plataformas (ver L<perlport>).  Para asegurarse, puede poner C<$|> ($AUTOFLUSH en English) o llamar el método C<autoflush()> de C<IO::Handle> en cualquiera de los manejadores abiertos para evitar la pérdida de datos en la salida.

Note que C<exec> no llamará a sus bloques C<END>, ni llamará a ningún método C<DESTROY> de sus objetos.

=item exists EXPR
X<exists> X<autovivificación>

Dada una expresión que especifica un elemento de un hash o de un array, devuelve verdadero si el elemento especificado en el hash o array ha sido inicializado, incluso si el correspondiente valor es indefinido.  El elemento no es autovivificado si no existe.

    print "Existe\n"      if exists $hash{$clave};
    print "Definido\n"    if defined $hash{$clave};
    print "Verdadero\n"   if $hash{$clave};

    print "Existe\n"      if exists $array[$indice];
    print "Definido\n"    if defined $array[$indice];
    print "Verdadero\n"   if $array[$index];

Un elemento de un hash o de un array puede ser verdadero sólo si está definido, y definido y existe, pero lo inverso no es necesariamente cierto.

Dada una expresión que especifica el nombre de una subrutina, devuelve verdadero si la subrutina especificada ha sido declarada, incluso si esta está indefinida.  Mencionar el nombre de una subrutina para saber si existe o está definida no cuenta como si fuera su declaración.  Note que una subrutina que no existe puede ser llamada: su paquete puede tener un método C<AUTOLOAD> que la hace aparecer la primera vez que es llamada -- ver L<perlsub>.

    print "Existe\n"   if exists &subrutina;
    print "Definida\n" if defined &subrutina;

Note que EXPR puede ser todo lo arbitrariamente complicada que se quiera con tal de que la operación final sea un escalar de un hash o de un array o el nombre de una subrutina:

    if (exists $ref->{A}->{B}->{$clave})  { }
    if (exists $hash{A}{B}{$clave})       { }

    if (exists $ref->{A}->{B}->[$indice]) { }
    if (exists $hash{A}{B}[$indice])      { }

    if (exists &{$ref->{A}{B}{$clave}})   { }

Aunque el array o hash más profundamente anidado no se autovivifique sólo por que su existencia sea comprobada, cualquiera de los niveles intermedios sí lo hará.
Así. C<< $ref->{"A"} >> y C<< $ref->{"A"}->{"B"} >> aparecerán en la existencia debido al actual test por el elemento $clave.
Esto sucede en cualquier parte en que se use el operador flecha, incluso en:

    undef $ref;
    if (exists $ref->{"Alguna clave"})    { }
    print $ref;          # prints HASH(0x80d3d5c)

Esta sorprendente autovivificación en que al primer vistazo -o incluso al segundo- parece que es un contexto lvalor quizás será arreglado en una futura distribución.

Ver L<perlref/"Pseudo-hashes: Usando un array como un hash"> para el caso específico de como exists() actua cuando se usa sobre un pseudo-hash.

Usar una llamada de subrutina en lugar del nombre de una subrutina como argumento a exists() es un error.

    exists &sub;	# OK
    exists &sub();	# Error

=item exit EXPR
X<exit> X<terminar> X<abortar>

=item exit

Evalúa EXPR y sale inmediatamente con este valor.    Ejemplo:

    $ans = <STDIN>;
    exit 0 if $ans =~ /^[Xx]/;

Ver también C<die>.  Si EXPR es omitida, sale con estado C<0>.  Los únicos valores universalmente reconocidos para EXPR son C<0> para éxito y C<1> para error; otros valores están sujetos a interpretación dependiendo del entorno en que el programa Perl está corriendo.  Por ejemplo, saliendo con 69 (EX_UNAVAILABLE) desde un filtrado de un correo entrante hacia I<sendmail> hará que el despachador de correo devuelva el elemento sin entregar, pero no siempre es cierto.

No use C<exit> para abortar una subrutina si existe la posibilidad de que alguien pueda capturar el error que ocurrió.  Use en su lugar C<die>, que puede ser atrapado por un C<eval>.

La función exit() no siempre sale de forma inmediata.  exit() llama primero a cualquier rutina definida C<END>, pero estas rutinas C<END> pueden abortar la salida por sí mismas.  Igualmente cualquier destructor de objetos que necesite ser llamado es llamado antes de la salida real.  Si esto es un problema, puede llamar a C<POSIX:_exit($estado)> para saltar el procesado de END y de los destructores.
Ver L<perlmod> para los detalles.

=item exp EXPR
X<exp> X<exponencial> X<antilog> X<antilogaritmo> X<e>

=item exp

Devuelve I<e> (la base natural del logaritmo) a la potencia de EXPR.
Si EXPR se omite, devuelve C<exp($_)>.

=item fcntl MANEJADOR,FUNCIÓN,ESCALAR
X<fcntl>

Implementa la función fcntl(2).  Probablemente escribirá

    use Fcntl;

primero para obtener las definiciones de las constantes.  El procesado de argumentos y el valor devuelto funcionan como C<ioctl>.
Por ejemplo:

    use Fcntl;
    fcntl($manejador, F_GETFL, $buffer_empaquetado_devuelto)
	or die "no puedo hacer fcntl F_GETFL: $!";

No necesita comprobar con C<defined> al regreso de C<fcntl>.
Como C<ioctl>, mapea un C<0> devuelto de la llamada del sistema en un C<"0 but true"> ("0 pero cierto") en Perl.  Este string es verdadero en contexto booleano y C<0> en contexto numérico.  También es una excepción en el sistema de avisos B<-w> sobre conversiones numéricas impropias.

Note que C<fcntl> producirá un error fatal si se usa en una máquina que no implemente fcntl(2).  Ver el módulo Fcntl o la página de manual fcntl(2) para aprender qué funciones están disponibles en su sistema.

Aquí hay un ejemplo de poner un manejador de fichero llamado C<REMOTE> a no bloqueante a nivel de sistema.  Aunque, tendrá que negociar también con C<$|>.

    use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);

    $flags = fcntl(REMOTE, F_GETFL, 0)
                or die "No puedo obtener los flags para el socket: $!\n";

    $flags = fcntl(REMOTE, F_SETFL, $flags | O_NONBLOCK)
                or die "No puedo poner los flags para el socket: $!\n";

=item fileno MANEJADOR
X<fileno>

Devuelve el descriptor de fichero para un manejador, o indefinido si el manejador no está abierto.  Esto es principalmente útil para construir bitmaps para C<select> y operaciones POSIX de bajo nivel sobre tty.
Si el MANEJADOR es una expresión, el valor es tomado como un manejador indirecto, generalmente su nombre.

Puede usar esto para encontrar cuándo dos manejadores se refieren al mismo descriptor subyacente:

    if (fileno(THIS) == fileno(THAT)) {
	print "THIS Y THAT son duplicados\n";
    }

(Manejadores conectados a objetos en memoria vía las nuevas posibilidades de C<open> pueden devolver indefinido incluso si están abiertos).


=item flock MANEJADOR,OPERACIÓN
X<flock> X<lock> X<bloqueo>

Llama a flock(2), o una emulación de ella, sobre  MANEJADOR.  Devuelve verdadero para éxito, falso en fallo.  Produce un error fatal si se usa en una máquina que no implemente flock(2), bloqueo fcntl(2), o lockf(3).
C<flock> es el interface portable de Perl de bloqueo de fichero, aunque sólo bloquea ficheros enteros, no registros.

Dos potenciales no obvias pero tradicionales semánticas de C<flock> son que espera indefinidamente hasta que el bloqueo es efectivo, y que B<meramente es un consejo>.  Tales bloqueos discrecionalmente son más flexibles, pero ofrecen pocas garantías.  Esto significa que los programas que no usen C<flock> pueden modificar ficheros bloqueados con C<flock>.  Ver L<perlport>, la documentación específica de su adaptación Perl, o sus páginas de manual locales para los detalles.  Es mejor asumir el comportamiento tradicional si está escribiendo programas portables.  (Pero si no, puede siempre sentirse libre de escribir sus propias idiosincrasias del sistema (algunas veces llamadas "features" -características-).  Adhesión servil a los requerimientos de portabilidad no debe impedirle obtener el trabajo hecho).

OPERACIÓN es una de LOCK_SH, LOCK_EX, o LOCK_UN, posiblemente combinado con LOCK_NB.  Estas constantes tienen, tradicionalmente, los valores 1, 2, 8 y 4, pero puede usar los nombres simbólicos si los importa con el módulo Fcntl, tanto de forma indivual o como un grupo usando la marca ':flock'.  LOCK_SH solicita un bloqueo compartido, LOCK_EX solicita un bloqueo exclusivo y LOCK_UN devuelve un bloqueo solicitado previamente.  Si LOCK_NB se combina a nivel de bit con 'or' con LOCK_SH o LOCK_EX entonces C<flock> regresará inmediatamente en vez de esperar por el bloqueo (compruebe el valor de estado devuelto para ver si lo ha conseguido).

Para evitar la posibilidad de descoordinación, Perl ahora vacía el MANEJADOR antes de bloquearlo o desbloquearlo.

Note que la emulación integrada con lockf(3) no provee de bloqueos compartidos y requiere que el MANEJADOR sea abierto con intención de escribir en el.  Estas son las semánticas que lockf(3) implementa.  La mayor parte si no todos los sistemas implementan lockf(3) en términos de bloqueo con fcntl(2), aunque, las diferencias en la semántica no llame la atención a mucha gente.

Note que la emulación de fcntl(2) de flock(3) requiere que MANEJADOR sea abierto con intención de leer para usar LOCK_SH y requiere ser abierto con intención de escribir para usar LOCK_EX.

Note también que algunas versiones de C<flock> no pueden bloquear cosas sobre la red; necesitará usar un C<fcntl> más específico del sistema para hacer esto.  Si le gusta puede forzar a Perl a ignorar la función del sistema flock(2) y proveer de su propia emulación basada en fcntl(2), pasando la opción C<-Ud_flock> al programa F<Configure> cuando configure perl.

Esto es un agregador de correo para sistemas BSD.

    use Fcntl ':flock'; # importar constantes LOCK_*

    sub lock {
	flock(MBOX,LOCK_EX);
	# y, en el caso de que alguien agregase
	# mientras estábamos esperando...
	seek(MBOX, 0, 2);
    }

    sub unlock {
	flock(MBOX,LOCK_UN);
    }

    open(MBOX, ">>/usr/spool/mail/$ENV{'USER'}")
	    or die "No puedo abrir el buzón: $!";

    lock();
    print MBOX $msg,"\n\n";
    unlock();

En sistemas que soportan un flock() real, los bloqueos se heredan por llamadas fork(), teniendo en cuenta que se recurrirá a la caprichosa función fcntl() que pierde los bloqueos, haciendo difícil escribir servidores.

Ver también L<DB_File> para otros ejemplos de flock().

=item fork
X<fork> X<hijo> X<padre>

Hace una llamada del sistema fork(2) para crear un nuevo proceso ejecutando el mismo programa en el mismo punto.  Devuelve el pid del hijo al proceso padre, C<0> al proceso hijo, o C<undef> si no se consiguió el fork.  Descriptores de fichero (y algunas veces bloqueos en estos descriptores) son compartidos, mientras que todo lo demás es copiado.  En la mayoría de los sistemas que soportan fork(), se ha tenido gran cuidado en hacerlo extremadamente eficiente (por ejemplo, usando la tecnología copy-on-write en páginas de datos), haciendo de él el paradigma dominante de la multitarea en las últimas décadas.

A partir de la versión v5.6.0, Perl intentará vaciar todos los ficheros abiertos para salida antes de crear un proceso hijo, pero esto puede no estar soportado en todas las plataformas (ver L<perlport>).  Para asegurarse, puede poner C<$|> ($AUTOFLUSH en English) o llamar el método C<autoflush()> de C<IO::Handle> en cualquiera de los manejadores abiertos para evitar la duplicidad de datos en la salida.

Si usted hace un C<fork> sin luego esperar a sus hijos, irá acumulando zombies.  En algunos sistemas, puede evitar esto poniendo C<$SIG{CHLD}> a C<"IGNORE">.  Ver también L<perlipc> para más ejemplos de fork y borrado de hijos moribundos.

Note que si su hijo hereda los descriptores de archivo del sistema como STDIN y STDOUT que estén conectados a un pipe o a un socket, incluso si usted sale del programa, el servidor remoto (por ejemplo, un script CGI o un proceso lanzado en background desde un shell remoto) no se dará cuenta de que se ha ido.
Deberá reabrirlos a F</dev/null> si eso es un problema.

=item format
X<format>

Declara una imagen de formato para usar con la función C<write>.  Por ejemplo:

    format Algo =
	Test: @<<<<<<<< @||||| @>>>>>
	      $str,     $%,    '$' . int($numero)
    .

    $str = "widget";
    $numero = $coste/$cantidad;
    $~ = 'Algo';
    write;

Ver L<perlform> para más detalles y ejemplos.

=item formline CUADRO,LISTA
X<formline>

Esta es una función interna usada por C<format>, aunque también puede llamarla.  Formatea (ver L<perlform>) una lista de valores de acuerdo a los contenidos de CUADRO, colocando la salida en el acumulador de salida de format, C<$^A> (o C<$ACCUMULATOR> en English).
Finalmente, cuando se hace un C<write>, los contenidos de C<$^A> se escriben al manejador de fichero.  Puede también leer C<$^A> y volver a ponerla otra vez a C<"">.  Note que un formato típicamente hace un C<formline> por línea del formato, pero a la misma función C<formline> no le preocupa cuántos avances de línea están incluidos en el CUADRO.  Esto significa que los tokens C<~> y C<~~> tratarán al CUADRO entero como una única línea.
Puede por eso necesitar usar múltiples formline para implementar un único registro format, como lo hace el propio format.

Tenga cuidado si pone dobles comillas alrededor del cuadro, porque un carácter C<@> puede ser tomado como el comienzo del nombre de un array.
C<formline> siempre devuelve verdadero.  Ver L<perlform> para otros ejemplos.

=item getc MANEJADOR
X<getc> X<getchar>

=item getc

Devuelve el siguiente carácter desde el fichero de entrada asociado a MANEJADOR, o el valor indefinido en el final de fichero, o si ocurrió un error (en este último caso, se actualiza C<$!>).  Si MANEJADOR se omite, se lee desde STDIN.  Esto no es particularmente eficiente.  Sin embargo, esto no puede ser usado para extraer caracteres sueltos sin esperar a que el usuario pulse la tecla de enter.  Para esto, intente algo como esto:

    if ($BSD_STYLE) {
	system "stty cbreak </dev/tty >/dev/tty 2>&1";
    }
    else {
	system "stty", '-icanon', 'eol', "\001";
    }

    $tecla = getc(STDIN);

    if ($BSD_STYLE) {
	system "stty -cbreak </dev/tty >/dev/tty 2>&1";
    }
    else {
	system "stty", 'icanon', 'eol', '^@'; # ASCII null
    }
    print "\n";

La determinación de cómo poner $BSD_STYLE se deja como ejercicio al lector.

La función C<POSIX::getattr> puede hacer esto de forma más portable en sistemas compatibles con POSIX.  Ver también el módulo C<Term::ReadKey> en su sitio CPAN más cercano; detalles sobre CPAN se pueden encontrar en L<perlmodlib/CPAN>.

=item getlogin
X<getlogin> X<login>

Implementa la función de la librería C del mismo nombre, que en la mayoría de los sistemas devuelve el login actual desde F</etc/utmp>, si existe.  Si nulo, use C<getpwuid>.

    $login = getlogin || getpwuid($<) || "Kilroy";

No considere usar C<getlogin> para autenticación: no es tan seguro como C<getpwuid>.

=item getpeername SOCKET
X<getpeername> X<peer>

Devuelve la dirección sockect empaquetada del otro final de la conexión SOCKET.

    use Socket;
    $sudireccion          = getpeername(SOCK);
    ($puerto, $direccion) = sockaddr_in($sudireccion);
    $suhost               = gethostbyaddr($direccion, AF_INET);
    $sunombre             = inet_ntoa($direccion);

=item getpgrp PID
X<getpgrp> X<group>

Devuelve el actual grupo del proceso especificado por el PID.  Use un PID de C<0> para obtener el grupo del proceso actual.  Elevará una excepción si se usa en una máquina que no implemente getpgrp(2).  Si PID se omite, devuelve el grupo del proceso actual.  Note que la versión POSIX de C<getpgrp> no acepta un argumento PID, por lo que sólo C<PID==0> es verdaderamente portable.

=item getppid
X<getppid> X<padre> X<pid>

Devuelve el identificador de proceso del proceso padre.

Nota para usuarios Linux: en Linux, las funciones C C<getpid()> y C<getppid()> devuelven valores diferentes para hilos (threads) diferentes. Para ser portable, este comportamiento no está reflejado en la función  C<getppid()>, que devuelve un valor consistente en todos los hilos. Si quiere llamar a la subyacente C<getppid()>, puede usar el módulo de CPAN C<Linux::Pid>.

=item getpriority QUÉ,QUIEN
X<getpriority> X<prioridad> X<nice>

Devuelve la prioridad actual de un proceso, un grupo de procesos o un usuario.
(Ver L<getpriority(2)>). Elevará una excepción fatal si se usa en una máquina que no implemente getpriority(2).

=item getpwnam NOMBRE
X<getpwnam> X<getgrnam> X<gethostbyname> X<getnetbyname> X<getprotobyname>
X<getpwuid> X<getgrgid> X<getservbyname> X<gethostbyaddr> X<getnetbyaddr>
X<getprotobynumber> X<getservbyport> X<getpwent> X<getgrent> X<gethostent>
X<getnetent> X<getprotoent> X<getservent> X<setpwent> X<setgrent> X<sethostent>
X<setnetent> X<setprotoent> X<setservent> X<endpwent> X<endgrent> X<endhostent>
X<endnetent> X<endprotoent> X<endservent> 

=item getgrnam NOMBRE

=item gethostbyname NOMBRE

=item getnetbyname NOMBRE

=item getprotobyname NOMBRE

=item getpwuid UID

=item getgrgid GID

=item getservbyname NOMBRE,PROTO

=item gethostbyaddr DIRECCIÓN,TIPODIR

=item getnetbyaddr DIRECCIÓN,TIPODIR

=item getprotobynumber NÚMERO

=item getservbyport PUERTO,PROTO

=item getpwent

=item getgrent

=item gethostent

=item getnetent

=item getprotoent

=item getservent

=item setpwent

=item setgrent

=item sethostent SIGUEABIERTO

=item setnetent SIGUEABIERTO

=item setprotoent SIGUEABIERTO

=item setservent SIGUEABIERTO

=item endpwent

=item endgrent

=item endhostent

=item endnetent

=item endprotoent

=item endservent

Estas rutinas realizan las mismas funciones que sus homólogas en la biblioteca del sistema.  En contexto lista, los valores devueltos por varias de ellas son como sigue:

    ($nombre,$contrasena,$uid,$gid,
       $cuota,$comentario,$gcos,$dir,$shell,$expira) = getpw*
    ($nombre,$contrasena,$gid,$miembros) = getgr*
    ($nombre,$alias,$tipodir,$longitud,@direcciones) = gethost*
    ($nombre,$alias,$tipodir,$red) = getnet*
    ($nombre,$alias,$proto) = getproto*
    ($nombre,$alias,$puerto,$proto) = getserv*

(Si la entrada no existe, obtendrá una lista nula).

El significado exacto del campo $gcos varía pero usualmente contiene el nombre real del usuario (como opuesto al nombre de login) y otra información perteneciente al usuario.  Tenga cuidado, sin embargo, que en muchos sistemas los usuarios son capaces de cambiar esta información y por eso no puede confiarse y por eso el $gcos es considerado contaminado (ver L<perlsec>).  La $contrasena y el $shell, la contraseña encriptada del usuario y el shell del login, están también contaminados, por la misma razón.

En contexto escalar, obtiene el nombre, a menos que la función fuera localizar por nombre, en cuyo caso obtendrá la otra cosa, cualquiera que sea.
(Si la entrada no existe obtendrá el valor indefinido). Por ejemplo:

    $uid     = getpwnam($nombre);
    $nombre  = getpwuid($numero);
    $nombre  = getpwent();
    $gid     = getgrnam($nombre);
    $nombre  = getgrgid($numero);
    $nombre  = getgrent();
    #etc.

En I<getpw*()> los campos  $cuota, $comentario y $expira son casos especiales en el sentido que en muchos sistemas no están soportados.  Si la $cuota no está soportada, es un escalar vacío.  Si está soportada, usualmente codifica la cuota de disco.  Si el campo $comentario no está soportado, es un escalar vacío.  Si está soportado usualmente codifica algún comentario administrativo sobre el usuario.  En algunos sistemas el campo $cuota puede ser $cambio o $edad, campos que tienen que ver con la caducidad de la contraseña.  En algunos sistemas el campo $comentario puede ser $clase.  El campo $expira, si está presente, codifica el periodo de expiración de la cuenta o de la contraseña.  Para la disponibilidad y el significado exacto de estos campos en su sistema, por favor consulte la documentación de su getpwnam(3) y su fichero F<pwd.h>.  Puede también encontrar dentro de Perl que es lo que significan sus campos $cuota, $comentario y $expira usando el módulo C<Config> y los valores C<d_pwquota>, C<d_pwage>, C<d_pwchange>, C<d_pwcomment> y C<d_pwexpire>.  Ficheros de contraseñas Shadow sólo están soportados si el proveedor los ha implementado con la intuitiva moda de que llamando a las rutinas regulares de la biblioteca C se obtiene las versiones shadow si está corriendo con bajos privilegios o si existe la función shadow(3) tal como se encuentra en System V (esto incluye Solaris y Linux). Los sistemas que implementen un sistema de contraseñas shadow propietario es impropable que sean soportados.

El valor de $miembros  devuelto por I<getgr*()> es una lista separada por espacios de los nombres de login de los miembros del grupo.

Para las funciones I<gethost*()>, si la variable C<h_errno> está soportada en C, será devuelta vía C<$?> si la llamada a la función falla.  El valor devuelto C<@direcciones> por una exitosa llamada es una lista de las direcciones en crudo devueltas por la correspondiente llamada a la biblioteca del sistema.  En el dominio de Internet, cada dirección son cuatro bytes de longitud y puede empaquetarlos diciendo algo como:

    ($a,$b,$c,$d) = unpack('C4',$direccion[0]);

La biblioteca Socket hace esto ligeramente más fácilmente:

    use Socket;
    $idireccion = inet_aton("127.1"); # o la dirección que sea
    $nombre     = gethostbyaddr($idireccion, AF_INET);

    # o de otra manera
    $direccion = inet_ntoa($idireccion);

Si está cansado de recordar qué elemento de la lista devuelta contiene qué valor, existen interfaces por nombre, en módulos estándar: C<File::stat>, C<Net::hostent>, C<Net::netent>, C<Net::protoent>, C<Net::servent>, C<Time::gmtime>, C<Time::localtime> y C<User::grent>.  Estas sobreescriben a las integradas, con versiones que devuelven objetos con los nombres apropiados para cada campo.  Por ejemplo:

   use File::stat;
   use User::pwent;
   $es_suyo = (stat($fichero)->uid == pwent($alguien)->uid);

Incluso aunque parezcan los mismos métodos (uid), no lo son, porque un objeto C<File::stat> es diferente de un objeto C<User::pwent>.

=item getsockname SOCKET
X<getsockname>

Devuelve la dirección de socket empaquetada de este final de la conexión SOCKET, en el caso de que no conozca la dirección porque tenga diferentes IP por las que la conexión se pudo haber realizado.

    use Socket;
    $midirsocket = getsockname(SOCK);
    ($puerto, $midir) = sockaddr_in($midirsocket);
    printf "Conectado a %s [%s]\n",
       scalar gethostbyaddr($midir, AF_INET),
       inet_ntoa($midir);

=item getsockopt SOCKET,NIVEL,OPCIÓN
X<getsockopt>

Consulta la opción con nombre OPCIÓN asociada con el SOCKET en un determinado NIVEL.
Opciones pueden existir en múltiples niveles de protocolo dependiendo del tipo de socket, pero al menos existirá el más alto nivel de socket SOL_SOCKET (definido en el módulo C<Socket>). Para consultar opciones en otro nivel se debe indicar el apropiado número de protocolo que controle a esa opción. Por ejemplo, para indicar que una opción a de ser interpretada por el protocolo TCP, NIVEL debe ser puesto al número de protocolo del TCP, que puede obtener usando getprotobyname.

La llamada devuelve un string empaquetado representando la opción socket solicitada, o C<undef> si hay un error (la razón del error estará en $!). Lo que exactamente esté en el string empaquetado depende de NIVEL y OPCIÓN, consulte la documentación de su sistema para los detalles. Un caso muy común es que la opción sea un entero, en cuyo caso el resultado será un entero empaquetado que podrá decodificar usando unpack con el formato C<i> (o C<I>).

Un ejemplo para comprobar su el algoritmo de Nagle está activado en el socket:

    use Socket qw(:all);

    defined(my $tcp = getprotobyname("tcp"))
	or die "No puedo determinar el número del protocolo tcp";
    # my $tcp = IPPROTO_TCP; # Alternativo
    my $empaquetado = getsockopt($socket, $tcp, TCP_NODELAY)
	or die "No puedo consultar la opción socket TCP_NODELAY: $!";
    my $nodelay = unpack("I", $empaquetado);
    print "El algoritmo de Nagle está activado: ", $nodelay ? "off\n" : "on\n";


=item glob EXPR
X<glob> X<metacaracter> X<fichero, expansión> X<expandir>

=item glob

En contecto lista, devuelve una (posiblemente vacía) lista de la expansión de nombres de fichero del valor de EXPR como si el shell estandar Unix F</bin/csh> lo hiciera. En contexto escalar, glob itera a través de la expansión de nombres de fichero, devolviendo undef cuando se agote la lista. Esto es la función interna que implementa el operador C<< <*.c> >>, pero puede usarla directamente. Si la EXPR se omite, se usa C<$_>.  El operador C<< <*.c> >> se discute con más detalle en L<perlop/"Operadores I/O">.

Comenzando con v5.6.0, este operador está implementado usando la extensión estándar C<File::Glob>.  Ver L<File::Glob> para detalles.

=item gmtime EXPR
X<gmtime> X<UTC> X<Greenwich>

=item gmtime

Convierte un tiempo devuelto por la función time en una lista de 9 elementos según la región de la zona horaria estándar Greenwich.
Típicamente se usa como sigue:

    #  0    1    2     3     4    5     6     7     8
    ($seg,$min,$hora,$mdia,$mes,$anno,$sdia,$ydia,$esdst) =
					    gmtime(time);

Todos los elementos de la lista son numéricos y derivan de la 'struct tm' del C.  $seg, $min y $hora son los segundos, minutos y horas del tiempo especificado.  $mdia es el día del mes, y $mes es el propio mes, en el rango C<0..11> con 0 indicando enero y 11 diciembre.  $anno es el número de años desde 1900.  Es decir, $anno es C<123> en el año 2023.  $sdia es el día de la semaan, con 0 indicando domingo y 3 indicando miércoles.  $ydia es el día del año, en el rango C<0..364> (o C<0..365> en años bisiestos).  $esdst siempre es C<0>.

Note que el elemento $anno I<no> es simplemente los dos últimos dígitos del año.  Si asume eso entonces estará creado programas no compatibles con el año 2000, y eso no es lo que quiere hacer, ¿verdad?

La forma apropiada para obtener un año con los 4 dígitos es simplemente:

	$anno += 1900;

Y para obtener los dos últimos dígitos del año (ej., '01' en 2001) hacer:

	$anno = sprintf("%02d", $anno % 100);

Si se omite EXPR, C<gmtime()> usa el tiempo actual (C<gmtime(time)>).

En contexto escalar, C<gmtime()> devuelve el valor de ctime(3):

    $ahora_string = gmtime;  # ej., "Thu Oct 13 04:54:34 1994"

Si necesita el tiempo local en lugar del GMT, use L</localtime>. 
Ver también la función C<timegm> proporcionado por el módulo C<Time::Local>, y las funciones strftime(3) y mktime(3) disponibles con el módulo L<POSIX>.

Este valor escalar B<no> es localmente dependiente (ver L<perllocale>), sino que es una función integrada de Perl.  Para obtener algo similar pero con fechas localmente dependientes, ver el ejemplo en L</localtime>.

Ver L<perlport/gmtime> para problemas sobre portabilidad.

=item goto ETIQUETA
X<goto> X<salto> X<jmp>

=item goto EXPR

=item goto &NOMBRE

La forma C<goto>-ETIQUETA busca la sentencia etiquetada con ETIQUETA y continua la ejecución desde allí.  No puede ser usado en ninguna construcción que requiera inicialización, como una subrutina o un bucle C<foreach>.  Tampoco puede ser usada en una construcción que pueda ser optimizada, o ir fuera de un bloque o subrutina dada a C<sort>.
Puede ser utilizada para ir a casi cualquier sitio que esté dentro del ámbito dinámico, incluyendo fuera de las subrutinas, pero es usualmente mucho mejor usar otras construcciones como C<last> o C<die>.  El autor de Perl nunca ha sentido la necesidad de usar esta forma de C<goto> (en Perl, desde luego. C es otra historia).
(La diferencia con C es que no ofrece bucles con nombre combinados con control de bucles.  Perl sí, y esto reemplaza a la mayor parte de los usos estructurados de C<goto> en otros lenguajes).

La forma C<goto>-EXPR espera un nombre de etiqueta, cuyo ámbito será resuelto dinámicamente.  Esto permite crear C<goto> calculados como en FORTRAN, pero no está necesariamente recomendado si usted está optimizando durante el mantenimiento:

    goto ("FOO", "BAR", "GLARCH")[$i];

La forma C<goto-&NOMBRE> es muy diferente de las otras formas de C<goto>.  De hecho, no es un goto en el sentido normal y no tiene el estigma asociado con los otros gotos.  En cambio, sale de la subrutina actual (perdiendo cualquier cambio hecho por local()) e inmediatamente llama a la subrutina indicada pasandole el valor actual de @_.  Esto se usa por subrutinas C<AUTOLOAD()> que desean cargar otra subrutina y fingen que ésta otra subrutina ha sido llamada en primer lugar (excepto que cualquier modificación a C<@_> en la subrutina actual se propaga a la otra). Después del C<goto>, ni siquiera C<caller()> será capaz de decir qué rutina fue llamada en primer lugar.

NOMBRE no necesita ser el nombre de la subrutina; puede ser una variable escalar conteniendo una referencia a un código, o un bloque que evalúa a una referencia de código.

=item grep BLOQUE LISTA
X<grep>

=item grep EXPR,LISTA

Es similar en espíritu, pero no lo mismo, que con grep(1) y sus hermanos.  En particular, no está limitado a usar expresiones regulares.

Evalúa el BLOQUE o EXPRE para cada elemento de LISTA (poniendo localmente C<$_> a cada elemento) y devuelve un valor de lista consistente en los elementos por los que la expresión evaluada es verdadera.  En contexto escalar, devuelve el número de veces que la expresión fue verdadera.

    @foo = grep(!/^#/, @bar);    # quitar los comentarios

o equivalentemente,

    @foo = grep {!/^#/} @bar;    # quitar los comentarios

Note que C<$_> es un alias al valor de la lista, por lo que puede ser usado para modificar los elementos de la LISTA.  Mientras que esto suele ser útil, puede causar resultados extraños si los elementos de la LISTA no son variables.
Semejantemente, grep devuelve alias de la lista original, como los alias de los elementos de la lista de las variables de los bucles for.  Es decir, modificar un elemento de la lista devuelto por grep (por ejemplo, en un C<foreach>, C<map> u otro C<grep>) modifica el elemento en la lista original.
Esto es algo usualmente a ser evitado cuando se está escribiendo código claro.

Ver también L</map> para una lista compuesta de los resultados del BLOQUE o EXPR.

=item hex EXPR
X<hex> X<hexadecimal>

=item hex

Interpreta EXPR como una cadena en hexadecimal y devuelve el valor correspondiente.
(Para convertir strings que pueden comenzar con C<0>, C<0x> o C<0b>, ver L</oct>.)  Si se omite EXPR, usa C<$_>.

    print hex '0xAf'; # imprime '175'
    print hex 'aF';   # lo mismo

Strings hexadecimales sólo pueden representar enteros.  Strings que podrían causar desbordamiento de enteros lanzará un aviso.  Espacios en blanco aledaños, no son eliminados, a diferencia de oct(). Para presentar algo como hex, mire en L</printf>, L</sprintf> o L</unpack>.

=item import LISTA
X<import>

No existe la función C<import>.  Es sólo un método (subrutina) ordinario definido (o heredado) por módulos que desean exportar nombres a otro módulo.  La función C<use> llama al método C<import> del paquete a usar.  Ver también L</use>, L<perlmod> y L<Exporter>.

=item index STRING,SUBSTR,POSICIÓN
X<index> X<índice> X<InStr>

=item index STRING,SUBSTR

La función index busca por un string dentro de otro, pero sin tener el comportamiento de un sistema de coincidencias basado en expresiones regulares.
Devuelve la posición de la primera ocurrencia de SUBSTR en STRING en o después de POSICIÓN.  Si se omite POSICIÓN, comienza a buscar desde el comienzo del string.  POSICIÓN antes del comienzo del string o después de su final es tratado como si estuviera al principio o al final, respectivamente.  POSICIÓN y el valor devuelto están basados en C<0> (o al valor indicado por la variable C<$[>, pero no lo haga, por favor).  Si el substring no se encuentra, C<index> devuelve uno menos que la base, normalmente C<-1>.

=item int EXPR
X<int> X<entero> X<truncado> X<truncar>

=item int

Devuelve la parte entera de EXPR.  Si se omite EXPR, se usa C<$_>.
No debe usar esta función para redondear: primero, porque trunca hacia C<0> y segundo, porque las representaciones máquina de números en punto flotante puede producir, algunas veces, resultados dispares.  Por ejemplo, C<int(-6.725/0.025)> produce -268 en vez del valor correcto -269; esto es porque el valor realmente es -268.99999999999994315658.  Usualmente, las funciones C<sprintf>, C<printf>, o C<POSIX::floor> y C<POSIX::ceil> le servirán mejor que int().

=item ioctl MANEJADOR,FUNCIÓN,ESCALAR
X<ioctl>

Implementa la función ioctl(2).  Probablemente primero querrá escribir

    require "sys/ioctl.ph";	# probablemente en $Config{archlib}/sys/ioctl.ph

para obtener las correctas definiciones de la función.  Si F<sys/ioctl.ph> no existe o no tiene las definiciones correctas, tendrá que incorporar las suyas propias, basadas en sus ficheros de cabecera C como las de F<< <sys/ioctl.h> >>.
(Existe un script Perl llamado B<h2ph> que viene con el kit Perl que puede ayudarle en esto, pero no es nada trivial). ESCALAR será leído o escrito dependiendo de la FUNCIÓN -- un puntero al valor del string ESCALAR será pasado como tercer argumento de la actual llamada C<ioctl>.  (Si ESCALAR no tiene un valor string sino que tiene un valor numérico, este valor será el que se pase, en lugar de un puntero al valor del string.  Para garantizar este último comportamiento, añada un C<0> al escalar antes de usarlo). Las funciones C<pack> y C<unpack> pueden ser necesarias para manipular los valores de las estructuras usadas por C<ioctl>.

El valor devuelto de C<ioctl> (y C<fcntl>) es como sigue:

	Si SO devuelve:		entonces Perl devuelve:
	    -1	  		  valor indefinido
	     0	 		string "0 but true"
	cualquier otro		    ese número

Así, Perl devuelve verdadero en éxito y falso en fallo, por lo que aún podemos determinar el valor actual devuelto por el sistema operativo:

    $retval = ioctl(...) || -1;
    printf "Sistema devolvió %d\n", $retval;

El string especial C<"0 but true"> es una excepción de los mensajes de aviso activados por B<-w> sobre una conversión numérica impropia.

=item join EXPR,LISTA
X<join>

Une los strings separados de LISTA en un único string con campos separados por el valor de EXPR y devuelve el nuevo string.  Ejemplo:

    $rec = join(':', $login,$passwd,$uid,$gid,$gcos,$home,$shell);

Cuidado que, a diferencia de C<split>, C<join> no toma un patrón como su primer argumento.  Compare con L</split>.

=item keys HASH
X<keys> X<key>

Devuelve una lista consistente de todas las claves del hash indicado.
(En contexto escalar, devuelve el número de claves).

Las claves son devueltas en un aparente aleatorio orden.  El actual orden aleatorios está sujeto a cambio en futuras versiones de perl, pero se garantiza que sea el mismo orden que las funciones C<values> o C<each> producirían (dado que el hash no ha sido modificado).  Desde Perl 5.8.1 la ordenación es diferente incluso entre diferentes ejecuciones de Perl por razones de seguridad (ver L<perlsec/"Ataques por Complejidad Algorítmica">).

Como efecto colateral, llamando keys() resetea el iterador interno del HASH (ver L</each>).  De forma particular, llamando a keys() en contexto nulo (void) resetea el iterador sin otro efecto.

Aquí hay otra forma de imprimir su entorno:

    @keys = keys %ENV;
    @values = values %ENV;
    while (@keys) {
	print pop(@keys), '=', pop(@values), "\n";
    }

o de forma ordenada por la clave:

    foreach $key (sort(keys %ENV)) {
	print $key, '=', $ENV{$key}, "\n";
    }

Los valores devueltos son copias de las claves originales en el hash, así que modificarlas no afectará al hash original.  Compare con L</values>.

Para ordenar un hash por valor, necesitará usar la función C<sort>.
Esto es una ordenación numérica descendente de un hash por sus valores:

    foreach $key (sort { $hash{$b} <=> $hash{$a} } keys %hash) {
	printf "%4d %s\n", $hash{$key}, $key;
    }

Usado como valor a la izquierda, C<keys> le permite incrementar el número de alojamientos de memoria hash para ese hash.  Puede hacerle ganar más eficiencia si sabe que el hash va a tener un gran tamaño.  (Esto es similar a pre-extender un array asignándole un gran número a $#array). Si dice

    keys %hash = 200;

entonces C<%hash> tendrá al menos 200 slots de memoria reservados para él -- 256 de ellos, de hecho, ya que se redondea a la siguiente potencia de dos.  Estos slots serán mantenidos incluso si hace C<%hash = ()>. Use C<undef %hash> si quiere liberar el almacenamiento mientras mantiene a C<%hash> en el ámbito.
No puede reducir el número de slots reservados para el hash usando C<keys> de esta manera (pero no necesita preocuparse de hacer esto por accidente; intentarlo no tiene ningún efecto).

Ver también C<each>, C<values> y C<sort>.

=item kill SEÑAL, LISTA
X<kill> X<signal> X<señal>

Manda una señal a una lista de procesos.  Devuelve el número de procesos señalados exitósamente (que no es necesariamente el mismo número de los llamados).

    $cnt = kill 1, $child1, $child2;
    kill 9, @finalizadores;

Si SEÑAL es cero, no se envía señal al proceso.  Esto es útil para comprobar que un proceso hijo está vivo y no ha cambiado su UID.  Ver L<perlport> para notas sobre portabilidad de esta construcción.

A diferencia del shell, si SEÑAL es negativo , mata el grupo de procesos en lugar de procesos.  (En System V, un número de I<PROCESO> negativo también matará grupos de procesos, pero esto no es portable). Esto quiere decir que normalmente querrá usar señales positivas.  Puede usar también nombres de señales entrecomilladas.

Ver L<perlipc/"Señales"> para más detalles.

=item last ETIQUETA
X<last> X<break>

=item last

El comando C<last> es como la sentencia C<break> del C (usada en bucles); inmediatamente sale del bucle en cuestión.  Si la ETIQUETA se omite, el comando se refiere al bucle más interior en que se encuentre.  El bloque C<continue>, si está, no es ejecutado:

    LINEA: while (<STDIN>) {
	last LINEA if /^$/;	# salir cuando se termine la cabecera
	...
    }

C<last> no puede usarse para salir de un bloque que devuelve un valor, como C<eval {}>, C<sub {}> o C<do {}> y no debe usarse para salir de una operación grep() o map().

Note que un bloque por sí mismo es semánticamente idéntico a un bucle que se ejecuta una vez.  Así, C<last> puede ser usado para salir prematuramente de este bloque.

Ver también L</continue> para una ilustración de cómo funcionan C<last>, C<next> y C<redo>.

=item lc EXPR
X<lc> X<lowercase>

=item lc

Returns a lowercased version of EXPR.  This is the internal function
implementing the C<\L> escape in double-quoted strings.  Respects
current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>
and L<perlunicode> for more details about locale and Unicode support.

Si se omite EXPR, se usa C<$_>.

=item lcfirst EXPR
X<lcfirst> X<lowercase>

=item lcfirst

Returns the value of EXPR with the first character lowercased.  This
is the internal function implementing the C<\l> escape in
double-quoted strings.  Respects current LC_CTYPE locale if C<use
locale> in force.  See L<perllocale> and L<perlunicode> for more
details about locale and Unicode support.

Si se omite EXPR, se usa C<$_>.

=item length EXPR
X<length> X<size>

=item length

Returns the length in I<characters> of the value of EXPR.  If EXPR is
omitted, returns length of C<$_>.  Note that this cannot be used on
an entire array or hash to find out how many elements these have.
For that, use C<scalar @array> and C<scalar keys %hash> respectively.

Note the I<characters>: if the EXPR is in Unicode, you will get the
number of characters, not the number of bytes.  To get the length
in bytes, use C<do { use bytes; length(EXPR) }>, see L<bytes>.

=item link OLDFILE,NEWFILE
X<link>

Creates a new filename linked to the old filename.  Returns true for
success, false otherwise.

=item listen SOCKET,QUEUESIZE
X<listen>

Does the same thing that the listen system call does.  Returns true if
it succeeded, false otherwise.  See the example in
L<perlipc/"Sockets: Client/Server Communication">.

=item local EXPR
X<local>

You really probably want to be using C<my> instead, because C<local> isn't
what most people think of as "local".  See
L<perlsub/"Private Variables via my()"> for details.

A local modifies the listed variables to be local to the enclosing
block, file, or eval.  If more than one value is listed, the list must
be placed in parentheses.  See L<perlsub/"Temporary Values via local()">
for details, including issues with tied arrays and hashes.

=item localtime EXPR
X<localtime>

=item localtime

Converts a time as returned by the time function to a 9-element list
with the time analyzed for the local time zone.  Typically used as
follows:

    #  0    1    2     3     4    5     6     7     8
    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
                                                localtime(time);

Todos los elementos de la lista son numéricos y derivan de la 'struct tm' del C.  C<$sec>, C<$min>, and C<$hour> are the seconds, minutes, and hours
of the specified time.

C<$mday> is the day of the month, and C<$mon> is the month itself, in
the range C<0..11> with 0 indicating January and 11 indicating December.
This makes it easy to get a month name from a list:

    my @abbr = qw( Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec );
    print "$abbr[$mon] $mday";
    # $mon=9, $mday=18 gives "Oct 18"

C<$year> is the number of years since 1900, not just the last two digits
of the year.  That is, C<$year> is C<123> in year 2023.  The proper way
to get a complete 4-digit year is simply:

    $anno += 1900;

To get the last two digits of the year (e.g., '01' in 2001) do:

    $anno = sprintf("%02d", $anno % 100);

C<$wday> is the day of the week, with 0 indicating Sunday and 3 indicating
Wednesday.  C<$yday> is the day of the year, in the range C<0..364>
(or C<0..365> in leap years.)

C<$isdst> is true if the specified time occurs during Daylight Saving
Time, false otherwise.

If EXPR is omitted, C<localtime()> uses the current time (C<localtime(time)>).

In scalar context, C<localtime()> returns the ctime(3) value:

    $now_string = localtime;  # e.g., "Thu Oct 13 04:54:34 1994"

This scalar value is B<not> locale dependent but is a Perl builtin. For GMT
instead of local time use the L</gmtime> builtin. See also the
C<Time::Local> module (to convert the second, minutes, hours, ... back to
the integer value returned by time()), and the L<POSIX> module's strftime(3)
and mktime(3) functions.

To get somewhat similar but locale dependent date strings, set up your
locale environment variables appropriately (please see L<perllocale>) and
try for example:

    use POSIX qw(strftime);
    $now_string = strftime "%a %b %e %H:%M:%S %Y", localtime;
    # or for GMT formatted appropriately for your locale:
    $now_string = strftime "%a %b %e %H:%M:%S %Y", gmtime;

Note that the C<%a> and C<%b>, the short forms of the day of the week
and the month of the year, may not necessarily be three characters wide.

See L<perlport/localtime> for portability concerns.

=item lock THING
X<lock>

This function places an advisory lock on a shared variable, or referenced
object contained in I<THING> until the lock goes out of scope.

lock() is a "weak keyword" : this means that if you've defined a function
by this name (before any calls to it), that function will be called
instead. (However, if you've said C<use threads>, lock() is always a
keyword.) See L<threads>.

=item log EXPR
X<log> X<logarithm> X<e> X<ln> X<base>

=item log

Returns the natural logarithm (base I<e>) of EXPR.  If EXPR is omitted,
returns log of C<$_>.  To get the log of another base, use basic algebra:
The base-N log of a number is equal to the natural log of that number
divided by the natural log of N.  Por ejemplo:

    sub log10 {
	my $n = shift;
	return log($n)/log(10);
    }

See also L</exp> for the inverse operation.

=item lstat EXPR
X<lstat>

=item lstat

Does the same thing as the C<stat> function (including setting the
special C<_> filehandle) but stats a symbolic link instead of the file
the symbolic link points to.  If symbolic links are unimplemented on
your system, a normal C<stat> is done.  For much more detailed
information, please see the documentation for L</stat>.

If EXPR is omitted, stats C<$_>.

=item m//

The match operator.  See L<perlop>.

=item map BLOCK LIST
X<map>

=item map EXPR,LIST

Evaluates the BLOCK or EXPR for each element of LIST (locally setting
C<$_> to each element) and returns the list value composed of the
results of each such evaluation.  In scalar context, returns the
total number of elements so generated.  Evaluates BLOCK or EXPR in
list context, so each element of LIST may produce zero, one, or
more elements in the returned value.

    @chars = map(chr, @nums);

translates a list of numbers to the corresponding characters.  And

    %hash = map { getkey($_) => $_ } @array;

is just a funny way to write

    %hash = ();
    foreach $_ (@array) {
	$hash{getkey($_)} = $_;
    }

Note que C<$_> es un alias al valor de la lista, por lo que puede ser usado para modificar los elementos de la LISTA.  Mientras que esto suele ser útil, puede causar resultados extraños si los elementos de la LISTA no son variables.
Using a regular C<foreach> loop for this purpose would be clearer in
most cases.  See also L</grep> for an array composed of those items of
the original list for which the BLOCK or EXPR evaluates to true.

C<{> starts both hash references and blocks, so C<map { ...> could be either
the start of map BLOCK LIST or map EXPR, LIST. Because perl doesn't look
ahead for the closing C<}> it has to take a guess at which its dealing with
based what it finds just after the C<{>. Usually it gets it right, but if it
doesn't it won't realize something is wrong until it gets to the C<}> and
encounters the missing (or unexpected) comma. The syntax error will be
reported close to the C<}> but you'll need to change something near the C<{>
such as using a unary C<+> to give perl some help:

    %hash = map {  "\L$_", 1  } @array  # perl guesses EXPR.  wrong
    %hash = map { +"\L$_", 1  } @array  # perl guesses BLOCK. right
    %hash = map { ("\L$_", 1) } @array  # this also works
    %hash = map {  lc($_), 1  } @array  # as does this.
    %hash = map +( lc($_), 1 ), @array  # this is EXPR and works!

    %hash = map  ( lc($_), 1 ), @array  # evaluates to (1, @array)

or to force an anon hash constructor use C<+{>

   @hashes = map +{ lc($_), 1 }, @array # EXPR, so needs , at end

and you get list of anonymous hashes each with only 1 entry.

=item mkdir FILENAME,MASK
X<mkdir> X<md> X<directory, create>

=item mkdir FILENAME

Creates the directory specified by FILENAME, with permissions
specified by MASK (as modified by C<umask>).  If it succeeds it
returns true, otherwise it returns false and sets C<$!> (errno).
If omitted, MASK defaults to 0777.

In general, it is better to create directories with permissive MASK,
and let the user modify that with their C<umask>, than it is to supply
a restrictive MASK and give the user no way to be more permissive.
The exceptions to this rule are when the file or directory should be
kept private (mail files, for instance).  The perlfunc(1) entry on
C<umask> discusses the choice of MASK in more detail.

Note that according to the POSIX 1003.1-1996 the FILENAME may have any
number of trailing slashes.  Some operating and filesystems do not get
this right, so Perl automatically removes all trailing slashes to keep
everyone happy.

=item msgctl ID,CMD,ARG
X<msgctl>

Calls the System V IPC function msgctl(2).  Probablemente escribirá

    use IPC::SysV;

primero para obtener las definiciones de las constantes.  If CMD is C<IPC_STAT>,
then ARG must be a variable that will hold the returned C<msqid_ds>
structure.  Returns like C<ioctl>: the undefined value for error,
C<"0 but true"> for zero, or the actual return value otherwise.  See also
L<perlipc/"SysV IPC">, C<IPC::SysV>, and C<IPC::Semaphore> documentation.

=item msgget KEY,FLAGS
X<msgget>

Calls the System V IPC function msgget(2).  Returns the message queue
id, or the undefined value if there is an error.  See also
L<perlipc/"SysV IPC"> and C<IPC::SysV> and C<IPC::Msg> documentation.

=item msgrcv ID,VAR,SIZE,TYPE,FLAGS
X<msgrcv>

Calls the System V IPC function msgrcv to receive a message from
message queue ID into variable VAR with a maximum message size of
SIZE.  Note that when a message is received, the message type as a
native long integer will be the first thing in VAR, followed by the
actual message.  This packing may be opened with C<unpack("l! a*")>.
Taints the variable.  Returns true if successful, or false if there is
an error.  See also L<perlipc/"SysV IPC">, C<IPC::SysV>, and
C<IPC::SysV::Msg> documentation.

=item msgsnd ID,MSG,FLAGS
X<msgsnd>

Calls the System V IPC function msgsnd to send the message MSG to the
message queue ID.  MSG must begin with the native long integer message
type, and be followed by the length of the actual message, and finally
the message itself.  This kind of packing can be achieved with
C<pack("l! a*", $type, $message)>.  Returns true if successful,
or false if there is an error.  See also C<IPC::SysV>
and C<IPC::SysV::Msg> documentation.

=item my EXPR
X<my>

=item my TYPE EXPR

=item my EXPR : ATTRS

=item my TYPE EXPR : ATTRS

A C<my> declares the listed variables to be local (lexically) to the
enclosing block, file, or C<eval>.  If more than one value is listed,
the list must be placed in parentheses.

The exact semantics and interface of TYPE and ATTRS are still
evolving.  TYPE is currently bound to the use of C<fields> pragma,
and attributes are handled using the C<attributes> pragma, or starting
from Perl 5.8.0 also via the C<Attribute::Handlers> module.  See
L<perlsub/"Private Variables via my()"> for details, and L<fields>,
L<attributes>, and L<Attribute::Handlers>.

=item next LABEL
X<next> X<continue>

=item next

The C<next> command is like the C<continue> statement in C; it starts
the next iteration of the loop:

    LINE: while (<STDIN>) {
	next LINE if /^#/;	# discard comments
	#...
    }

Note that if there were a C<continue> block on the above, it would get
executed even on discarded lines.  If the LABEL is omitted, the command
refers to the innermost enclosing loop.

C<next> cannot be used to exit a block which returns a value such as
C<eval {}>, C<sub {}> or C<do {}>, and should not be used to exit
a grep() or map() operation.

Note que un bloque por sí mismo es semánticamente idéntico a un bucle que se ejecuta una vez.  Thus C<next> will exit such a block early.

Ver también L</continue> para una ilustración de cómo funcionan C<last>, C<next> y C<redo>.

=item no Module VERSION LIST
X<no>

=item no Module VERSION

=item no Module LIST

=item no Module

See the C<use> function, which C<no> is the opposite of.

=item oct EXPR
X<oct> X<octal> X<hex> X<hexadecimal> X<binary> X<bin>

=item oct

Interprets EXPR as an octal string and returns the corresponding
value.  (If EXPR happens to start off with C<0x>, interprets it as a
hex string.  If EXPR starts off with C<0b>, it is interpreted as a
binary string.  Leading whitespace is ignored in all three cases.)
The following will handle decimal, binary, octal, and hex in the standard
Perl or C notation:

    $val = oct($val) if $val =~ /^0/;

Si se omite EXPR, se usa C<$_>.   To go the other way (produce a number
in octal), use sprintf() or printf():

    $perms = (stat("filename"))[2] & 07777;
    $oct_perms = sprintf "%lo", $perms;

The oct() function is commonly used when a string such as C<644> needs
to be converted into a file mode, for example. (Although perl will
automatically convert strings into numbers as needed, this automatic
conversion assumes base 10.)

=item open FILEHANDLE,EXPR
X<open> X<pipe> X<file, open> X<fopen>

=item open FILEHANDLE,MODE,EXPR

=item open FILEHANDLE,MODE,EXPR,LIST

=item open FILEHANDLE,MODE,REFERENCE

=item open FILEHANDLE

Opens the file whose filename is given by EXPR, and associates it with
FILEHANDLE.

(The following is a comprehensive reference to open(): for a gentler
introduction you may consider L<perlopentut>.)

If FILEHANDLE is an undefined scalar variable (or array or hash element)
the variable is assigned a reference to a new anonymous filehandle,
otherwise if FILEHANDLE is an expression, its value is used as the name of
the real filehandle wanted.  (This is considered a symbolic reference, so
C<use strict 'refs'> should I<not> be in effect.)

If EXPR is omitted, the scalar variable of the same name as the
FILEHANDLE contains the filename.  (Note that lexical variables--those
declared with C<my>--will not work for this purpose; so if you're
using C<my>, specify EXPR in your call to open.)

If three or more arguments are specified then the mode of opening and
the file name are separate. If MODE is C<< '<' >> or nothing, the file
is opened for input.  If MODE is C<< '>' >>, the file is truncated and
opened for output, being created if necessary.  If MODE is C<<< '>>' >>>,
the file is opened for appending, again being created if necessary.

You can put a C<'+'> in front of the C<< '>' >> or C<< '<' >> to
indicate that you want both read and write access to the file; thus
C<< '+<' >> is almost always preferred for read/write updates--the C<<
'+>' >> mode would clobber the file first.  You can't usually use
either read-write mode for updating textfiles, since they have
variable length records.  See the B<-i> switch in L<perlrun> for a
better approach.  The file is created with permissions of C<0666>
modified by the process' C<umask> value.

These various prefixes correspond to the fopen(3) modes of C<'r'>,
C<'r+'>, C<'w'>, C<'w+'>, C<'a'>, and C<'a+'>.

In the 2-arguments (and 1-argument) form of the call the mode and
filename should be concatenated (in this order), possibly separated by
spaces.  It is possible to omit the mode in these forms if the mode is
C<< '<' >>.

If the filename begins with C<'|'>, the filename is interpreted as a
command to which output is to be piped, and if the filename ends with a
C<'|'>, the filename is interpreted as a command which pipes output to
us.  See L<perlipc/"Using open() for IPC">
for more examples of this.  (You are not allowed to C<open> to a command
that pipes both in I<and> out, but see L<IPC::Open2>, L<IPC::Open3>,
and L<perlipc/"Bidirectional Communication with Another Process">
for alternatives.)

For three or more arguments if MODE is C<'|-'>, the filename is
interpreted as a command to which output is to be piped, and if MODE
is C<'-|'>, the filename is interpreted as a command which pipes
output to us.  In the 2-arguments (and 1-argument) form one should
replace dash (C<'-'>) with the command.
See L<perlipc/"Using open() for IPC"> for more examples of this.
(You are not allowed to C<open> to a command that pipes both in I<and>
out, but see L<IPC::Open2>, L<IPC::Open3>, and
L<perlipc/"Bidirectional Communication"> for alternatives.)

In the three-or-more argument form of pipe opens, if LIST is specified
(extra arguments after the command name) then LIST becomes arguments
to the command invoked if the platform supports it.  The meaning of
C<open> with more than three arguments for non-pipe modes is not yet
specified. Experimental "layers" may give extra LIST arguments
meaning.

In the 2-arguments (and 1-argument) form opening C<'-'> opens STDIN
and opening C<< '>-' >> opens STDOUT.

You may use the three-argument form of open to specify IO "layers"
(sometimes also referred to as "disciplines") to be applied to the handle
that affect how the input and output are processed (see L<open> and
L<PerlIO> for more details). For example

  open(FH, "<:utf8", "file")

will open the UTF-8 encoded file containing Unicode characters,
see L<perluniintro>. Note that if layers are specified in the
three-arg form then default layers stored in ${^OPEN} (see L<perlvar>;
usually set by the B<open> pragma or the switch B<-CioD>) are ignored.

Open returns nonzero upon success, the undefined value otherwise.  If
the C<open> involved a pipe, the return value happens to be the pid of
the subprocess.

If you're running Perl on a system that distinguishes between text
files and binary files, then you should check out L</binmode> for tips
for dealing with this.  The key distinction between systems that need
C<binmode> and those that don't is their text file formats.  Systems
like Unix, Mac OS, and Plan 9, which delimit lines with a single
character, and which encode that character in C as C<"\n">, do not
need C<binmode>.  The rest need it.

When opening a file, it's usually a bad idea to continue normal execution
if the request failed, so C<open> is frequently used in connection with
C<die>.  Even if C<die> won't do what you want (say, in a CGI script,
where you want to make a nicely formatted error message (but there are
modules that can help with that problem)) you should always check
the return value from opening a file.  The infrequent exception is when
working with an unopened filehandle is actually what you want to do.

As a special case the 3-arg form with a read/write mode and the third
argument being C<undef>:

    open(TMP, "+>", undef) or die ...

opens a filehandle to an anonymous temporary file.  Also using "+<"
works for symmetry, but you really should consider writing something
to the temporary file first.  You will need to seek() to do the
reading.

Since v5.8.0, perl has built using PerlIO by default.  Unless you've
changed this (i.e. Configure -Uuseperlio), you can open file handles to
"in memory" files held in Perl scalars via:

    open($fh, '>', \$variable) || ..

Though if you try to re-open C<STDOUT> or C<STDERR> as an "in memory"
file, you have to close it first:

    close STDOUT;
    open STDOUT, '>', \$variable or die "Can't open STDOUT: $!";

Ejemplos:

    $ARTICLE = 100;
    open ARTICLE or die "Can't find article $ARTICLE: $!\n";
    while (<ARTICLE>) {...

    open(LOG, '>>/usr/spool/news/twitlog');	# (log is reserved)
    # if the open fails, output is discarded

    open(DBASE, '+<', 'dbase.mine')		# open for update
	or die "Can't open 'dbase.mine' for update: $!";

    open(DBASE, '+<dbase.mine')			# ditto
	or die "Can't open 'dbase.mine' for update: $!";

    open(ARTICLE, '-|', "caesar <$article")     # decrypt article
	or die "Can't start caesar: $!";

    open(ARTICLE, "caesar <$article |")		# ditto
	or die "Can't start caesar: $!";

    open(EXTRACT, "|sort >Tmp$$")		# $$ is our process id
	or die "Can't start sort: $!";

    # in memory files
    open(MEMORY,'>', \$var)
	or die "Can't open memory file: $!";
    print MEMORY "foo!\n";			# output will end up in $var

    # process argument list of files along with any includes

    foreach $file (@ARGV) {
	process($file, 'fh00');
    }

    sub process {
	my($filename, $input) = @_;
	$input++;		# this is a string increment
	unless (open($input, $filename)) {
	    print STDERR "Can't open $filename: $!\n";
	    return;
	}

	local $_;
	while (<$input>) {		# note use of indirection
	    if (/^#include "(.*)"/) {
		process($1, $input);
		next;
	    }
	    #...		# whatever
	}
    }

See L<perliol> for detailed info on PerlIO.

You may also, in the Bourne shell tradition, specify an EXPR beginning
with C<< '>&' >>, in which case the rest of the string is interpreted
as the name of a filehandle (or file descriptor, if numeric) to be
duped (as L<dup(2)>) and opened.  You may use C<&> after C<< > >>,
C<<< >> >>>, C<< < >>, C<< +> >>, C<<< +>> >>>, and C<< +< >>.
The mode you specify should match the mode of the original filehandle.
(Duping a filehandle does not take into account any existing contents
of IO buffers.) If you use the 3-arg form then you can pass either a
number, the name of a filehandle or the normal "reference to a glob".

Here is a script that saves, redirects, and restores C<STDOUT> and
C<STDERR> using various methods:

    #!/usr/bin/perl
    open my $oldout, ">&STDOUT"     or die "Can't dup STDOUT: $!";
    open OLDERR,     ">&", \*STDERR or die "Can't dup STDERR: $!";

    open STDOUT, '>', "foo.out" or die "Can't redirect STDOUT: $!";
    open STDERR, ">&STDOUT"     or die "Can't dup STDOUT: $!";

    select STDERR; $| = 1;	# make unbuffered
    select STDOUT; $| = 1;	# make unbuffered

    print STDOUT "stdout 1\n";	# this works for
    print STDERR "stderr 1\n"; 	# subprocesses too

    open STDOUT, ">&", $oldout or die "Can't dup \$oldout: $!";
    open STDERR, ">&OLDERR"    or die "Can't dup OLDERR: $!";

    print STDOUT "stdout 2\n";
    print STDERR "stderr 2\n";

If you specify C<< '<&=X' >>, where C<X> is a file descriptor number
or a filehandle, then Perl will do an equivalent of C's C<fdopen> of
that file descriptor (and not call L<dup(2)>); this is more
parsimonious of file descriptors.  Por ejemplo:

    # open for input, reusing the fileno of $fd
    open(FILEHANDLE, "<&=$fd")

o

    open(FILEHANDLE, "<&=", $fd)

o

    # open for append, using the fileno of OLDFH
    open(FH, ">>&=", OLDFH)

o

    open(FH, ">>&=OLDFH")

Being parsimonious on filehandles is also useful (besides being
parsimonious) for example when something is dependent on file
descriptors, like for example locking using flock().  If you do just
C<< open(A, '>>&B') >>, the filehandle A will not have the same file
descriptor as B, and therefore flock(A) will not flock(B), and vice
versa.  But with C<< open(A, '>>&=B') >> the filehandles will share
the same file descriptor.

Note that if you are using Perls older than 5.8.0, Perl will be using
the standard C libraries' fdopen() to implement the "=" functionality.
On many UNIX systems fdopen() fails when file descriptors exceed a
certain value, typically 255.  For Perls 5.8.0 and later, PerlIO is
most often the default.

You can see whether Perl has been compiled with PerlIO or not by
running C<perl -V> and looking for C<useperlio=> line.  If C<useperlio>
is C<define>, you have PerlIO, otherwise you don't.

If you open a pipe on the command C<'-'>, i.e., either C<'|-'> or C<'-|'>
with 2-arguments (or 1-argument) form of open(), then
there is an implicit fork done, and the return value of open is the pid
of the child within the parent process, and C<0> within the child
process.  (Use C<defined($pid)> to determine whether the open was successful.)
The filehandle behaves normally for the parent, but i/o to that
filehandle is piped from/to the STDOUT/STDIN of the child process.
In the child process the filehandle isn't opened--i/o happens from/to
the new STDOUT or STDIN.  Typically this is used like the normal
piped open when you want to exercise more control over just how the
pipe command gets executed, such as when you are running setuid, and
don't want to have to scan shell commands for metacharacters.
The following triples are more or less equivalent:

    open(FOO, "|tr '[a-z]' '[A-Z]'");
    open(FOO, '|-', "tr '[a-z]' '[A-Z]'");
    open(FOO, '|-') || exec 'tr', '[a-z]', '[A-Z]';
    open(FOO, '|-', "tr", '[a-z]', '[A-Z]');

    open(FOO, "cat -n '$file'|");
    open(FOO, '-|', "cat -n '$file'");
    open(FOO, '-|') || exec 'cat', '-n', $file;
    open(FOO, '-|', "cat", '-n', $file);

The last example in each block shows the pipe as "list form", which is
not yet supported on all platforms.  A good rule of thumb is that if
your platform has true C<fork()> (in other words, if your platform is
UNIX) you can use the list form.

See L<perlipc/"Safe Pipe Opens"> for more examples of this.

Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before any operation that may do a fork, but this may not be
supported on some platforms (see L<perlport>).  To be safe, you may need
to set C<$|> ($AUTOFLUSH in English) or call the C<autoflush()> method
of C<IO::Handle> on any open handles.

On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptor as determined by the value
of $^F.  Ver L<perlvar/$^F>.

Closing any piped filehandle causes the parent process to wait for the
child to finish, and returns the status value in C<$?>.

The filename passed to 2-argument (or 1-argument) form of open() will
have leading and trailing whitespace deleted, and the normal
redirection characters honored.  This property, known as "magic open",
can often be used to good effect.  A user could specify a filename of
F<"rsh cat file |">, or you could change certain filenames as needed:

    $filename =~ s/(.*\.gz)\s*$/gzip -dc < $1|/;
    open(FH, $filename) or die "Can't open $filename: $!";

Use 3-argument form to open a file with arbitrary weird characters in it,

    open(FOO, '<', $file);

otherwise it's necessary to protect any leading and trailing whitespace:

    $file =~ s#^(\s)#./$1#;
    open(FOO, "< $file\0");

(this may not work on some bizarre filesystems).  One should
conscientiously choose between the I<magic> and 3-arguments form
of open():

    open IN, $ARGV[0];

will allow the user to specify an argument of the form C<"rsh cat file |">,
but will not work on a filename which happens to have a trailing space, while

    open IN, '<', $ARGV[0];

will have exactly the opposite restrictions.

If you want a "real" C C<open> (see L<open(2)> on your system), then you
should use the C<sysopen> function, which involves no such magic (but
may use subtly different filemodes than Perl open(), which is mapped
to C fopen()).  This is
another way to protect your filenames from interpretation.  Por ejemplo:

    use IO::Handle;
    sysopen(HANDLE, $path, O_RDWR|O_CREAT|O_EXCL)
	or die "sysopen $path: $!";
    $oldfh = select(HANDLE); $| = 1; select($oldfh);
    print HANDLE "stuff $$\n";
    seek(HANDLE, 0, 0);
    print "File contains: ", <HANDLE>;

Using the constructor from the C<IO::Handle> package (or one of its
subclasses, such as C<IO::File> or C<IO::Socket>), you can generate anonymous
filehandles that have the scope of whatever variables hold references to
them, and automatically close whenever and however you leave that scope:

    use IO::File;
    #...
    sub read_myfile_munged {
	my $ALL = shift;
	my $handle = new IO::File;
	open($handle, "myfile") or die "myfile: $!";
	$first = <$handle>
	    or return ();     # Automatically closed here.
	mung $first or die "mung failed";	# Or here.
	return $first, <$handle> if $ALL;	# Or here.
	$first;					# Or here.
    }

See L</seek> for some details about mixing reading and writing.

=item opendir DIRHANDLE,EXPR
X<opendir>

Opens a directory named EXPR for processing by C<readdir>, C<telldir>,
C<seekdir>, C<rewinddir>, and C<closedir>.  Returns true if successful.
DIRHANDLE may be an expression whose value can be used as an indirect
dirhandle, usually the real dirhandle name.  If DIRHANDLE is an undefined
scalar variable (or array or hash element), the variable is assigned a
reference to a new anonymous dirhandle.
DIRHANDLEs have their own namespace separate from FILEHANDLEs.

=item ord EXPR
X<ord> X<encoding>

=item ord

Returns the numeric (the native 8-bit encoding, like ASCII or EBCDIC,
or Unicode) value of the first character of EXPR.  If EXPR is omitted,
uses C<$_>.

For the reverse, see L</chr>.
Ver L<perlunicode> y L<encoding> para más información sobre Unicode.

=item our EXPR
X<our> X<global>

=item our EXPR TYPE

=item our EXPR : ATTRS

=item our TYPE EXPR : ATTRS

C<our> associates a simple name with a package variable in the current
package for use within the current scope.  When C<use strict 'vars'> is in
effect, C<our> lets you use declared global variables without qualifying
them with package names, within the lexical scope of the C<our> declaration.
In this way C<our> differs from C<use vars>, which is package scoped.

Unlike C<my>, which both allocates storage for a variable and associates
a simple name with that storage for use within the current scope, C<our>
associates a simple name with a package variable in the current package,
for use within the current scope.  In other words, C<our> has the same
scoping rules as C<my>, but does not necessarily create a
variable.

If more than one value is listed, the list must be placed
in parentheses.

    our $foo;
    our($bar, $baz);

An C<our> declaration declares a global variable that will be visible
across its entire lexical scope, even across package boundaries.  The
package in which the variable is entered is determined at the point
of the declaration, not at the point of use.  This means the following
behavior holds:

    package Foo;
    our $bar;		# declares $Foo::bar for rest of lexical scope
    $bar = 20;

    package Bar;
    print $bar;		# prints 20, as it refers to $Foo::bar

Multiple C<our> declarations with the same name in the same lexical
scope are allowed if they are in different packages.  If they happen
to be in the same package, Perl will emit warnings if you have asked
for them, just like multiple C<my> declarations.  Unlike a second
C<my> declaration, which will bind the name to a fresh variable, a
second C<our> declaration in the same package, in the same scope, is
merely redundant.

    use warnings;
    package Foo;
    our $bar;		# declares $Foo::bar for rest of lexical scope
    $bar = 20;

    package Bar;
    our $bar = 30;	# declares $Bar::bar for rest of lexical scope
    print $bar;		# prints 30

    our $bar;		# emits warning but has no other effect
    print $bar;		# still prints 30

An C<our> declaration may also have a list of attributes associated
with it.

The exact semantics and interface of TYPE and ATTRS are still
evolving.  TYPE is currently bound to the use of C<fields> pragma,
and attributes are handled using the C<attributes> pragma, or starting
from Perl 5.8.0 also via the C<Attribute::Handlers> module.  See
L<perlsub/"Private Variables via my()"> for details, and L<fields>,
L<attributes>, and L<Attribute::Handlers>.

The only currently recognized C<our()> attribute is C<unique> which
indicates that a single copy of the global is to be used by all
interpreters should the program happen to be running in a
multi-interpreter environment. (The default behaviour would be for
each interpreter to have its own copy of the global.)  Examples:

    our @EXPORT : unique = qw(foo);
    our %EXPORT_TAGS : unique = (bar => [qw(aa bb cc)]);
    our $VERSION : unique = "1.00";

Note that this attribute also has the effect of making the global
readonly when the first new interpreter is cloned (for example,
when the first new thread is created).

Multi-interpreter environments can come to being either through the
fork() emulation on Windows platforms, or by embedding perl in a
multi-threaded application.  The C<unique> attribute does nothing in
all other environments.

Warning: the current implementation of this attribute operates on the
typeglob associated with the variable; this means that C<our $x : unique>
also has the effect of C<our @x : unique; our %x : unique>. This may be
subject to change.

=item pack TEMPLATE,LIST
X<pack>

Takes a LIST of values and converts it into a string using the rules
given by the TEMPLATE.  The resulting string is the concatenation of
the converted values.  Typically, each converted value looks
like its machine-level representation.  For example, on 32-bit machines
a converted integer may be represented by a sequence of 4 bytes.

The TEMPLATE is a sequence of characters that give the order and type
of values, as follows:

    a	A string with arbitrary binary data, will be null padded.
    A	A text (ASCII) string, will be space padded.
    Z	A null terminated (ASCIZ) string, will be null padded.

    b	A bit string (ascending bit order inside each byte, like vec()).
    B	A bit string (descending bit order inside each byte).
    h	A hex string (low nybble first).
    H	A hex string (high nybble first).

    c	A signed char value.
    C	An unsigned char value.  Only does bytes.  See U for Unicode.

    s	A signed short value.
    S	An unsigned short value.
	  (This 'short' is _exactly_ 16 bits, which may differ from
	   what a local C compiler calls 'short'.  If you want
	   native-length shorts, use the '!' suffix.)

    i	A signed integer value.
    I	An unsigned integer value.
	  (This 'integer' is _at_least_ 32 bits wide.  Its exact
           size depends on what a local C compiler calls 'int',
           and may even be larger than the 'long' described in
           the next item.)

    l	A signed long value.
    L	An unsigned long value.
	  (This 'long' is _exactly_ 32 bits, which may differ from
	   what a local C compiler calls 'long'.  If you want
	   native-length longs, use the '!' suffix.)

    n	An unsigned short in "network" (big-endian) order.
    N	An unsigned long in "network" (big-endian) order.
    v	An unsigned short in "VAX" (little-endian) order.
    V	An unsigned long in "VAX" (little-endian) order.
	  (These 'shorts' and 'longs' are _exactly_ 16 bits and
	   _exactly_ 32 bits, respectively.)

    q	A signed quad (64-bit) value.
    Q	An unsigned quad value.
	  (Quads are available only if your system supports 64-bit
	   integer values _and_ if Perl has been compiled to support those.
           Causes a fatal error otherwise.)

    j   A signed integer value (a Perl internal integer, IV).
    J   An unsigned integer value (a Perl internal unsigned integer, UV).

    f	A single-precision float in the native format.
    d	A double-precision float in the native format.

    F	A floating point value in the native native format
           (a Perl internal floating point value, NV).
    D	A long double-precision float in the native format.
	  (Long doubles are available only if your system supports long
	   double values _and_ if Perl has been compiled to support those.
           Causes a fatal error otherwise.)

    p	A pointer to a null-terminated string.
    P	A pointer to a structure (fixed-length string).

    u	A uuencoded string.
    U	A Unicode character number.  Encodes to UTF-8 internally
	(or UTF-EBCDIC in EBCDIC platforms).

    w	A BER compressed integer (not an ASN.1 BER, see perlpacktut for
	details).  Its bytes represent an unsigned integer in base 128,
	most significant digit first, with as few digits as possible.  Bit
	eight (the high bit) is set on each byte except the last.

    x	A null byte.
    X	Back up a byte.
    @	Null fill to absolute position, counted from the start of
        the innermost ()-group.
    (	Start of a ()-group.

The following rules apply:

=over 8

=item *

Each letter may optionally be followed by a number giving a repeat
count.  With all types except C<a>, C<A>, C<Z>, C<b>, C<B>, C<h>,
C<H>, C<@>, C<x>, C<X> and C<P> the pack function will gobble up that
many values from the LIST.  A C<*> for the repeat count means to use
however many items are left, except for C<@>, C<x>, C<X>, where it is
equivalent to C<0>, and C<u>, where it is equivalent to 1 (or 45, what
is the same).  A numeric repeat count may optionally be enclosed in
brackets, as in C<pack 'C[80]', @arr>.

One can replace the numeric repeat count by a template enclosed in brackets;
then the packed length of this template in bytes is used as a count.
For example, C<x[L]> skips a long (it skips the number of bytes in a long);
the template C<$t X[$t] $t> unpack()s twice what $t unpacks.
If the template in brackets contains alignment commands (such as C<x![d]>),
its packed length is calculated as if the start of the template has the maximal
possible alignment.

When used with C<Z>, C<*> results in the addition of a trailing null
byte (so the packed result will be one longer than the byte C<length>
of the item).

The repeat count for C<u> is interpreted as the maximal number of bytes
to encode per line of output, with 0 and 1 replaced by 45.

=item *

The C<a>, C<A>, and C<Z> types gobble just one value, but pack it as a
string of length count, padding with nulls or spaces as necessary.  When
unpacking, C<A> strips trailing spaces and nulls, C<Z> strips everything
after the first null, and C<a> returns data verbatim.  When packing,
C<a>, and C<Z> are equivalent.

If the value-to-pack is too long, it is truncated.  If too long and an
explicit count is provided, C<Z> packs only C<$count-1> bytes, followed
by a null byte.  Thus C<Z> always packs a trailing null byte under
all circumstances.

=item *

Likewise, the C<b> and C<B> fields pack a string that many bits long.
Each byte of the input field of pack() generates 1 bit of the result.
Each result bit is based on the least-significant bit of the corresponding
input byte, i.e., on C<ord($byte)%2>.  In particular, bytes C<"0"> and
C<"1"> generate bits 0 and 1, as do bytes C<"\0"> and C<"\1">.

Starting from the beginning of the input string of pack(), each 8-tuple
of bytes is converted to 1 byte of output.  With format C<b>
the first byte of the 8-tuple determines the least-significant bit of a
byte, and with format C<B> it determines the most-significant bit of
a byte.

If the length of the input string is not exactly divisible by 8, the
remainder is packed as if the input string were padded by null bytes
at the end.  Similarly, during unpack()ing the "extra" bits are ignored.

If the input string of pack() is longer than needed, extra bytes are ignored.
A C<*> for the repeat count of pack() means to use all the bytes of
the input field.  On unpack()ing the bits are converted to a string
of C<"0">s and C<"1">s.

=item *

The C<h> and C<H> fields pack a string that many nybbles (4-bit groups,
representable as hexadecimal digits, 0-9a-f) long.

Each byte of the input field of pack() generates 4 bits of the result.
For non-alphabetical bytes the result is based on the 4 least-significant
bits of the input byte, i.e., on C<ord($byte)%16>.  In particular,
bytes C<"0"> and C<"1"> generate nybbles 0 and 1, as do bytes
C<"\0"> and C<"\1">.  For bytes C<"a".."f"> and C<"A".."F"> the result
is compatible with the usual hexadecimal digits, so that C<"a"> and
C<"A"> both generate the nybble C<0xa==10>.  The result for bytes
C<"g".."z"> and C<"G".."Z"> is not well-defined.

Starting from the beginning of the input string of pack(), each pair
of bytes is converted to 1 byte of output.  With format C<h> the
first byte of the pair determines the least-significant nybble of the
output byte, and with format C<H> it determines the most-significant
nybble.

If the length of the input string is not even, it behaves as if padded
by a null byte at the end.  Similarly, during unpack()ing the "extra"
nybbles are ignored.

If the input string of pack() is longer than needed, extra bytes are ignored.
A C<*> for the repeat count of pack() means to use all the bytes of
the input field.  On unpack()ing the bits are converted to a string
of hexadecimal digits.

=item *

The C<p> type packs a pointer to a null-terminated string.  You are
responsible for ensuring the string is not a temporary value (which can
potentially get deallocated before you get around to using the packed result).
The C<P> type packs a pointer to a structure of the size indicated by the
length.  A NULL pointer is created if the corresponding value for C<p> or
C<P> is C<undef>, similarly for unpack().

=item *

The C</> template character allows packing and unpacking of strings where
the packed structure contains a byte count followed by the string itself.
You write I<length-item>C</>I<string-item>.

The I<length-item> can be any C<pack> template letter, and describes
how the length value is packed.  The ones likely to be of most use are
integer-packing ones like C<n> (for Java strings), C<w> (for ASN.1 or
SNMP) and C<N> (for Sun XDR).

For C<pack>, the I<string-item> must, at present, be C<"A*">, C<"a*"> or
C<"Z*">. For C<unpack> the length of the string is obtained from the
I<length-item>, but if you put in the '*' it will be ignored. For all other
codes, C<unpack> applies the length value to the next item, which must not
have a repeat count.

    unpack 'C/a', "\04Gurusamy";        gives 'Guru'
    unpack 'a3/A* A*', '007 Bond  J ';  gives (' Bond','J')
    pack 'n/a* w/a*','hello,','world';  gives "\000\006hello,\005world"

The I<length-item> is not returned explicitly from C<unpack>.

Adding a count to the I<length-item> letter is unlikely to do anything
useful, unless that letter is C<A>, C<a> or C<Z>.  Packing with a
I<length-item> of C<a> or C<Z> may introduce C<"\000"> characters,
which Perl does not regard as legal in numeric strings.

=item *

The integer types C<s>, C<S>, C<l>, and C<L> may be
immediately followed by a C<!> suffix to signify native shorts or
longs--as you can see from above for example a bare C<l> does mean
exactly 32 bits, the native C<long> (as seen by the local C compiler)
may be larger.  This is an issue mainly in 64-bit platforms.  You can
see whether using C<!> makes any difference by

	print length(pack("s")), " ", length(pack("s!")), "\n";
	print length(pack("l")), " ", length(pack("l!")), "\n";

C<i!> and C<I!> also work but only because of completeness;
they are identical to C<i> and C<I>.

The actual sizes (in bytes) of native shorts, ints, longs, and long
longs on the platform where Perl was built are also available via
L<Config>:

       use Config;
       print $Config{shortsize},    "\n";
       print $Config{intsize},      "\n";
       print $Config{longsize},     "\n";
       print $Config{longlongsize}, "\n";

(The C<$Config{longlongsize}> will be undefined if your system does
not support long longs.)

=item *

The integer formats C<s>, C<S>, C<i>, C<I>, C<l>, C<L>, C<j>, and C<J>
are inherently non-portable between processors and operating systems
because they obey the native byteorder and endianness.  For example a
4-byte integer 0x12345678 (305419896 decimal) would be ordered natively
(arranged in and handled by the CPU registers) into bytes as

 	0x12 0x34 0x56 0x78	# big-endian
 	0x78 0x56 0x34 0x12	# little-endian

Basically, the Intel and VAX CPUs are little-endian, while everybody
else, for example Motorola m68k/88k, PPC, Sparc, HP PA, Power, and
Cray are big-endian.  Alpha and MIPS can be either: Digital/Compaq
used/uses them in little-endian mode; SGI/Cray uses them in big-endian
mode.

The names `big-endian' and `little-endian' are comic references to
the classic "Gulliver's Travels" (via the paper "On Holy Wars and a
Plea for Peace" by Danny Cohen, USC/ISI IEN 137, April 1, 1980) and
the egg-eating habits of the Lilliputians.

Some systems may have even weirder byte orders such as

 	0x56 0x78 0x12 0x34
 	0x34 0x12 0x78 0x56

You can see your system's preference with

 	print join(" ", map { sprintf "%#02x", $_ }
                            unpack("C*",pack("L",0x12345678))), "\n";

The byteorder on the platform where Perl was built is also available
via L<Config>:

	use Config;
	print $Config{byteorder}, "\n";

Byteorders C<'1234'> and C<'12345678'> are little-endian, C<'4321'>
and C<'87654321'> are big-endian.

If you want portable packed integers use the formats C<n>, C<N>,
C<v>, and C<V>, their byte endianness and size are known.
See also L<perlport>.

=item *

Real numbers (floats and doubles) are in the native machine format only;
due to the multiplicity of floating formats around, and the lack of a
standard "network" representation, no facility for interchange has been
made.  This means that packed floating point data written on one machine
may not be readable on another - even if both use IEEE floating point
arithmetic (as the endian-ness of the memory representation is not part
of the IEEE spec).  See also L<perlport>.

Note that Perl uses doubles internally for all numeric calculation, and
converting from double into float and thence back to double again will
lose precision (i.e., C<unpack("f", pack("f", $foo)>) will not in general
equal $foo).

=item *

If the pattern begins with a C<U>, the resulting string will be
treated as UTF-8-encoded Unicode. You can force UTF-8 encoding on in a
string with an initial C<U0>, and the bytes that follow will be
interpreted as Unicode characters. If you don't want this to happen,
you can begin your pattern with C<C0> (or anything else) to force Perl
not to UTF-8 encode your string, and then follow this with a C<U*>
somewhere in your pattern.

=item *

You must yourself do any alignment or padding by inserting for example
enough C<'x'>es while packing.  There is no way to pack() and unpack()
could know where the bytes are going to or coming from.  Therefore
C<pack> (and C<unpack>) handle their output and input as flat
sequences of bytes.

=item *

A ()-group is a sub-TEMPLATE enclosed in parentheses.  A group may
take a repeat count, both as postfix, and for unpack() also via the C</>
template character. Within each repetition of a group, positioning with
C<@> starts again at 0. Therefore, the result of

    pack( '@1A((@2A)@3A)', 'a', 'b', 'c' )

is the string "\0a\0\0bc".


=item *

C<x> and C<X> accept C<!> modifier.  In this case they act as
alignment commands: they jump forward/back to the closest position
aligned at a multiple of C<count> bytes.  For example, to pack() or
unpack() C's C<struct {char c; double d; char cc[2]}> one may need to
use the template C<C x![d] d C[2]>; this assumes that doubles must be
aligned on the double's size.

For alignment commands C<count> of 0 is equivalent to C<count> of 1;
both result in no-ops.

=item *

A comment in a TEMPLATE starts with C<#> and goes to the end of line.
White space may be used to separate pack codes from each other, but
a C<!> modifier and a repeat count must follow immediately.

=item *

If TEMPLATE requires more arguments to pack() than actually given, pack()
assumes additional C<""> arguments.  If TEMPLATE requires fewer arguments
to pack() than actually given, extra arguments are ignored.

=back

Ejemplos:

    $foo = pack("CCCC",65,66,67,68);
    # foo eq "ABCD"
    $foo = pack("C4",65,66,67,68);
    # same thing
    $foo = pack("U4",0x24b6,0x24b7,0x24b8,0x24b9);
    # same thing with Unicode circled letters

    $foo = pack("ccxxcc",65,66,67,68);
    # foo eq "AB\0\0CD"

    # note: the above examples featuring "C" and "c" are true
    # only on ASCII and ASCII-derived systems such as ISO Latin 1
    # and UTF-8.  In EBCDIC the first example would be
    # $foo = pack("CCCC",193,194,195,196);

    $foo = pack("s2",1,2);
    # "\1\0\2\0" on little-endian
    # "\0\1\0\2" on big-endian

    $foo = pack("a4","abcd","x","y","z");
    # "abcd"

    $foo = pack("aaaa","abcd","x","y","z");
    # "axyz"

    $foo = pack("a14","abcdefg");
    # "abcdefg\0\0\0\0\0\0\0"

    $foo = pack("i9pl", gmtime);
    # a real struct tm (on my system anyway)

    $utmp_template = "Z8 Z8 Z16 L";
    $utmp = pack($utmp_template, @utmp1);
    # a struct utmp (BSDish)

    @utmp2 = unpack($utmp_template, $utmp);
    # "@utmp1" eq "@utmp2"

    sub bintodec {
	unpack("N", pack("B32", substr("0" x 32 . shift, -32)));
    }

    $foo = pack('sx2l', 12, 34);
    # short 12, two zero bytes padding, long 34
    $bar = pack('s@4l', 12, 34);
    # short 12, zero fill to position 4, long 34
    # $foo eq $bar

The same template may generally also be used in unpack().

=item package NAMESPACE
X<package> X<module> X<namespace>

=item package

Declares the compilation unit as being in the given namespace.  The scope
of the package declaration is from the declaration itself through the end
of the enclosing block, file, or eval (the same as the C<my> operator).
All further unqualified dynamic identifiers will be in this namespace.
A package statement affects only dynamic variables--including those
you've used C<local> on--but I<not> lexical variables, which are created
with C<my>.  Typically it would be the first declaration in a file to
be included by the C<require> or C<use> operator.  You can switch into a
package in more than one place; it merely influences which symbol table
is used by the compiler for the rest of that block.  You can refer to
variables and filehandles in other packages by prefixing the identifier
with the package name and a double colon:  C<$Package::Variable>.
If the package name is null, the C<main> package as assumed.  That is,
C<$::sail> is equivalent to C<$main::sail> (as well as to C<$main'sail>,
still seen in older code).

If NAMESPACE is omitted, then there is no current package, and all
identifiers must be fully qualified or lexicals.  However, you are
strongly advised not to make use of this feature. Its use can cause
unexpected behaviour, even crashing some versions of Perl. It is
deprecated, and will be removed from a future release.

See L<perlmod/"Packages"> for more information about packages, modules,
and classes.  See L<perlsub> for other scoping issues.

=item pipe READHANDLE,WRITEHANDLE
X<pipe>

Opens a pair of connected pipes like the corresponding system call.
Note that if you set up a loop of piped processes, deadlock can occur
unless you are very careful.  In addition, note that Perl's pipes use
IO buffering, so you may need to set C<$|> to flush your WRITEHANDLE
after each command, depending on the application.

See L<IPC::Open2>, L<IPC::Open3>, and L<perlipc/"Bidirectional Communication">
for examples of such things.

On systems that support a close-on-exec flag on files, the flag will be set
for the newly opened file descriptors as determined by the value of $^F.
Ver L<perlvar/$^F>.

=item pop ARRAY
X<pop> X<stack>

=item pop

Pops and returns the last value of the array, shortening the array by
one element.  Has an effect similar to

    $ARRAY[$#ARRAY--]

If there are no elements in the array, returns the undefined value
(although this may happen at other times as well).  If ARRAY is
omitted, pops the C<@ARGV> array in the main program, and the C<@_>
array in subroutines, just like C<shift>.

=item pos SCALAR
X<pos> X<match, position>

=item pos

Returns the offset of where the last C<m//g> search left off for the variable
in question (C<$_> is used when the variable is not specified).  Note that
0 is a valid match offset.  C<undef> indicates that the search position
is reset (usually due to match failure, but can also be because no match has
yet been performed on the scalar). C<pos> directly accesses the location used
by the regexp engine to store the offset, so assigning to C<pos> will change
that offset, and so will also influence the C<\G> zero-width assertion in
regular expressions. Because a failed C<m//gc> match doesn't reset the offset,
the return from C<pos> won't change either in this case.  See L<perlre> and
L<perlop>.

=item print FILEHANDLE LIST
X<print>

=item print LIST

=item print

Prints a string or a list of strings.  Returns true if successful.
FILEHANDLE may be a scalar variable name, in which case the variable
contains the name of or a reference to the filehandle, thus introducing
one level of indirection.  (NOTE: If FILEHANDLE is a variable and
the next token is a term, it may be misinterpreted as an operator
unless you interpose a C<+> or put parentheses around the arguments.)
If FILEHANDLE is omitted, prints by default to standard output (or
to the last selected output channel--see L</select>).  If LIST is
also omitted, prints C<$_> to the currently selected output channel.
To set the default output channel to something other than STDOUT
use the select operation.  The current value of C<$,> (if any) is
printed between each LIST item.  The current value of C<$\> (if
any) is printed after the entire LIST has been printed.  Because
print takes a LIST, anything in the LIST is evaluated in list
context, and any subroutine that you call will have one or more of
its expressions evaluated in list context.  Also be careful not to
follow the print keyword with a left parenthesis unless you want
the corresponding right parenthesis to terminate the arguments to
the print--interpose a C<+> or put parentheses around all the
arguments.

Note that if you're storing FILEHANDLEs in an array, or if you're using
any other expression more complex than a scalar variable to retrieve it,
you will have to use a block returning the filehandle value instead:

    print { $files[$i] } "stuff\n";
    print { $OK ? STDOUT : STDERR } "stuff\n";

=item printf FILEHANDLE FORMAT, LIST
X<printf>

=item printf FORMAT, LIST

Equivalent to C<print FILEHANDLE sprintf(FORMAT, LIST)>, except that C<$\>
(the output record separator) is not appended.  The first argument
of the list will be interpreted as the C<printf> format. See C<sprintf>
for an explanation of the format argument. If C<use locale> is in effect,
the character used for the decimal point in formatted real numbers is
affected by the LC_NUMERIC locale.  See L<perllocale>.

Don't fall into the trap of using a C<printf> when a simple
C<print> would do.  The C<print> is more efficient and less
error prone.

=item prototype FUNCTION
X<prototype>

Returns the prototype of a function as a string (or C<undef> if the
function has no prototype).  FUNCTION is a reference to, or the name of,
the function whose prototype you want to retrieve.

If FUNCTION is a string starting with C<CORE::>, the rest is taken as a
name for Perl builtin.  If the builtin is not I<overridable> (such as
C<qw//>) or its arguments cannot be expressed by a prototype (such as
C<system>) returns C<undef> because the builtin does not really behave
like a Perl function.  Otherwise, the string describing the equivalent
prototype is returned.

=item push ARRAY,LIST
X<push>, X<stack>

Treats ARRAY as a stack, and pushes the values of LIST
onto the end of ARRAY.  The length of ARRAY increases by the length of
LIST.  Has the same effect as

    for $value (LIST) {
	$ARRAY[++$#ARRAY] = $value;
    }

but is more efficient.  Returns the number of elements in the array following
the completed C<push>.

=item q/STRING/

=item qq/STRING/

=item qr/STRING/

=item qx/STRING/

=item qw/STRING/

Generalized quotes.  See L<perlop/"Regexp Quote-Like Operators">.

=item quotemeta EXPR
X<quotemeta> X<metacharacter>

=item quotemeta

Returns the value of EXPR with all non-"word"
characters backslashed.  (That is, all characters not matching
C</[A-Za-z_0-9]/> will be preceded by a backslash in the
returned string, regardless of any locale settings.)
This is the internal function implementing
the C<\Q> escape in double-quoted strings.

Si se omite EXPR, se usa C<$_>.

=item rand EXPR
X<rand> X<random>

=item rand

Returns a random fractional number greater than or equal to C<0> and less
than the value of EXPR.  (EXPR should be positive.)  If EXPR is
omitted, the value C<1> is used.  Currently EXPR with the value C<0> is
also special-cased as C<1> - this has not been documented before perl 5.8.0
and is subject to change in future versions of perl.  Automatically calls
C<srand> unless C<srand> has already been called.  See also C<srand>.

Apply C<int()> to the value returned by C<rand()> if you want random
integers instead of random fractional numbers.  For example,

    int(rand(10))

returns a random integer between C<0> and C<9>, inclusive.

(Note: If your rand function consistently returns numbers that are too
large or too small, then your version of Perl was probably compiled
with the wrong number of RANDBITS.)

=item read FILEHANDLE,SCALAR,LENGTH,OFFSET
X<read>

=item read FILEHANDLE,SCALAR,LENGTH

Attempts to read LENGTH I<characters> of data into variable SCALAR
from the specified FILEHANDLE.  Returns the number of characters
actually read, C<0> at end of file, or undef if there was an error (in
the latter case C<$!> is also set).  SCALAR will be grown or shrunk 
so that the last character actually read is the last character of the
scalar after the read.

An OFFSET may be specified to place the read data at some place in the
string other than the beginning.  A negative OFFSET specifies
placement at that many characters counting backwards from the end of
the string.  A positive OFFSET greater than the length of SCALAR
results in the string being padded to the required size with C<"\0">
bytes before the result of the read is appended.

The call is actually implemented in terms of either Perl's or system's
fread() call.  To get a true read(2) system call, see C<sysread>.

Note the I<characters>: depending on the status of the filehandle,
either (8-bit) bytes or characters are read.  By default all
filehandles operate on bytes, but for example if the filehandle has
been opened with the C<:utf8> I/O layer (see L</open>, and the C<open>
pragma, L<open>), the I/O will operate on UTF-8 encoded Unicode
characters, not bytes.  Similarly for the C<:encoding> pragma:
in that case pretty much any characters can be read.

=item readdir DIRHANDLE
X<readdir>

Returns the next directory entry for a directory opened by C<opendir>.
If used in list context, returns all the rest of the entries in the
directory.  If there are no more entries, returns an undefined value in
scalar context or a null list in list context.

If you're planning to filetest the return values out of a C<readdir>, you'd
better prepend the directory in question.  Otherwise, because we didn't
C<chdir> there, it would have been testing the wrong file.

    opendir(DIR, $some_dir) || die "can't opendir $some_dir: $!";
    @dots = grep { /^\./ && -f "$some_dir/$_" } readdir(DIR);
    closedir DIR;

=item readline EXPR
X<readline> X<gets> X<fgets>

Reads from the filehandle whose typeglob is contained in EXPR.  In scalar
context, each call reads and returns the next line, until end-of-file is
reached, whereupon the subsequent call returns undef.  In list context,
reads until end-of-file is reached and returns a list of lines.  Note that
the notion of "line" used here is however you may have defined it
with C<$/> or C<$INPUT_RECORD_SEPARATOR>).  See L<perlvar/"$/">.

When C<$/> is set to C<undef>, when readline() is in scalar
context (i.e. file slurp mode), and when an empty file is read, it
returns C<''> the first time, followed by C<undef> subsequently.

This is the internal function implementing the C<< <EXPR> >>
operator, but you can use it directly.  The C<< <EXPR> >>
operator is discussed in more detail in L<perlop/"I/O Operators">.

    $line = <STDIN>;
    $line = readline(*STDIN);		# same thing

If readline encounters an operating system error, C<$!> will be set with the
corresponding error message.  It can be helpful to check C<$!> when you are
reading from filehandles you don't trust, such as a tty or a socket.  The
following example uses the operator form of C<readline>, and takes the necessary
steps to ensure that C<readline> was successful.

    for (;;) {
        undef $!;
        unless (defined( $line = <> )) {
            die $! if $!;
            last; # reached EOF
        }
        # ...
    }

=item readlink EXPR
X<readlink>

=item readlink

Returns the value of a symbolic link, if symbolic links are
implemented.  If not, gives a fatal error.  If there is some system
error, returns the undefined value and sets C<$!> (errno).  If EXPR is
omitted, uses C<$_>.

=item readpipe EXPR
X<readpipe>

EXPR is executed as a system command.
The collected standard output of the command is returned.
In scalar context, it comes back as a single (potentially
multi-line) string.  In list context, returns a list of lines
(however you've defined lines with C<$/> or C<$INPUT_RECORD_SEPARATOR>).
This is the internal function implementing the C<qx/EXPR/>
operator, but you can use it directly.  The C<qx/EXPR/>
operator is discussed in more detail in L<perlop/"I/O Operators">.

=item recv SOCKET,SCALAR,LENGTH,FLAGS
X<recv>

Receives a message on a socket.  Attempts to receive LENGTH characters
of data into variable SCALAR from the specified SOCKET filehandle.
SCALAR will be grown or shrunk to the length actually read.  Takes the
same flags as the system call of the same name.  Returns the address
of the sender if SOCKET's protocol supports this; returns an empty
string otherwise.  If there's an error, returns the undefined value.
This call is actually implemented in terms of recvfrom(2) system call.
See L<perlipc/"UDP: Message Passing"> for examples.

Note the I<characters>: depending on the status of the socket, either
(8-bit) bytes or characters are received.  By default all sockets
operate on bytes, but for example if the socket has been changed using
binmode() to operate with the C<:utf8> I/O layer (see the C<open>
pragma, L<open>), the I/O will operate on UTF-8 encoded Unicode
characters, not bytes.  Similarly for the C<:encoding> pragma:
in that case pretty much any characters can be read.

=item redo LABEL
X<redo>

=item redo

El comando C<redo> reinicia la iteración sin evaluar de nuevo la condición.  The C<continue> block, if any, is not executed.  If
the LABEL is omitted, the command refers to the innermost enclosing
loop.  Programs that want to lie to themselves about what was just input 
normally use this command:

    # a simpleminded Pascal comment stripper
    # (warning: assumes no { or } in strings)
    LINE: while (<STDIN>) {
	while (s|({.*}.*){.*}|$1 |) {}
	s|{.*}| |;
	if (s|{.*| |) {
	    $front = $_;
	    while (<STDIN>) {
		if (/}/) {	# end of comment?
		    s|^|$front\{|;
		    redo LINE;
		}
	    }
	}
	print;
    }

C<redo> cannot be used to retry a block which returns a value such as
C<eval {}>, C<sub {}> or C<do {}>, and should not be used to exit
a grep() or map() operation.

Note que un bloque por sí mismo es semánticamente idéntico a un bucle que se ejecuta una vez.  Thus C<redo> inside such a block will effectively
turn it into a looping construct.

Ver también L</continue> para una ilustración de cómo funcionan C<last>, C<next> y C<redo>.

=item ref EXPR
X<ref> X<reference>

=item ref

Returns a non-empty string if EXPR is a reference, the empty
string otherwise. If EXPR
is not specified, C<$_> will be used.  The value returned depends on the
type of thing the reference is a reference to.
Builtin types include:

    SCALAR
    ARRAY
    HASH
    CODE
    REF
    GLOB
    LVALUE

If the referenced object has been blessed into a package, then that package
name is returned instead.  You can think of C<ref> as a C<typeof> operator.

    if (ref($r) eq "HASH") {
	print "r is a reference to a hash.\n";
    }
    unless (ref($r)) {
	print "r is not a reference at all.\n";
    }

See also L<perlref>.

=item rename OLDNAME,NEWNAME
X<rename> X<move> X<mv> X<ren>

Changes the name of a file; an existing file NEWNAME will be
clobbered.  Returns true for success, false otherwise.

Behavior of this function varies wildly depending on your system
implementation.  For example, it will usually not work across file system
boundaries, even though the system I<mv> command sometimes compensates
for this.  Other restrictions include whether it works on directories,
open files, or pre-existing files.  Check L<perlport> and either the
rename(2) manpage or equivalent system documentation for details.

=item require VERSION
X<require>

=item require EXPR

=item require

Demands a version of Perl specified by VERSION, or demands some semantics
specified by EXPR or by C<$_> if EXPR is not supplied.

VERSION may be either a numeric argument such as 5.006, which will be
compared to C<$]>, or a literal of the form v5.6.1, which will be compared
to C<$^V> (aka $PERL_VERSION).  A fatal error is produced at run time if
VERSION is greater than the version of the current Perl interpreter.
Compare with L</use>, which can do a similar check at compile time.

Specifying VERSION as a literal of the form v5.6.1 should generally be
avoided, because it leads to misleading error messages under earlier
versions of Perl that do not support this syntax.  The equivalent numeric
version should be used instead.

    require v5.6.1;	# run time version check
    require 5.6.1;	# ditto
    require 5.006_001;	# ditto; preferred for backwards compatibility

Otherwise, C<require> demands that a library file be included if it
hasn't already been included.  The file is included via the do-FILE
mechanism, which is essentially just a variety of C<eval>.  Has
semantics similar to the following subroutine:

    sub require {
       my ($filename) = @_;
       if (exists $INC{$filename}) {
           return 1 if $INC{$filename};
           die "Compilation failed in require";
       }
       my ($realfilename,$result);
       ITER: {
           foreach $prefix (@INC) {
               $realfilename = "$prefix/$filename";
               if (-f $realfilename) {
                   $INC{$filename} = $realfilename;
                   $result = do $realfilename;
                   last ITER;
               }
           }
           die "Can't find $filename in \@INC";
       }
       if ($@) {
           $INC{$filename} = undef;
           die $@;
       } elsif (!$result) {
           delete $INC{$filename};
           die "$filename did not return true value";
       } else {
           return $result;
       }
    }

Note that the file will not be included twice under the same specified
name.

The file must return true as the last statement to indicate
successful execution of any initialization code, so it's customary to
end such a file with C<1;> unless you're sure it'll return true
otherwise.  But it's better just to put the C<1;>, in case you add more
statements.

If EXPR is a bareword, the require assumes a "F<.pm>" extension and
replaces "F<::>" with "F</>" in the filename for you,
to make it easy to load standard modules.  This form of loading of
modules does not risk altering your namespace.

In other words, if you try this:

        require Foo::Bar;    # a splendid bareword

The require function will actually look for the "F<Foo/Bar.pm>" file in the
directories specified in the C<@INC> array.

But if you try this:

        $class = 'Foo::Bar';
        require $class;	     # $class is not a bareword
    #or
        require "Foo::Bar";  # not a bareword because of the ""

The require function will look for the "F<Foo::Bar>" file in the @INC array and
will complain about not finding "F<Foo::Bar>" there.  In this case you can do:

        eval "require $class";

Now that you understand how C<require> looks for files in the case of
a bareword argument, there is a little extra functionality going on
behind the scenes.  Before C<require> looks for a "F<.pm>" extension,
it will first look for a filename with a "F<.pmc>" extension.  A file
with this extension is assumed to be Perl bytecode generated by
L<B::Bytecode|B::Bytecode>.  If this file is found, and its modification
time is newer than a coinciding "F<.pm>" non-compiled file, it will be
loaded in place of that non-compiled file ending in a "F<.pm>" extension.

You can also insert hooks into the import facility, by putting directly
Perl code into the @INC array.  There are three forms of hooks: subroutine
references, array references and blessed objects.

Subroutine references are the simplest case.  When the inclusion system
walks through @INC and encounters a subroutine, this subroutine gets
called with two parameters, the first being a reference to itself, and the
second the name of the file to be included (e.g. "F<Foo/Bar.pm>").  The
subroutine should return C<undef> or a filehandle, from which the file to
include will be read.  If C<undef> is returned, C<require> will look at
the remaining elements of @INC.

If the hook is an array reference, its first element must be a subroutine
reference.  This subroutine is called as above, but the first parameter is
the array reference.  This enables to pass indirectly some arguments to
the subroutine.

In other words, you can write:

    push @INC, \&my_sub;
    sub my_sub {
	my ($coderef, $filename) = @_;	# $coderef is \&my_sub
	...
    }

or:

    push @INC, [ \&my_sub, $x, $y, ... ];
    sub my_sub {
	my ($arrayref, $filename) = @_;
	# Retrieve $x, $y, ...
	my @parameters = @$arrayref[1..$#$arrayref];
	...
    }

If the hook is an object, it must provide an INC method that will be
called as above, the first parameter being the object itself.  (Note that
you must fully qualify the sub's name, as it is always forced into package
C<main>.)  Here is a typical code layout:

    # In Foo.pm
    package Foo;
    sub new { ... }
    sub Foo::INC {
	my ($self, $filename) = @_;
	...
    }

    # In the main program
    push @INC, new Foo(...);

Note that these hooks are also permitted to set the %INC entry
corresponding to the files they have loaded. See L<perlvar/%INC>.

For a yet-more-powerful import facility, see L</use> and L<perlmod>.

=item reset EXPR
X<reset>

=item reset

Generally used in a C<continue> block at the end of a loop to clear
variables and reset C<??> searches so that they work again.  The
expression is interpreted as a list of single characters (hyphens
allowed for ranges).  All variables and arrays beginning with one of
those letters are reset to their pristine state.  If the expression is
omitted, one-match searches (C<?pattern?>) are reset to match again.  Resets
only variables or searches in the current package.  Always returns
1.  Ejemplos:

    reset 'X';		# reset all X variables
    reset 'a-z';	# reset lower case variables
    reset;		# just reset ?one-time? searches

Resetting C<"A-Z"> is not recommended because you'll wipe out your
C<@ARGV> and C<@INC> arrays and your C<%ENV> hash.  Resets only package
variables--lexical variables are unaffected, but they clean themselves
up on scope exit anyway, so you'll probably want to use them instead.
See L</my>.

=item return EXPR
X<return>

=item return

Returns from a subroutine, C<eval>, or C<do FILE> with the value
given in EXPR.  Evaluation of EXPR may be in list, scalar, or void
context, depending on how the return value will be used, and the context
may vary from one execution to the next (see C<wantarray>).  If no EXPR
is given, returns an empty list in list context, the undefined value in
scalar context, and (of course) nothing at all in a void context.

(Note that in the absence of an explicit C<return>, a subroutine, eval,
or do FILE will automatically return the value of the last expression
evaluated.)

=item reverse LIST
X<reverse> X<rev> X<invert>

In list context, returns a list value consisting of the elements
of LIST in the opposite order.  In scalar context, concatenates the
elements of LIST and returns a string value with all characters
in the opposite order.

    print reverse <>;		# line tac, last line first

    undef $/;			# for efficiency of <>
    print scalar reverse <>;	# character tac, last line tsrif

Used without arguments in scalar context, reverse() reverses C<$_>.

This operator is also handy for inverting a hash, although there are some
caveats.  If a value is duplicated in the original hash, only one of those
can be represented as a key in the inverted hash.  Also, this has to
unwind one hash and build a whole new one, which may take some time
on a large hash, such as from a DBM file.

    %by_name = reverse %by_address;	# Invert the hash

=item rewinddir DIRHANDLE
X<rewinddir>

Sets the current position to the beginning of the directory for the
C<readdir> routine on DIRHANDLE.

=item rindex STR,SUBSTR,POSITION
X<rindex>

=item rindex STR,SUBSTR

Works just like index() except that it returns the position of the I<last>
occurrence of SUBSTR in STR.  If POSITION is specified, returns the
last occurrence beginning at or before that position.

=item rmdir FILENAME
X<rmdir> X<rd> X<directory, remove>

=item rmdir

Deletes the directory specified by FILENAME if that directory is
empty.  If it succeeds it returns true, otherwise it returns false and
sets C<$!> (errno).  If FILENAME is omitted, uses C<$_>.

=item s///

The substitution operator.  See L<perlop>.

=item scalar EXPR
X<scalar> X<context>

Forces EXPR to be interpreted in scalar context and returns the value
of EXPR.

    @counts = ( scalar @a, scalar @b, scalar @c );

There is no equivalent operator to force an expression to
be interpolated in list context because in practice, this is never
needed.  If you really wanted to do so, however, you could use
the construction C<@{[ (some expression) ]}>, but usually a simple
C<(some expression)> suffices.

Because C<scalar> is unary operator, if you accidentally use for EXPR a
parenthesized list, this behaves as a scalar comma expression, evaluating
all but the last element in void context and returning the final element
evaluated in scalar context.  This is seldom what you want.

The following single statement:

	print uc(scalar(&foo,$bar)),$baz;

is the moral equivalent of these two:

	&foo;
	print(uc($bar),$baz);

See L<perlop> for more details on unary operators and the comma operator.

=item seek FILEHANDLE,POSITION,WHENCE
X<seek> X<fseek> X<filehandle, position>

Sets FILEHANDLE's position, just like the C<fseek> call of C<stdio>.
FILEHANDLE may be an expression whose value gives the name of the
filehandle.  The values for WHENCE are C<0> to set the new position
I<in bytes> to POSITION, C<1> to set it to the current position plus
POSITION, and C<2> to set it to EOF plus POSITION (typically
negative).  For WHENCE you may use the constants C<SEEK_SET>,
C<SEEK_CUR>, and C<SEEK_END> (start of the file, current position, end
of the file) from the Fcntl module.  Returns C<1> upon success, C<0>
otherwise.

Note the I<in bytes>: even if the filehandle has been set to
operate on characters (for example by using the C<:utf8> open
layer), tell() will return byte offsets, not character offsets
(because implementing that would render seek() and tell() rather slow).

If you want to position file for C<sysread> or C<syswrite>, don't use
C<seek>--buffering makes its effect on the file's system position
unpredictable and non-portable.  Use C<sysseek> instead.

Due to the rules and rigors of ANSI C, on some systems you have to do a
seek whenever you switch between reading and writing.  Amongst other
things, this may have the effect of calling stdio's clearerr(3).
A WHENCE of C<1> (C<SEEK_CUR>) is useful for not moving the file position:

    seek(TEST,0,1);

This is also useful for applications emulating C<tail -f>.  Once you hit
EOF on your read, and then sleep for a while, you might have to stick in a
seek() to reset things.  The C<seek> doesn't change the current position,
but it I<does> clear the end-of-file condition on the handle, so that the
next C<< <FILE> >> makes Perl try again to read something.  We hope.

If that doesn't work (some IO implementations are particularly
cantankerous), then you may need something more like this:

    for (;;) {
	for ($curpos = tell(FILE); $_ = <FILE>;
             $curpos = tell(FILE)) {
	    # search for some stuff and put it into files
	}
	sleep($for_a_while);
	seek(FILE, $curpos, 0);
    }

=item seekdir DIRHANDLE,POS
X<seekdir>

Sets the current position for the C<readdir> routine on DIRHANDLE.  POS
must be a value returned by C<telldir>.  C<seekdir> also has the same caveats
about possible directory compaction as the corresponding system library
routine.

=item select FILEHANDLE
X<select> X<filehandle, default>

=item select

Returns the currently selected filehandle.  Sets the current default
filehandle for output, if FILEHANDLE is supplied.  This has two
effects: first, a C<write> or a C<print> without a filehandle will
default to this FILEHANDLE.  Second, references to variables related to
output will refer to this output channel.  For example, if you have to
set the top of form format for more than one output channel, you might
do the following:

    select(REPORT1);
    $^ = 'report1_top';
    select(REPORT2);
    $^ = 'report2_top';

FILEHANDLE may be an expression whose value gives the name of the
actual filehandle.  Thus:

    $oldfh = select(STDERR); $| = 1; select($oldfh);

Some programmers may prefer to think of filehandles as objects with
methods, preferring to write the last example as:

    use IO::Handle;
    STDERR->autoflush(1);

=item select RBITS,WBITS,EBITS,TIMEOUT
X<select>

This calls the select(2) system call with the bit masks specified, which
can be constructed using C<fileno> and C<vec>, along these lines:

    $rin = $win = $ein = '';
    vec($rin,fileno(STDIN),1) = 1;
    vec($win,fileno(STDOUT),1) = 1;
    $ein = $rin | $win;

If you want to select on many filehandles you might wish to write a
subroutine:

    sub fhbits {
	my(@fhlist) = split(' ',$_[0]);
	my($bits);
	for (@fhlist) {
	    vec($bits,fileno($_),1) = 1;
	}
	$bits;
    }
    $rin = fhbits('STDIN TTY SOCK');

The usual idiom is:

    ($nfound,$timeleft) =
      select($rout=$rin, $wout=$win, $eout=$ein, $timeout);

or to block until something becomes ready just do this

    $nfound = select($rout=$rin, $wout=$win, $eout=$ein, undef);

Most systems do not bother to return anything useful in $timeleft, so
calling select() in scalar context just returns $nfound.

Any of the bit masks can also be undef.  The timeout, if specified, is
in seconds, which may be fractional.  Note: not all implementations are
capable of returning the $timeleft.  If not, they always return
$timeleft equal to the supplied $timeout.

You can effect a sleep of 250 milliseconds this way:

    select(undef, undef, undef, 0.25);

Note that whether C<select> gets restarted after signals (say, SIGALRM)
is implementation-dependent.  See also L<perlport> for notes on the
portability of C<select>.

On error, C<select> behaves like the select(2) system call : it returns
-1 and sets C<$!>.

Note: on some Unixes, the select(2) system call may report a socket file
descriptor as "ready for reading", when actually no data is available,
thus a subsequent read blocks. It can be avoided using always the
O_NONBLOCK flag on the socket. See select(2) and fcntl(2) for further
details.

B<WARNING>: One should not attempt to mix buffered I/O (like C<read>
or <FH>) with C<select>, except as permitted by POSIX, and even
then only on POSIX systems.  You have to use C<sysread> instead.

=item semctl ID,SEMNUM,CMD,ARG
X<semctl>

Calls the System V IPC function C<semctl>.  Probablemente escribirá

    use IPC::SysV;

primero para obtener las definiciones de las constantes.  If CMD is IPC_STAT or
GETALL, then ARG must be a variable that will hold the returned
semid_ds structure or semaphore value array.  Returns like C<ioctl>:
the undefined value for error, "C<0 but true>" for zero, or the actual
return value otherwise.  The ARG must consist of a vector of native
short integers, which may be created with C<pack("s!",(0)x$nsem)>.
See also L<perlipc/"SysV IPC">, C<IPC::SysV>, C<IPC::Semaphore>
documentation.

=item semget KEY,NSEMS,FLAGS
X<semget>

Calls the System V IPC function semget.  Returns the semaphore id, or
the undefined value if there is an error.  See also
L<perlipc/"SysV IPC">, C<IPC::SysV>, C<IPC::SysV::Semaphore>
documentation.

=item semop KEY,OPSTRING
X<semop>

Calls the System V IPC function semop to perform semaphore operations
such as signalling and waiting.  OPSTRING must be a packed array of
semop structures.  Each semop structure can be generated with
C<pack("s!3", $semnum, $semop, $semflag)>.  The length of OPSTRING 
implies the number of semaphore operations.  Returns true if
successful, or false if there is an error.  As an example, the
following code waits on semaphore $semnum of semaphore id $semid:

    $semop = pack("s!3", $semnum, -1, 0);
    die "Semaphore trouble: $!\n" unless semop($semid, $semop);

To signal the semaphore, replace C<-1> with C<1>.  See also
L<perlipc/"SysV IPC">, C<IPC::SysV>, and C<IPC::SysV::Semaphore>
documentation.

=item send SOCKET,MSG,FLAGS,TO
X<send>

=item send SOCKET,MSG,FLAGS

Sends a message on a socket.  Attempts to send the scalar MSG to the
SOCKET filehandle.  Takes the same flags as the system call of the
same name.  On unconnected sockets you must specify a destination to
send TO, in which case it does a C C<sendto>.  Returns the number of
characters sent, or the undefined value if there is an error.  The C
system call sendmsg(2) is currently unimplemented.  See
L<perlipc/"UDP: Message Passing"> for examples.

Note the I<characters>: depending on the status of the socket, either
(8-bit) bytes or characters are sent.  By default all sockets operate
on bytes, but for example if the socket has been changed using
binmode() to operate with the C<:utf8> I/O layer (see L</open>, or the
C<open> pragma, L<open>), the I/O will operate on UTF-8 encoded
Unicode characters, not bytes.  Similarly for the C<:encoding> pragma:
in that case pretty much any characters can be sent.

=item setpgrp PID,PGRP
X<setpgrp> X<group>

Sets the current process group for the specified PID, C<0> for the current
process.  Will produce a fatal error if used on a machine that doesn't
implement POSIX setpgid(2) or BSD setpgrp(2).  If the arguments are omitted,
it defaults to C<0,0>.  Note that the BSD 4.2 version of C<setpgrp> does not
accept any arguments, so only C<setpgrp(0,0)> is portable.  See also
C<POSIX::setsid()>.

=item setpriority WHICH,WHO,PRIORITY
X<setpriority> X<priority> X<nice> X<renice>

Sets the current priority for a process, a process group, or a user.
(See setpriority(2).)  Will produce a fatal error if used on a machine
that doesn't implement setpriority(2).

=item setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL
X<setsockopt>

Sets the socket option requested.  Returns undefined if there is an
error.  Use integer constants provided by the C<Socket> module for
LEVEL and OPNAME.  Values for LEVEL can also be obtained from
getprotobyname.  OPTVAL might either be a packed string or an integer.
An integer OPTVAL is shorthand for pack("i", OPTVAL).

An example disabling the Nagle's algorithm for a socket:

    use Socket qw(IPPROTO_TCP TCP_NODELAY);
    setsockopt($socket, IPPROTO_TCP, TCP_NODELAY, 1);

=item shift ARRAY
X<shift>

=item shift

Shifts the first value of the array off and returns it, shortening the
array by 1 and moving everything down.  If there are no elements in the
array, returns the undefined value.  If ARRAY is omitted, shifts the
C<@_> array within the lexical scope of subroutines and formats, and the
C<@ARGV> array at file scopes or within the lexical scopes established by
the C<eval ''>, C<BEGIN {}>, C<INIT {}>, C<CHECK {}>, and C<END {}>
constructs.

See also C<unshift>, C<push>, and C<pop>.  C<shift> and C<unshift> do the
same thing to the left end of an array that C<pop> and C<push> do to the
right end.

=item shmctl ID,CMD,ARG
X<shmctl>

Calls the System V IPC function shmctl.  Probablemente escribirá

    use IPC::SysV;

primero para obtener las definiciones de las constantes.  If CMD is C<IPC_STAT>,
then ARG must be a variable that will hold the returned C<shmid_ds>
structure.  Returns like ioctl: the undefined value for error, "C<0> but
true" for zero, or the actual return value otherwise.
See also L<perlipc/"SysV IPC"> and C<IPC::SysV> documentation.

=item shmget KEY,SIZE,FLAGS
X<shmget>

Calls the System V IPC function shmget.  Returns the shared memory
segment id, or the undefined value if there is an error.
See also L<perlipc/"SysV IPC"> and C<IPC::SysV> documentation.

=item shmread ID,VAR,POS,SIZE
X<shmread>
X<shmwrite>

=item shmwrite ID,STRING,POS,SIZE

Reads or writes the System V shared memory segment ID starting at
position POS for size SIZE by attaching to it, copying in/out, and
detaching from it.  When reading, VAR must be a variable that will
hold the data read.  When writing, if STRING is too long, only SIZE
bytes are used; if STRING is too short, nulls are written to fill out
SIZE bytes.  Return true if successful, or false if there is an error.
shmread() taints the variable. See also L<perlipc/"SysV IPC">,
C<IPC::SysV> documentation, and the C<IPC::Shareable> module from CPAN.

=item shutdown SOCKET,HOW
X<shutdown>

Shuts down a socket connection in the manner indicated by HOW, which
has the same interpretation as in the system call of the same name.

    shutdown(SOCKET, 0);    # I/we have stopped reading data
    shutdown(SOCKET, 1);    # I/we have stopped writing data
    shutdown(SOCKET, 2);    # I/we have stopped using this socket

This is useful with sockets when you want to tell the other
side you're done writing but not done reading, or vice versa.
It's also a more insistent form of close because it also
disables the file descriptor in any forked copies in other
processes.

=item sin EXPR
X<sin> X<sine> X<asin> X<arcsine>

=item sin

Returns the sine of EXPR (expressed in radians).  If EXPR is omitted,
returns sine of C<$_>.

For the inverse sine operation, you may use the C<Math::Trig::asin>
function, or use this relation:

    sub asin { atan2($_[0], sqrt(1 - $_[0] * $_[0])) }

=item sleep EXPR
X<sleep> X<pause>

=item sleep

Causes the script to sleep for EXPR seconds, or forever if no EXPR.
May be interrupted if the process receives a signal such as C<SIGALRM>.
Returns the number of seconds actually slept.  You probably cannot
mix C<alarm> and C<sleep> calls, because C<sleep> is often implemented
using C<alarm>.

On some older systems, it may sleep up to a full second less than what
you requested, depending on how it counts seconds.  Most modern systems
always sleep the full amount.  They may appear to sleep longer than that,
however, because your process might not be scheduled right away in a
busy multitasking system.

For delays of finer granularity than one second, you may use Perl's
C<syscall> interface to access setitimer(2) if your system supports
it, or else see L</select> above.  The Time::HiRes module (from CPAN,
and starting from Perl 5.8 part of the standard distribution) may also
help.

See also the POSIX module's C<pause> function.

=item socket SOCKET,DOMAIN,TYPE,PROTOCOL
X<socket>

Opens a socket of the specified kind and attaches it to filehandle
SOCKET.  DOMAIN, TYPE, and PROTOCOL are specified the same as for
the system call of the same name.  You should C<use Socket> first
to get the proper definitions imported.  Ver los ejemplos en L<perlipc/"Sockets: Comunicación Cliente/Servidor">.

En sistemas que soportan la bandera cerrar-en-ejecución sobre ficheros, la bandera será puesta para el nuevo descriptor de fichero abierto, determinado por el valor de $^F.  Ver L<perlvar/$^F>.

=item socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL
X<socketpair>

Creates an unnamed pair of sockets in the specified domain, of the
specified type.  DOMAIN, TYPE, and PROTOCOL are specified the same as
for the system call of the same name.  If unimplemented, yields a fatal
error.  Returns true if successful.

On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptors, as determined by the value
of $^F.  Ver L<perlvar/$^F>.

Some systems defined C<pipe> in terms of C<socketpair>, in which a call
to C<pipe(Rdr, Wtr)> is essentially:

    use Socket;
    socketpair(Rdr, Wtr, AF_UNIX, SOCK_STREAM, PF_UNSPEC);
    shutdown(Rdr, 1);        # no more writing for reader
    shutdown(Wtr, 0);        # no more reading for writer

See L<perlipc> for an example of socketpair use.  Perl 5.8 and later will
emulate socketpair using IP sockets to localhost if your system implements
sockets but not socketpair.

=item sort SUBNAME LIST
X<sort> X<qsort> X<quicksort> X<mergesort>

=item sort BLOCK LIST

=item sort LIST

In list context, this sorts the LIST and returns the sorted list value.
In scalar context, the behaviour of C<sort()> is undefined.

If SUBNAME or BLOCK is omitted, C<sort>s in standard string comparison
order.  If SUBNAME is specified, it gives the name of a subroutine
that returns an integer less than, equal to, or greater than C<0>,
depending on how the elements of the list are to be ordered.  (The C<<
<=> >> and C<cmp> operators are extremely useful in such routines.)
SUBNAME may be a scalar variable name (unsubscripted), in which case
the value provides the name of (or a reference to) the actual
subroutine to use.  In place of a SUBNAME, you can provide a BLOCK as
an anonymous, in-line sort subroutine.

If the subroutine's prototype is C<($$)>, the elements to be compared
are passed by reference in C<@_>, as for a normal subroutine.  This is
slower than unprototyped subroutines, where the elements to be
compared are passed into the subroutine
as the package global variables $a and $b (see example below).  Note that
in the latter case, it is usually counter-productive to declare $a and
$b as lexicals.

In either case, the subroutine may not be recursive.  The values to be
compared are always passed by reference and should not be modified.

You also cannot exit out of the sort block or subroutine using any of the
loop control operators described in L<perlsyn> or with C<goto>.

When C<use locale> is in effect, C<sort LIST> sorts LIST according to the
current collation locale.  See L<perllocale>.

sort() returns aliases into the original list, much as a for loop's index
variable aliases the list elements.  That is, modifying an element of a
list returned by sort() (for example, in a C<foreach>, C<map> or C<grep>)
actually modifies the element in the original list.  This is usually
something to be avoided when writing clear code.

Perl 5.6 and earlier used a quicksort algorithm to implement sort.
That algorithm was not stable, and I<could> go quadratic.  (A I<stable> sort
preserves the input order of elements that compare equal.  Although
quicksort's run time is O(NlogN) when averaged over all arrays of
length N, the time can be O(N**2), I<quadratic> behavior, for some
inputs.)  In 5.7, the quicksort implementation was replaced with
a stable mergesort algorithm whose worst-case behavior is O(NlogN).
But benchmarks indicated that for some inputs, on some platforms,
the original quicksort was faster.  5.8 has a sort pragma for
limited control of the sort.  Its rather blunt control of the
underlying algorithm may not persist into future Perls, but the
ability to characterize the input or output in implementation
independent ways quite probably will.  See L<sort>.

Ejemplos:

    # sort lexically
    @articles = sort @files;

    # same thing, but with explicit sort routine
    @articles = sort {$a cmp $b} @files;

    # now case-insensitively
    @articles = sort {uc($a) cmp uc($b)} @files;

    # same thing in reversed order
    @articles = sort {$b cmp $a} @files;

    # sort numerically ascending
    @articles = sort {$a <=> $b} @files;

    # sort numerically descending
    @articles = sort {$b <=> $a} @files;

    # this sorts the %age hash by value instead of key
    # using an in-line function
    @eldest = sort { $age{$b} <=> $age{$a} } keys %age;

    # sort using explicit subroutine name
    sub byage {
	$age{$a} <=> $age{$b};	# presuming numeric
    }
    @sortedclass = sort byage @class;

    sub backwards { $b cmp $a }
    @harry  = qw(dog cat x Cain Abel);
    @george = qw(gone chased yz Punished Axed);
    print sort @harry;
	    # prints AbelCaincatdogx
    print sort backwards @harry;
	    # prints xdogcatCainAbel
    print sort @george, 'to', @harry;
	    # prints AbelAxedCainPunishedcatchaseddoggonetoxyz

    # inefficiently sort by descending numeric compare using
    # the first integer after the first = sign, or the
    # whole record case-insensitively otherwise

    @new = sort {
	($b =~ /=(\d+)/)[0] <=> ($a =~ /=(\d+)/)[0]
			    ||
	            uc($a)  cmp  uc($b)
    } @old;

    # same thing, but much more efficiently;
    # we'll build auxiliary indices instead
    # for speed
    @nums = @caps = ();
    for (@old) {
	push @nums, /=(\d+)/;
	push @caps, uc($_);
    }

    @new = @old[ sort {
			$nums[$b] <=> $nums[$a]
				 ||
			$caps[$a] cmp $caps[$b]
		       } 0..$#old
	       ];

    # same thing, but without any temps
    @new = map { $_->[0] }
           sort { $b->[1] <=> $a->[1]
                           ||
                  $a->[2] cmp $b->[2]
           } map { [$_, /=(\d+)/, uc($_)] } @old;

    # using a prototype allows you to use any comparison subroutine
    # as a sort subroutine (including other package's subroutines)
    package other;
    sub backwards ($$) { $_[1] cmp $_[0]; }	# $a and $b are not set here

    package main;
    @new = sort other::backwards @old;

    # guarantee stability, regardless of algorithm
    use sort 'stable';
    @new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @old;

    # force use of mergesort (not portable outside Perl 5.8)
    use sort '_mergesort';  # note discouraging _
    @new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @old;

If you're using strict, you I<must not> declare $a
and $b as lexicals.  They are package globals.  That means
if you're in the C<main> package and type

    @articles = sort {$b <=> $a} @files;

then C<$a> and C<$b> are C<$main::a> and C<$main::b> (or C<$::a> and C<$::b>),
but if you're in the C<FooPack> package, it's the same as typing

    @articles = sort {$FooPack::b <=> $FooPack::a} @files;

The comparison function is required to behave.  If it returns
inconsistent results (sometimes saying C<$x[1]> is less than C<$x[2]> and
sometimes saying the opposite, for example) the results are not
well-defined.

Because C<< <=> >> returns C<undef> when either operand is C<NaN>
(not-a-number), and because C<sort> will trigger a fatal error unless the
result of a comparison is defined, when sorting with a comparison function
like C<< $a <=> $b >>, be careful about lists that might contain a C<NaN>.
The following example takes advantage of the fact that C<NaN != NaN> to
eliminate any C<NaN>s from the input.

    @result = sort { $a <=> $b } grep { $_ == $_ } @input;

=item splice ARRAY,OFFSET,LENGTH,LIST
X<splice>

=item splice ARRAY,OFFSET,LENGTH

=item splice ARRAY,OFFSET

=item splice ARRAY

Removes the elements designated by OFFSET and LENGTH from an array, and
replaces them with the elements of LIST, if any.  In list context,
returns the elements removed from the array.  In scalar context,
returns the last element removed, or C<undef> if no elements are
removed.  The array grows or shrinks as necessary.
If OFFSET is negative then it starts that far from the end of the array.
If LENGTH is omitted, removes everything from OFFSET onward.
If LENGTH is negative, removes the elements from OFFSET onward
except for -LENGTH elements at the end of the array.
If both OFFSET and LENGTH are omitted, removes everything. If OFFSET is
past the end of the array, perl issues a warning, and splices at the
end of the array.

The following equivalences hold (assuming C<< $[ == 0 and $#a >= $i >> )

    push(@a,$x,$y)	splice(@a,@a,0,$x,$y)
    pop(@a)		splice(@a,-1)
    shift(@a)		splice(@a,0,1)
    unshift(@a,$x,$y)	splice(@a,0,0,$x,$y)
    $a[$i] = $y		splice(@a,$i,1,$y)

Example, assuming array lengths are passed before arrays:

    sub aeq {	# compare two list values
	my(@a) = splice(@_,0,shift);
	my(@b) = splice(@_,0,shift);
	return 0 unless @a == @b;	# same len?
	while (@a) {
	    return 0 if pop(@a) ne pop(@b);
	}
	return 1;
    }
    if (&aeq($len,@foo[1..$len],0+@bar,@bar)) { ... }

=item split /PATTERN/,EXPR,LIMIT
X<split>

=item split /PATTERN/,EXPR

=item split /PATTERN/

=item split

Splits the string EXPR into a list of strings and returns that list.  By
default, empty leading fields are preserved, and empty trailing ones are
deleted.  (If all fields are empty, they are considered to be trailing.)

In scalar context, returns the number of fields found and splits into
the C<@_> array.  Use of split in scalar context is deprecated, however,
because it clobbers your subroutine arguments.

If EXPR is omitted, splits the C<$_> string.  If PATTERN is also omitted,
splits on whitespace (after skipping any leading whitespace).  Anything
matching PATTERN is taken to be a delimiter separating the fields.  (Note
that the delimiter may be longer than one character.)

If LIMIT is specified and positive, it represents the maximum number
of fields the EXPR will be split into, though the actual number of
fields returned depends on the number of times PATTERN matches within
EXPR.  If LIMIT is unspecified or zero, trailing null fields are
stripped (which potential users of C<pop> would do well to remember).
If LIMIT is negative, it is treated as if an arbitrarily large LIMIT
had been specified.  Note that splitting an EXPR that evaluates to the
empty string always returns the empty list, regardless of the LIMIT
specified.

A pattern matching the null string (not to be confused with
a null pattern C<//>, which is just one member of the set of patterns
matching a null string) will split the value of EXPR into separate
characters at each point it matches that way.  Por ejemplo:

    print join(':', split(/ */, 'hi there'));

produces the output 'h:i:t:h:e:r:e'.

As a special case for C<split>, using the empty pattern C<//> specifically
matches only the null string, and is not be confused with the regular use
of C<//> to mean "the last successful pattern match".  So, for C<split>,
the following:

    print join(':', split(//, 'hi there'));

produces the output 'h:i: :t:h:e:r:e'.

Empty leading (or trailing) fields are produced when there are positive
width matches at the beginning (or end) of the string; a zero-width match
at the beginning (or end) of the string does not produce an empty field.
Por ejemplo:

   print join(':', split(/(?=\w)/, 'hi there!'));

produces the output 'h:i :t:h:e:r:e!'.

The LIMIT parameter can be used to split a line partially

    ($login, $passwd, $remainder) = split(/:/, $_, 3);

When assigning to a list, if LIMIT is omitted, or zero, Perl supplies
a LIMIT one larger than the number of variables in the list, to avoid
unnecessary work.  For the list above LIMIT would have been 4 by
default.  In time critical applications it behooves you not to split
into more fields than you really need.

If the PATTERN contains parentheses, additional list elements are
created from each matching substring in the delimiter.

    split(/([,-])/, "1-10,20", 3);

produces the list value

    (1, '-', 10, ',', 20)

If you had the entire header of a normal Unix email message in $header,
you could split it up into fields and their values this way:

    $header =~ s/\n\s+/ /g;  # fix continuation lines
    %hdrs   =  (UNIX_FROM => split /^(\S*?):\s*/m, $header);

The pattern C</PATTERN/> may be replaced with an expression to specify
patterns that vary at runtime.  (To do runtime compilation only once,
use C</$variable/o>.)

As a special case, specifying a PATTERN of space (S<C<' '>>) will split on
white space just as C<split> with no arguments does.  Thus, S<C<split(' ')>> can
be used to emulate B<awk>'s default behavior, whereas S<C<split(/ /)>>
will give you as many null initial fields as there are leading spaces.
A C<split> on C</\s+/> is like a S<C<split(' ')>> except that any leading
whitespace produces a null first field.  A C<split> with no arguments
really does a S<C<split(' ', $_)>> internally.

A PATTERN of C</^/> is treated as if it were C</^/m>, since it isn't
much use otherwise.

Ejemplo:

    open(PASSWD, '/etc/passwd');
    while (<PASSWD>) {
        chomp;
        ($login, $passwd, $uid, $gid,
         $gcos, $home, $shell) = split(/:/);
	#...
    }

As with regular pattern matching, any capturing parentheses that are not
matched in a C<split()> will be set to C<undef> when returned:

    @fields = split /(A)|B/, "1A2B3";
    # @fields is (1, 'A', 2, undef, 3)

=item sprintf FORMAT, LIST
X<sprintf>

Returns a string formatted by the usual C<printf> conventions of the C
library function C<sprintf>.  See below for more details
and see L<sprintf(3)> or L<printf(3)> on your system for an explanation of
the general principles.

Por ejemplo:

        # Format number with up to 8 leading zeroes
        $result = sprintf("%08d", $number);

        # Round number to 3 digits after decimal point
        $rounded = sprintf("%.3f", $number);

Perl does its own C<sprintf> formatting--it emulates the C
function C<sprintf>, but it doesn't use it (except for floating-point
numbers, and even then only the standard modifiers are allowed).  As a
result, any non-standard extensions in your local C<sprintf> are not
available from Perl.

Unlike C<printf>, C<sprintf> does not do what you probably mean when you
pass it an array as your first argument. The array is given scalar context,
and instead of using the 0th element of the array as the format, Perl will
use the count of elements in the array as the format, which is almost never
useful.

Perl's C<sprintf> permits the following universally-known conversions:

   %%	a percent sign
   %c	a character with the given number
   %s	a string
   %d	a signed integer, in decimal
   %u	an unsigned integer, in decimal
   %o	an unsigned integer, in octal
   %x	an unsigned integer, in hexadecimal
   %e	a floating-point number, in scientific notation
   %f	a floating-point number, in fixed decimal notation
   %g	a floating-point number, in %e or %f notation

In addition, Perl permits the following widely-supported conversions:

   %X	like %x, but using upper-case letters
   %E	like %e, but using an upper-case "E"
   %G	like %g, but with an upper-case "E" (if applicable)
   %b	an unsigned integer, in binary
   %p	a pointer (outputs the Perl value's address in hexadecimal)
   %n	special: *stores* the number of characters output so far
        into the next variable in the parameter list

Finally, for backward (and we do mean "backward") compatibility, Perl
permits these unnecessary but widely-supported conversions:

   %i	a synonym for %d
   %D	a synonym for %ld
   %U	a synonym for %lu
   %O	a synonym for %lo
   %F	a synonym for %f

Note that the number of exponent digits in the scientific notation produced
by C<%e>, C<%E>, C<%g> and C<%G> for numbers with the modulus of the
exponent less than 100 is system-dependent: it may be three or less
(zero-padded as necessary).  In other words, 1.23 times ten to the
99th may be either "1.23e99" or "1.23e099".

Between the C<%> and the format letter, you may specify a number of
additional attributes controlling the interpretation of the format.
In order, these are:

=over 4

=item format parameter index

An explicit format parameter index, such as C<2$>. By default sprintf
will format the next unused argument in the list, but this allows you
to take the arguments out of order, e.g.:

  printf '%2$d %1$d', 12, 34;      # prints "34 12"
  printf '%3$d %d %1$d', 1, 2, 3;  # prints "3 1 1"

=item flags

one or more of:
   space   prefix positive number with a space
   +       prefix positive number with a plus sign
   -       left-justify within the field
   0       use zeros, not spaces, to right-justify
   #       prefix non-zero octal with "0", non-zero hex with "0x",
           non-zero binary with "0b"

Por ejemplo:

  printf '<% d>', 12;   # prints "< 12>"
  printf '<%+d>', 12;   # prints "<+12>"
  printf '<%6s>', 12;   # prints "<    12>"
  printf '<%-6s>', 12;  # prints "<12    >"
  printf '<%06s>', 12;  # prints "<000012>"
  printf '<%#x>', 12;   # prints "<0xc>"

=item vector flag

This flag tells perl to interpret the supplied string as a vector of
integers, one for each character in the string. Perl applies the format to
each integer in turn, then joins the resulting strings with a separator (a
dot C<.> by default). This can be useful for displaying ordinal values of
characters in arbitrary strings:

  printf "%vd", "AB\x{100}";           # prints "65.66.256"
  printf "version is v%vd\n", $^V;     # Perl's version

Put an asterisk C<*> before the C<v> to override the string to
use to separate the numbers:

  printf "address is %*vX\n", ":", $addr;   # IPv6 address
  printf "bits are %0*v8b\n", " ", $bits;   # random bitstring

You can also explicitly specify the argument number to use for
the join string using e.g. C<*2$v>:

  printf '%*4$vX %*4$vX %*4$vX', @addr[1..3], ":";   # 3 IPv6 addresses

=item (minimum) width

Arguments are usually formatted to be only as wide as required to
display the given value. You can override the width by putting
a number here, or get the width from the next argument (with C<*>)
or from a specified argument (with e.g. C<*2$>):

  printf '<%s>', "a";       # prints "<a>"
  printf '<%6s>', "a";      # prints "<     a>"
  printf '<%*s>', 6, "a";   # prints "<     a>"
  printf '<%*2$s>', "a", 6; # prints "<     a>"
  printf '<%2s>', "long";   # prints "<long>" (does not truncate)

If a field width obtained through C<*> is negative, it has the same
effect as the C<-> flag: left-justification.

=item precision, or maximum width
X<precision>

You can specify a precision (for numeric conversions) or a maximum
width (for string conversions) by specifying a C<.> followed by a number.
For floating point formats, with the exception of 'g' and 'G', this specifies
the number of decimal places to show (the default being 6), e.g.:

  # these examples are subject to system-specific variation
  printf '<%f>', 1;    # prints "<1.000000>"
  printf '<%.1f>', 1;  # prints "<1.0>"
  printf '<%.0f>', 1;  # prints "<1>"
  printf '<%e>', 10;   # prints "<1.000000e+01>"
  printf '<%.1e>', 10; # prints "<1.0e+01>"

For 'g' and 'G', this specifies the maximum number of digits to show,
including prior to the decimal point as well as after it, e.g.:

  # these examples are subject to system-specific variation
  printf '<%g>', 1;        # prints "<1>"
  printf '<%.10g>', 1;     # prints "<1>"
  printf '<%g>', 100;      # prints "<100>"
  printf '<%.1g>', 100;    # prints "<1e+02>"
  printf '<%.2g>', 100.01; # prints "<1e+02>"
  printf '<%.5g>', 100.01; # prints "<100.01>"
  printf '<%.4g>', 100.01; # prints "<100>"

For integer conversions, specifying a precision implies that the
output of the number itself should be zero-padded to this width:

  printf '<%.6x>', 1;      # prints "<000001>"
  printf '<%#.6x>', 1;     # prints "<0x000001>"
  printf '<%-10.6x>', 1;   # prints "<000001    >"

For string conversions, specifying a precision truncates the string
to fit in the specified width:

  printf '<%.5s>', "truncated";   # prints "<trunc>"
  printf '<%10.5s>', "truncated"; # prints "<     trunc>"

You can also get the precision from the next argument using C<.*>:

  printf '<%.6x>', 1;       # prints "<000001>"
  printf '<%.*x>', 6, 1;    # prints "<000001>"

You cannot currently get the precision from a specified number,
but it is intended that this will be possible in the future using
e.g. C<.*2$>:

  printf '<%.*2$x>', 1, 6;   # INVALID, but in future will print "<000001>"

=item size

For numeric conversions, you can specify the size to interpret the
number as using C<l>, C<h>, C<V>, C<q>, C<L>, or C<ll>. For integer
conversions (C<d u o x X b i D U O>), numbers are usually assumed to be
whatever the default integer size is on your platform (usually 32 or 64
bits), but you can override this to use instead one of the standard C types,
as supported by the compiler used to build Perl:

   l           interpret integer as C type "long" or "unsigned long"
   h           interpret integer as C type "short" or "unsigned short"
   q, L or ll  interpret integer as C type "long long", "unsigned long long".
               or "quads" (typically 64-bit integers)

The last will produce errors if Perl does not understand "quads" in your
installation. (This requires that either the platform natively supports quads
or Perl was specifically compiled to support quads.) You can find out
whether your Perl supports quads via L<Config>:

	use Config;
	($Config{use64bitint} eq 'define' || $Config{longsize} >= 8) &&
		print "quads\n";

For floating point conversions (C<e f g E F G>), numbers are usually assumed
to be the default floating point size on your platform (double or long double),
but you can force 'long double' with C<q>, C<L>, or C<ll> if your
platform supports them. You can find out whether your Perl supports long
doubles via L<Config>:

	use Config;
	$Config{d_longdbl} eq 'define' && print "long doubles\n";

You can find out whether Perl considers 'long double' to be the default
floating point size to use on your platform via L<Config>:

        use Config;
        ($Config{uselongdouble} eq 'define') &&
                print "long doubles by default\n";

It can also be the case that long doubles and doubles are the same thing:

        use Config;
        ($Config{doublesize} == $Config{longdblsize}) &&
                print "doubles are long doubles\n";

The size specifier C<V> has no effect for Perl code, but it is supported
for compatibility with XS code; it means 'use the standard size for
a Perl integer (or floating-point number)', which is already the
default for Perl code.

=item order of arguments

Normally, sprintf takes the next unused argument as the value to
format for each format specification. If the format specification
uses C<*> to require additional arguments, these are consumed from
the argument list in the order in which they appear in the format
specification I<before> the value to format. Where an argument is
specified using an explicit index, this does not affect the normal
order for the arguments (even when the explicitly specified index
would have been the next argument in any case).

So:

  printf '<%*.*s>', $a, $b, $c;

would use C<$a> for the width, C<$b> for the precision and C<$c>
as the value to format, while:

  print '<%*1$.*s>', $a, $b;

would use C<$a> for the width and the precision, and C<$b> as the
value to format.

Here are some more examples - beware that when using an explicit
index, the C<$> may need to be escaped:

  printf "%2\$d %d\n",    12, 34;		# will print "34 12\n"
  printf "%2\$d %d %d\n", 12, 34;		# will print "34 12 34\n"
  printf "%3\$d %d %d\n", 12, 34, 56;		# will print "56 12 34\n"
  printf "%2\$*3\$d %d\n", 12, 34, 3;		# will print " 34 12\n"

=back

If C<use locale> is in effect, the character used for the decimal
point in formatted real numbers is affected by the LC_NUMERIC locale.
See L<perllocale>.

=item sqrt EXPR
X<sqrt> X<root> X<square root>

=item sqrt

Return the square root of EXPR.  If EXPR is omitted, returns square
root of C<$_>.  Only works on non-negative operands, unless you've
loaded the standard Math::Complex module.

    use Math::Complex;
    print sqrt(-2);    # prints 1.4142135623731i

=item srand EXPR
X<srand> X<seed> X<randseed>

=item srand

Sets the random number seed for the C<rand> operator.

The point of the function is to "seed" the C<rand> function so that
C<rand> can produce a different sequence each time you run your
program.

If srand() is not called explicitly, it is called implicitly at the
first use of the C<rand> operator.  However, this was not the case in
versions of Perl before 5.004, so if your script will run under older
Perl versions, it should call C<srand>.

Most programs won't even call srand() at all, except those that
need a cryptographically-strong starting point rather than the
generally acceptable default, which is based on time of day,
process ID, and memory allocation, or the F</dev/urandom> device,
if available.

You can call srand($seed) with the same $seed to reproduce the
I<same> sequence from rand(), but this is usually reserved for
generating predictable results for testing or debugging.
Otherwise, don't call srand() more than once in your program.

Do B<not> call srand() (i.e. without an argument) more than once in
a script.  The internal state of the random number generator should
contain more entropy than can be provided by any seed, so calling
srand() again actually I<loses> randomness.

Most implementations of C<srand> take an integer and will silently
truncate decimal numbers.  This means C<srand(42)> will usually
produce the same results as C<srand(42.1)>.  To be safe, always pass
C<srand> an integer.

In versions of Perl prior to 5.004 the default seed was just the
current C<time>.  This isn't a particularly good seed, so many old
programs supply their own seed value (often C<time ^ $$> or C<time ^
($$ + ($$ << 15))>), but that isn't necessary any more.

For cryptographic purposes, however, you need something much more random 
than the default seed.  Checksumming the compressed output of one or more
rapidly changing operating system status programs is the usual method.  Por ejemplo:

    srand (time ^ $$ ^ unpack "%L*", `ps axww | gzip`);

If you're particularly concerned with this, see the C<Math::TrulyRandom>
module in CPAN.

Frequently called programs (like CGI scripts) that simply use

    time ^ $$

for a seed can fall prey to the mathematical property that

    a^b == (a+1)^(b+1)

one-third of the time.  Así que no lo haga.

=item stat FILEHANDLE
X<stat> X<file, status>

=item stat EXPR

=item stat

Returns a 13-element list giving the status info for a file, either
the file opened via FILEHANDLE, or named by EXPR.  If EXPR is omitted,
it stats C<$_>.  Returns a null list if the stat fails.  Typically used
as follows:

    ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
       $atime,$mtime,$ctime,$blksize,$blocks)
           = stat($filename);

Not all fields are supported on all filesystem types.  Here are the
meanings of the fields:

  0 dev      device number of filesystem
  1 ino      inode number
  2 mode     file mode  (type and permissions)
  3 nlink    number of (hard) links to the file
  4 uid      numeric user ID of file's owner
  5 gid      numeric group ID of file's owner
  6 rdev     the device identifier (special files only)
  7 size     total size of file, in bytes
  8 atime    last access time in seconds since the epoch
  9 mtime    last modify time in seconds since the epoch
 10 ctime    inode change time in seconds since the epoch (*)
 11 blksize  preferred block size for file system I/O
 12 blocks   actual number of blocks allocated

(The epoch was at 00:00 January 1, 1970 GMT.)

(*) Not all fields are supported on all filesystem types. Notably, the
ctime field is non-portable.  In particular, you cannot expect it to be a
"creation time", see L<perlport/"Files and Filesystems"> for details.

If C<stat> is passed the special filehandle consisting of an underline, no
stat is done, but the current contents of the stat structure from the
last C<stat>, C<lstat>, or filetest are returned.  Ejemplo:

    if (-x $file && (($d) = stat(_)) && $d < 0) {
	print "$file is executable NFS file\n";
    }

(This works on machines only for which the device number is negative
under NFS.)

Because the mode contains both the file type and its permissions, you
should mask off the file type portion and (s)printf using a C<"%o">
if you want to see the real permissions.

    $mode = (stat($filename))[2];
    printf "Permissions are %04o\n", $mode & 07777;

In scalar context, C<stat> returns a boolean value indicating success
or failure, and, if successful, sets the information associated with
the special filehandle C<_>.

The File::stat module provides a convenient, by-name access mechanism:

    use File::stat;
    $sb = stat($filename);
    printf "File is %s, size is %s, perm %04o, mtime %s\n",
	$filename, $sb->size, $sb->mode & 07777,
	scalar localtime $sb->mtime;

You can import symbolic mode constants (C<S_IF*>) and functions
(C<S_IS*>) from the Fcntl module:

    use Fcntl ':mode';

    $mode = (stat($filename))[2];

    $user_rwx      = ($mode & S_IRWXU) >> 6;
    $group_read    = ($mode & S_IRGRP) >> 3;
    $other_execute =  $mode & S_IXOTH;

    printf "Permissions are %04o\n", S_IMODE($mode), "\n";

    $is_setuid     =  $mode & S_ISUID;
    $is_setgid     =  S_ISDIR($mode);

You could write the last two using the C<-u> and C<-d> operators.
The commonly available C<S_IF*> constants are

    # Permissions: read, write, execute, for user, group, others.

    S_IRWXU S_IRUSR S_IWUSR S_IXUSR
    S_IRWXG S_IRGRP S_IWGRP S_IXGRP
    S_IRWXO S_IROTH S_IWOTH S_IXOTH

    # Setuid/Setgid/Stickiness/SaveText.
    # Note that the exact meaning of these is system dependent.

    S_ISUID S_ISGID S_ISVTX S_ISTXT

    # File types.  Not necessarily all are available on your system.

    S_IFREG S_IFDIR S_IFLNK S_IFBLK S_IFCHR S_IFIFO S_IFSOCK S_IFWHT S_ENFMT

    # The following are compatibility aliases for S_IRUSR, S_IWUSR, S_IXUSR.

    S_IREAD S_IWRITE S_IEXEC

and the C<S_IF*> functions are

    S_IMODE($mode)	the part of $mode containing the permission bits
			and the setuid/setgid/sticky bits

    S_IFMT($mode)	the part of $mode containing the file type
			which can be bit-anded with e.g. S_IFREG
                        or with the following functions

    # The operators -f, -d, -l, -b, -c, -p, and -S.

    S_ISREG($mode) S_ISDIR($mode) S_ISLNK($mode)
    S_ISBLK($mode) S_ISCHR($mode) S_ISFIFO($mode) S_ISSOCK($mode)

    # No direct -X operator counterpart, but for the first one
    # the -g operator is often equivalent.  The ENFMT stands for
    # record flocking enforcement, a platform-dependent feature.

    S_ISENFMT($mode) S_ISWHT($mode)

See your native chmod(2) and stat(2) documentation for more details
about the C<S_*> constants.  To get status info for a symbolic link
instead of the target file behind the link, use the C<lstat> function.

=item study SCALAR
X<study>

=item study

Takes extra time to study SCALAR (C<$_> if unspecified) in anticipation of
doing many pattern matches on the string before it is next modified.
This may or may not save time, depending on the nature and number of
patterns you are searching on, and on the distribution of character
frequencies in the string to be searched--you probably want to compare
run times with and without it to see which runs faster.  Those loops
that scan for many short constant strings (including the constant
parts of more complex patterns) will benefit most.  You may have only
one C<study> active at a time--if you study a different scalar the first
is "unstudied".  (The way C<study> works is this: a linked list of every
character in the string to be searched is made, so we know, for
example, where all the C<'k'> characters are.  From each search string,
the rarest character is selected, based on some static frequency tables
constructed from some C programs and English text.  Only those places
that contain this "rarest" character are examined.)

For example, here is a loop that inserts index producing entries
before any line containing a certain pattern:

    while (<>) {
	study;
	print ".IX foo\n" 	if /\bfoo\b/;
	print ".IX bar\n" 	if /\bbar\b/;
	print ".IX blurfl\n" 	if /\bblurfl\b/;
	# ...
	print;
    }

In searching for C</\bfoo\b/>, only those locations in C<$_> that contain C<f>
will be looked at, because C<f> is rarer than C<o>.  In general, this is
a big win except in pathological cases.  The only question is whether
it saves you more time than it took to build the linked list in the
first place.

Note that if you have to look for strings that you don't know till
runtime, you can build an entire loop as a string and C<eval> that to
avoid recompiling all your patterns all the time.  Together with
undefining C<$/> to input entire files as one record, this can be very
fast, often faster than specialized programs like fgrep(1).  The following
scans a list of files (C<@files>) for a list of words (C<@words>), and prints
out the names of those files that contain a match:

    $search = 'while (<>) { study;';
    foreach $word (@words) {
	$search .= "++\$seen{\$ARGV} if /\\b$word\\b/;\n";
    }
    $search .= "}";
    @ARGV = @files;
    undef $/;
    eval $search;		# this screams
    $/ = "\n";		# put back to normal input delimiter
    foreach $file (sort keys(%seen)) {
	print $file, "\n";
    }

=item sub NAME BLOCK
X<sub>

=item sub NAME (PROTO) BLOCK

=item sub NAME : ATTRS BLOCK

=item sub NAME (PROTO) : ATTRS BLOCK

This is subroutine definition, not a real function I<per se>.
Without a BLOCK it's just a forward declaration.  Without a NAME,
it's an anonymous function declaration, and does actually return
a value: the CODE ref of the closure you just created.

See L<perlsub> and L<perlref> for details about subroutines and
references, and L<attributes> and L<Attribute::Handlers> for more
information about attributes.

=item substr EXPR,OFFSET,LENGTH,REPLACEMENT
X<substr> X<substring> X<mid> X<left> X<right>

=item substr EXPR,OFFSET,LENGTH

=item substr EXPR,OFFSET

Extracts a substring out of EXPR and returns it.  First character is at
offset C<0>, or whatever you've set C<$[> to (but don't do that).
If OFFSET is negative (or more precisely, less than C<$[>), starts
that far from the end of the string.  If LENGTH is omitted, returns
everything to the end of the string.  If LENGTH is negative, leaves that
many characters off the end of the string.

You can use the substr() function as an lvalue, in which case EXPR
must itself be an lvalue.  If you assign something shorter than LENGTH,
the string will shrink, and if you assign something longer than LENGTH,
the string will grow to accommodate it.  To keep the string the same
length you may need to pad or chop your value using C<sprintf>.

If OFFSET and LENGTH specify a substring that is partly outside the
string, only the part within the string is returned.  If the substring
is beyond either end of the string, substr() returns the undefined
value and produces a warning.  When used as an lvalue, specifying a
substring that is entirely outside the string is a fatal error.
Here's an example showing the behavior for boundary cases:

    my $name = 'fred';
    substr($name, 4) = 'dy';		# $name is now 'freddy'
    my $null = substr $name, 6, 2;	# returns '' (no warning)
    my $oops = substr $name, 7;		# returns undef, with warning
    substr($name, 7) = 'gap';		# fatal error

An alternative to using substr() as an lvalue is to specify the
replacement string as the 4th argument.  This allows you to replace
parts of the EXPR and return what was there before in one operation,
just as you can with splice().


=item symlink OLDFILE,NEWFILE
X<symlink> X<link> X<symbolic link> X<link, symbolic>

Creates a new filename symbolically linked to the old filename.
Returns C<1> for success, C<0> otherwise.  On systems that don't support
symbolic links, produces a fatal error at run time.  To check for that,
use eval:

    $symlink_exists = eval { symlink("",""); 1 };

=item syscall NUMBER, LIST
X<syscall> X<system call>

Calls the system call specified as the first element of the list,
passing the remaining elements as arguments to the system call.  If
unimplemented, produces a fatal error.  The arguments are interpreted
as follows: if a given argument is numeric, the argument is passed as
an int.  If not, the pointer to the string value is passed.  You are
responsible to make sure a string is pre-extended long enough to
receive any result that might be written into a string.  You can't use a
string literal (or other read-only string) as an argument to C<syscall>
because Perl has to assume that any string pointer might be written
through.  If your
integer arguments are not literals and have never been interpreted in a
numeric context, you may need to add C<0> to them to force them to look
like numbers.  This emulates the C<syswrite> function (or vice versa):

    require 'syscall.ph';		# may need to run h2ph
    $s = "hi there\n";
    syscall(&SYS_write, fileno(STDOUT), $s, length $s);

Note that Perl supports passing of up to only 14 arguments to your system call,
which in practice should usually suffice.

Syscall returns whatever value returned by the system call it calls.
If the system call fails, C<syscall> returns C<-1> and sets C<$!> (errno).
Note that some system calls can legitimately return C<-1>.  The proper
way to handle such calls is to assign C<$!=0;> before the call and
check the value of C<$!> if syscall returns C<-1>.

There's a problem with C<syscall(&SYS_pipe)>: it returns the file
number of the read end of the pipe it creates.  There is no way
to retrieve the file number of the other end.  You can avoid this
problem by using C<pipe> instead.

=item sysopen FILEHANDLE,FILENAME,MODE
X<sysopen>

=item sysopen FILEHANDLE,FILENAME,MODE,PERMS

Opens the file whose filename is given by FILENAME, and associates it
with FILEHANDLE.  If FILEHANDLE is an expression, its value is used as
the name of the real filehandle wanted.  This function calls the
underlying operating system's C<open> function with the parameters
FILENAME, MODE, PERMS.

The possible values and flag bits of the MODE parameter are
system-dependent; they are available via the standard module C<Fcntl>.
See the documentation of your operating system's C<open> to see which
values and flag bits are available.  You may combine several flags
using the C<|>-operator.

Some of the most common values are C<O_RDONLY> for opening the file in
read-only mode, C<O_WRONLY> for opening the file in write-only mode,
and C<O_RDWR> for opening the file in read-write mode.
X<O_RDONLY> X<O_RDWR> X<O_WRONLY>

For historical reasons, some values work on almost every system
supported by perl: zero means read-only, one means write-only, and two
means read/write.  We know that these values do I<not> work under
OS/390 & VM/ESA Unix and on the Macintosh; you probably don't want to
use them in new code.

If the file named by FILENAME does not exist and the C<open> call creates
it (typically because MODE includes the C<O_CREAT> flag), then the value of
PERMS specifies the permissions of the newly created file.  If you omit
the PERMS argument to C<sysopen>, Perl uses the octal value C<0666>.
These permission values need to be in octal, and are modified by your
process's current C<umask>.
X<O_CREAT>

In many systems the C<O_EXCL> flag is available for opening files in
exclusive mode.  This is B<not> locking: exclusiveness means here that
if the file already exists, sysopen() fails.  C<O_EXCL> may not work
on network filesystems, and has no effect unless the C<O_CREAT> flag
is set as well.  Setting C<O_CREAT|O_EXCL> prevents the file from
being opened if it is a symbolic link.  It does not protect against
symbolic links in the file's path.
X<O_EXCL>

Sometimes you may want to truncate an already-existing file.  This
can be done using the C<O_TRUNC> flag.  The behavior of
C<O_TRUNC> with C<O_RDONLY> is undefined.
X<O_TRUNC>

You should seldom if ever use C<0644> as argument to C<sysopen>, because
that takes away the user's option to have a more permissive umask.
Better to omit it.  See the perlfunc(1) entry on C<umask> for more
on this.

Note that C<sysopen> depends on the fdopen() C library function.
On many UNIX systems, fdopen() is known to fail when file descriptors
exceed a certain value, typically 255. If you need more file
descriptors than that, consider rebuilding Perl to use the C<sfio>
library, or perhaps using the POSIX::open() function.

See L<perlopentut> for a kinder, gentler explanation of opening files.

=item sysread FILEHANDLE,SCALAR,LENGTH,OFFSET
X<sysread>

=item sysread FILEHANDLE,SCALAR,LENGTH

Attempts to read LENGTH bytes of data into variable SCALAR from the
specified FILEHANDLE, using the system call read(2).  It bypasses
buffered IO, so mixing this with other kinds of reads, C<print>,
C<write>, C<seek>, C<tell>, or C<eof> can cause confusion because the
perlio or stdio layers usually buffers data.  Returns the number of
bytes actually read, C<0> at end of file, or undef if there was an
error (in the latter case C<$!> is also set).  SCALAR will be grown or
shrunk so that the last byte actually read is the last byte of the
scalar after the read.

An OFFSET may be specified to place the read data at some place in the
string other than the beginning.  A negative OFFSET specifies
placement at that many characters counting backwards from the end of
the string.  A positive OFFSET greater than the length of SCALAR
results in the string being padded to the required size with C<"\0">
bytes before the result of the read is appended.

There is no syseof() function, which is ok, since eof() doesn't work
very well on device files (like ttys) anyway.  Use sysread() and check
for a return value for 0 to decide whether you're done.

Note that if the filehandle has been marked as C<:utf8> Unicode
characters are read instead of bytes (the LENGTH, OFFSET, and the
return value of sysread() are in Unicode characters).
The C<:encoding(...)> layer implicitly introduces the C<:utf8> layer.
See L</binmode>, L</open>, and the C<open> pragma, L<open>.

=item sysseek FILEHANDLE,POSITION,WHENCE
X<sysseek> X<lseek>

Sets FILEHANDLE's system position in bytes using the system call
lseek(2).  FILEHANDLE may be an expression whose value gives the name
of the filehandle.  The values for WHENCE are C<0> to set the new
position to POSITION, C<1> to set the it to the current position plus
POSITION, and C<2> to set it to EOF plus POSITION (typically
negative).

Note the I<in bytes>: even if the filehandle has been set to operate
on characters (for example by using the C<:utf8> I/O layer), tell()
will return byte offsets, not character offsets (because implementing
that would render sysseek() very slow).

sysseek() bypasses normal buffered IO, so mixing this with reads (other
than C<sysread>, for example C<< <> >> or read()) C<print>, C<write>,
C<seek>, C<tell>, or C<eof> may cause confusion.

For WHENCE, you may also use the constants C<SEEK_SET>, C<SEEK_CUR>,
and C<SEEK_END> (start of the file, current position, end of the file)
from the Fcntl module.  Use of the constants is also more portable
than relying on 0, 1, and 2.  For example to define a "systell" function:

	use Fcntl 'SEEK_CUR';
	sub systell { sysseek($_[0], 0, SEEK_CUR) }

Returns the new position, or the undefined value on failure.  A position
of zero is returned as the string C<"0 but true">; thus C<sysseek> returns
true on success and false on failure, yet you can still easily determine
the new position.

=item system LIST
X<system> X<shell>

=item system PROGRAM LIST

Does exactly the same thing as C<exec LIST>, except that a fork is
done first, and the parent process waits for the child process to
complete.  Note that argument processing varies depending on the
number of arguments.  If there is more than one argument in LIST,
or if LIST is an array with more than one value, starts the program
given by the first element of the list with arguments given by the
rest of the list.  If there is only one scalar argument, the argument
is checked for shell metacharacters, and if there are any, the
entire argument is passed to the system's command shell for parsing
(this is C</bin/sh -c> on Unix platforms, but varies on other
platforms).  If there are no shell metacharacters in the argument,
it is split into words and passed directly to C<execvp>, which is
more efficient.

Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before any operation that may do a fork, but this may not be
supported on some platforms (see L<perlport>).  To be safe, you may need
to set C<$|> ($AUTOFLUSH in English) or call the C<autoflush()> method
of C<IO::Handle> on any open handles.

The return value is the exit status of the program as returned by the
C<wait> call.  To get the actual exit value, shift right by eight (see
below). See also L</exec>.  This is I<not> what you want to use to capture
the output from a command, for that you should use merely backticks or
C<qx//>, as described in L<perlop/"`STRING`">.  Return value of -1
indicates a failure to start the program or an error of the wait(2) system
call (inspect $! for the reason).

Like C<exec>, C<system> allows you to lie to a program about its name if
you use the C<system PROGRAM LIST> syntax.  Again, see L</exec>.

Since C<SIGINT> and C<SIGQUIT> are ignored during the execution of
C<system>, if you expect your program to terminate on receipt of these
signals you will need to arrange to do so yourself based on the return
value.

    @args = ("command", "arg1", "arg2");
    system(@args) == 0
	 or die "system @args failed: $?"

You can check all the failure possibilities by inspecting
C<$?> like this:

    if ($? == -1) {
	print "failed to execute: $!\n";
    }
    elsif ($? & 127) {
	printf "child died with signal %d, %s coredump\n",
	    ($? & 127),  ($? & 128) ? 'with' : 'without';
    }
    else {
	printf "child exited with value %d\n", $? >> 8;
    }

or more portably by using the W*() calls of the POSIX extension;
see L<perlport> for more information.

When the arguments get executed via the system shell, results
and return codes will be subject to its quirks and capabilities.
See L<perlop/"`STRING`"> and L</exec> for details.

=item syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET
X<syswrite>

=item syswrite FILEHANDLE,SCALAR,LENGTH

=item syswrite FILEHANDLE,SCALAR

Attempts to write LENGTH bytes of data from variable SCALAR to the
specified FILEHANDLE, using the system call write(2).  If LENGTH is
not specified, writes whole SCALAR.  It bypasses buffered IO, so
mixing this with reads (other than C<sysread())>, C<print>, C<write>,
C<seek>, C<tell>, or C<eof> may cause confusion because the perlio and
stdio layers usually buffers data.  Returns the number of bytes
actually written, or C<undef> if there was an error (in this case the
errno variable C<$!> is also set).  If the LENGTH is greater than the
available data in the SCALAR after the OFFSET, only as much data as is
available will be written.

An OFFSET may be specified to write the data from some part of the
string other than the beginning.  A negative OFFSET specifies writing
that many characters counting backwards from the end of the string.
In the case the SCALAR is empty you can use OFFSET but only zero offset.

Note that if the filehandle has been marked as C<:utf8>, Unicode
characters are written instead of bytes (the LENGTH, OFFSET, and the
return value of syswrite() are in UTF-8 encoded Unicode characters).
The C<:encoding(...)> layer implicitly introduces the C<:utf8> layer.
See L</binmode>, L</open>, and the C<open> pragma, L<open>.

=item tell FILEHANDLE
X<tell>

=item tell

Returns the current position I<in bytes> for FILEHANDLE, or -1 on
error.  FILEHANDLE may be an expression whose value gives the name of
the actual filehandle.  If FILEHANDLE is omitted, assumes the file
last read.

Note the I<in bytes>: even if the filehandle has been set to
operate on characters (for example by using the C<:utf8> open
layer), tell() will return byte offsets, not character offsets
(because that would render seek() and tell() rather slow).

The return value of tell() for the standard streams like the STDIN
depends on the operating system: it may return -1 or something else.
tell() on pipes, fifos, and sockets usually returns -1.

There is no C<systell> function.  Use C<sysseek(FH, 0, 1)> for that.

Do not use tell() (or other buffered I/O operations) on a file handle
that has been manipulated by sysread(), syswrite() or sysseek().
Those functions ignore the buffering, while tell() does not.

=item telldir DIRHANDLE
X<telldir>

Returns the current position of the C<readdir> routines on DIRHANDLE.
Value may be given to C<seekdir> to access a particular location in a
directory.  C<telldir> has the same caveats about possible directory
compaction as the corresponding system library routine.

=item tie VARIABLE,CLASSNAME,LIST
X<tie>

This function binds a variable to a package class that will provide the
implementation for the variable.  VARIABLE is the name of the variable
to be enchanted.  CLASSNAME is the name of a class implementing objects
of correct type.  Any additional arguments are passed to the C<new>
method of the class (meaning C<TIESCALAR>, C<TIEHANDLE>, C<TIEARRAY>,
or C<TIEHASH>).  Typically these are arguments such as might be passed
to the C<dbm_open()> function of C.  The object returned by the C<new>
method is also returned by the C<tie> function, which would be useful
if you want to access other methods in CLASSNAME.

Note that functions such as C<keys> and C<values> may return huge lists
when used on large objects, like DBM files.  You may prefer to use the
C<each> function to iterate over such.  Ejemplo:

    # imprime los desplazamientos en el fichero histórico
    use NDBM_File;
    tie(%HIST, 'NDBM_File', '/usr/lib/news/history', 1, 0);
    while (($clave,$valor) = each %HIST) {
	print $clave, ' = ', unpack('L',$valor), "\n";
    }
    untie(%HIST);

A class implementing a hash should have the following methods:

    TIEHASH classname, LIST
    FETCH this, key
    STORE this, key, value
    DELETE this, key
    CLEAR this
    EXISTS this, key
    FIRSTKEY this
    NEXTKEY this, lastkey
    SCALAR this
    DESTROY this
    UNTIE this

A class implementing an ordinary array should have the following methods:

    TIEARRAY classname, LIST
    FETCH this, key
    STORE this, key, value
    FETCHSIZE this
    STORESIZE this, count
    CLEAR this
    PUSH this, LIST
    POP this
    SHIFT this
    UNSHIFT this, LIST
    SPLICE this, offset, length, LIST
    EXTEND this, count
    DESTROY this
    UNTIE this

A class implementing a file handle should have the following methods:

    TIEHANDLE classname, LIST
    READ this, scalar, length, offset
    READLINE this
    GETC this
    WRITE this, scalar, length, offset
    PRINT this, LIST
    PRINTF this, format, LIST
    BINMODE this
    EOF this
    FILENO this
    SEEK this, position, whence
    TELL this
    OPEN this, mode, LIST
    CLOSE this
    DESTROY this
    UNTIE this

A class implementing a scalar should have the following methods:

    TIESCALAR classname, LIST
    FETCH this,
    STORE this, value
    DESTROY this
    UNTIE this

Not all methods indicated above need be implemented.  See L<perltie>,
L<Tie::Hash>, L<Tie::Array>, L<Tie::Scalar>, and L<Tie::Handle>.

Unlike C<dbmopen>, the C<tie> function will not use or require a module
for you--you need to do that explicitly yourself.  See L<DB_File>
or the F<Config> module for interesting C<tie> implementations.

For further details see L<perltie>, L<"tied VARIABLE">.

=item tied VARIABLE
X<tied>

Returns a reference to the object underlying VARIABLE (the same value
that was originally returned by the C<tie> call that bound the variable
to a package.)  Returns the undefined value if VARIABLE isn't tied to a
package.

=item time
X<time> X<epoch>

Returns the number of non-leap seconds since whatever time the system
considers to be the epoch, suitable for feeding to C<gmtime> and
C<localtime>. On most systems the epoch is 00:00:00 UTC, January 1, 1970;
a prominent exception being Mac OS Classic which uses 00:00:00, January 1,
1904 in the current local time zone for its epoch.

For measuring time in better granularity than one second,
you may use either the Time::HiRes module (from CPAN, and starting from
Perl 5.8 part of the standard distribution), or if you have
gettimeofday(2), you may be able to use the C<syscall> interface of Perl.
See L<perlfaq8> for details.

=item times
X<times>

Returns a four-element list giving the user and system times, in
seconds, for this process and the children of this process.

    ($user,$system,$cuser,$csystem) = times;

In scalar context, C<times> returns C<$user>.

=item tr///

The transliteration operator.  Same as C<y///>.  See L<perlop>.

=item truncate FILEHANDLE,LENGTH
X<truncate>

=item truncate EXPR,LENGTH

Truncates the file opened on FILEHANDLE, or named by EXPR, to the
specified length.  Produces a fatal error if truncate isn't implemented
on your system.  Returns true if successful, the undefined value
otherwise.

The behavior is undefined if LENGTH is greater than the length of the
file.

=item uc EXPR
X<uc> X<uppercase> X<toupper>

=item uc

Returns an uppercased version of EXPR.  This is the internal function
implementing the C<\U> escape in double-quoted strings.  Respects
current LC_CTYPE locale if C<use locale> in force.  See L<perllocale>
and L<perlunicode> for more details about locale and Unicode support.
It does not attempt to do titlecase mapping on initial letters.  See
C<ucfirst> for that.

Si se omite EXPR, se usa C<$_>.

=item ucfirst EXPR
X<ucfirst> X<uppercase>

=item ucfirst

Returns the value of EXPR with the first character in uppercase
(titlecase in Unicode).  This is the internal function implementing
the C<\u> escape in double-quoted strings.  Respects current LC_CTYPE
locale if C<use locale> in force.  See L<perllocale> and L<perlunicode>
for more details about locale and Unicode support.

Si se omite EXPR, se usa C<$_>.

=item umask EXPR
X<umask>

=item umask

Sets the umask for the process to EXPR and returns the previous value.
If EXPR is omitted, merely returns the current umask.

The Unix permission C<rwxr-x---> is represented as three sets of three
bits, or three octal digits: C<0750> (the leading 0 indicates octal
and isn't one of the digits).  The C<umask> value is such a number
representing disabled permissions bits.  The permission (or "mode")
values you pass C<mkdir> or C<sysopen> are modified by your umask, so
even if you tell C<sysopen> to create a file with permissions C<0777>,
if your umask is C<0022> then the file will actually be created with
permissions C<0755>.  If your C<umask> were C<0027> (group can't
write; others can't read, write, or execute), then passing
C<sysopen> C<0666> would create a file with mode C<0640> (C<0666 &~
027> is C<0640>).

Here's some advice: supply a creation mode of C<0666> for regular
files (in C<sysopen>) and one of C<0777> for directories (in
C<mkdir>) and executable files.  This gives users the freedom of
choice: if they want protected files, they might choose process umasks
of C<022>, C<027>, or even the particularly antisocial mask of C<077>.
Programs should rarely if ever make policy decisions better left to
the user.  The exception to this is when writing files that should be
kept private: mail files, web browser cookies, I<.rhosts> files, and
so on.

If umask(2) is not implemented on your system and you are trying to
restrict access for I<yourself> (i.e., (EXPR & 0700) > 0), produces a
fatal error at run time.  If umask(2) is not implemented and you are
not trying to restrict access for yourself, returns C<undef>.

Remember that a umask is a number, usually given in octal; it is I<not> a
string of octal digits.  Ver también L</oct>, si todo lo que tiene es una cadena.

=item undef EXPR
X<undef> X<undefine>

=item undef

Undefines the value of EXPR, which must be an lvalue.  Use only on a
scalar value, an array (using C<@>), a hash (using C<%>), a subroutine
(using C<&>), or a typeglob (using C<*>).  (Saying C<undef $hash{$key}>
will probably not do what you expect on most predefined variables or
DBM list values, so don't do that; see L<delete>.)  Always returns the
undefined value.  You can omit the EXPR, in which case nothing is
undefined, but you still get an undefined value that you could, for
instance, return from a subroutine, assign to a variable or pass as a
parameter.  Ejemplos:

    undef $foo;
    undef $bar{'blurfl'};      # Compare to: delete $bar{'blurfl'};
    undef @ary;
    undef %hash;
    undef &mysub;
    undef *xyz;       # destroys $xyz, @xyz, %xyz, &xyz, etc.
    return (wantarray ? (undef, $errmsg) : undef) if $they_blew_it;
    select undef, undef, undef, 0.25;
    ($a, $b, undef, $c) = &foo;       # Ignore third value returned

Note that this is a unary operator, not a list operator.

=item unlink LIST
X<unlink> X<delete> X<remove> X<rm>

=item unlink

Deletes a list of files.  Returns the number of files successfully
deleted.

    $cnt = unlink 'a', 'b', 'c';
    unlink @goners;
    unlink <*.bak>;

Note: C<unlink> will not attempt to delete directories unless you are superuser
and the B<-U> flag is supplied to Perl.  Even if these conditions are
met, be warned that unlinking a directory can inflict damage on your
filesystem.  Finally, using C<unlink> on directories is not supported on 
many operating systems.  Use C<rmdir> instead.

If LIST is omitted, uses C<$_>.

=item unpack TEMPLATE,EXPR
X<unpack>

C<unpack> does the reverse of C<pack>: it takes a string
and expands it out into a list of values.
(In scalar context, it returns merely the first value produced.)

The string is broken into chunks described by the TEMPLATE.  Each chunk
is converted separately to a value.  Typically, either the string is a result
of C<pack>, or the bytes of the string represent a C structure of some
kind.

The TEMPLATE has the same format as in the C<pack> function.
Here's a subroutine that does substring:

    sub substr {
	my($what,$where,$howmuch) = @_;
	unpack("x$where a$howmuch", $what);
    }

and then there's

    sub ordinal { unpack("c",$_[0]); } # same as ord()

In addition to fields allowed in pack(), you may prefix a field with
a %<number> to indicate that
you want a <number>-bit checksum of the items instead of the items
themselves.  Default is a 16-bit checksum.  Checksum is calculated by
summing numeric values of expanded values (for string fields the sum of
C<ord($char)> is taken, for bit fields the sum of zeroes and ones).

For example, the following
computes the same number as the System V sum program:

    $checksum = do {
	local $/;  # slurp!
	unpack("%32C*",<>) % 65535;
    };

The following efficiently counts the number of set bits in a bit vector:

    $setbits = unpack("%32b*", $selectmask);

The C<p> and C<P> formats should be used with care.  Since Perl
has no way of checking whether the value passed to C<unpack()>
corresponds to a valid memory location, passing a pointer value that's
not known to be valid is likely to have disastrous consequences.

If there are more pack codes or if the repeat count of a field or a group
is larger than what the remainder of the input string allows, the result
is not well defined: in some cases, the repeat count is decreased, or
C<unpack()> will produce null strings or zeroes, or terminate with an
error. If the input string is longer than one described by the TEMPLATE,
the rest is ignored.

See L</pack> for more examples and notes.

=item untie VARIABLE
X<untie>

Breaks the binding between a variable and a package.  (See C<tie>.)
Has no effect if the variable is not tied.

=item unshift ARRAY,LIST
X<unshift>

Does the opposite of a C<shift>.  Or the opposite of a C<push>,
depending on how you look at it.  Prepends list to the front of the
array, and returns the new number of elements in the array.

    unshift(@ARGV, '-e') unless $ARGV[0] =~ /^-/;

Note the LIST is prepended whole, not one element at a time, so the
prepended elements stay in the same order.  Use C<reverse> to do the
reverse.

=item use Module VERSION LIST
X<use> X<module> X<import>

=item use Module VERSION

=item use Module LIST

=item use Module

=item use VERSION

Imports some semantics into the current package from the named module,
generally by aliasing certain subroutine or variable names into your
package.  It is exactly equivalent to

    BEGIN { require Module; import Module LIST; }

except that Module I<must> be a bareword.

VERSION may be either a numeric argument such as 5.006, which will be
compared to C<$]>, or a literal of the form v5.6.1, which will be compared
to C<$^V> (aka $PERL_VERSION.  A fatal error is produced if VERSION is
greater than the version of the current Perl interpreter; Perl will not
attempt to parse the rest of the file.  Compare with L</require>, which can
do a similar check at run time.

Specifying VERSION as a literal of the form v5.6.1 should generally be
avoided, because it leads to misleading error messages under earlier
versions of Perl that do not support this syntax.  The equivalent numeric
version should be used instead.

    use v5.6.1;		# compile time version check
    use 5.6.1;		# ditto
    use 5.006_001;	# ditto; preferred for backwards compatibility

This is often useful if you need to check the current Perl version before
C<use>ing library modules that have changed in incompatible ways from
older versions of Perl.  (We try not to do this more than we have to.)

The C<BEGIN> forces the C<require> and C<import> to happen at compile time.  The
C<require> makes sure the module is loaded into memory if it hasn't been
yet.  The C<import> is not a builtin--it's just an ordinary static method
call into the C<Module> package to tell the module to import the list of
features back into the current package.  The module can implement its
C<import> method any way it likes, though most modules just choose to
derive their C<import> method via inheritance from the C<Exporter> class that
is defined in the C<Exporter> module.  See L<Exporter>.  If no C<import>
method can be found then the call is skipped.

If you do not want to call the package's C<import> method (for instance,
to stop your namespace from being altered), explicitly supply the empty list:

    use Module ();

That is exactly equivalent to

    BEGIN { require Module }

If the VERSION argument is present between Module and LIST, then the
C<use> will call the VERSION method in class Module with the given
version as an argument.  The default VERSION method, inherited from
the UNIVERSAL class, croaks if the given version is larger than the
value of the variable C<$Module::VERSION>.

Again, there is a distinction between omitting LIST (C<import> called
with no arguments) and an explicit empty LIST C<()> (C<import> not
called).  Note that there is no comma after VERSION!

Because this is a wide-open interface, pragmas (compiler directives)
are also implemented this way.  Currently implemented pragmas are:

    use constant;
    use diagnostics;
    use integer;
    use sigtrap  qw(SEGV BUS);
    use strict   qw(subs vars refs);
    use subs     qw(afunc blurfl);
    use warnings qw(all);
    use sort     qw(stable _quicksort _mergesort);

Some of these pseudo-modules import semantics into the current
block scope (like C<strict> or C<integer>, unlike ordinary modules,
which import symbols into the current package (which are effective
through the end of the file).

There's a corresponding C<no> command that unimports meanings imported
by C<use>, i.e., it calls C<unimport Module LIST> instead of C<import>.

    no integer;
    no strict 'refs';
    no warnings;

See L<perlmodlib> for a list of standard modules and pragmas.  See L<perlrun>
for the C<-M> and C<-m> command-line options to perl that give C<use>
functionality from the command-line.

=item utime LIST
X<utime>

Changes the access and modification times on each file of a list of
files.  The first two elements of the list must be the NUMERICAL access
and modification times, in that order.  Devuelve el número de ficheros cambiados con éxito.  The inode change time of each file is set
to the current time.  For example, this code has the same effect as the
Unix touch(1) command when the files I<already exist> and belong to
the user running the program:

    #!/usr/bin/perl
    $atime = $mtime = time;
    utime $atime, $mtime, @ARGV;

Since perl 5.7.2, if the first two elements of the list are C<undef>, then
the utime(2) function in the C library will be called with a null second
argument. On most systems, this will set the file's access and
modification times to the current time (i.e. equivalent to the example
above) and will even work on other users' files where you have write
permission:

    utime undef, undef, @ARGV;

Under NFS this will use the time of the NFS server, not the time of
the local machine.  If there is a time synchronization problem, the
NFS server and local machine will have different times.  The Unix
touch(1) command will in fact normally use this form instead of the
one shown in the first example.

Note that only passing one of the first two elements as C<undef> will
be equivalent of passing it as 0 and will not have the same effect as
described when they are both C<undef>.  This case will also trigger an
uninitialized warning.

=item values HASH
X<values>

Returns a list consisting of all the values of the named hash.
(In a scalar context, returns the number of values.)

The values are returned in an apparently random order.  The actual
random order is subject to change in future versions of perl, but it
is guaranteed to be the same order as either the C<keys> or C<each>
function would produce on the same (unmodified) hash.  Desde Perl 5.8.1 la ordenación es diferente incluso entre diferentes ejecuciones de Perl por razones de seguridad (ver L<perlsec/"Ataques por Complejidad Algorítmica">).

As a side effect, calling values() resets the HASH's internal iterator,
see L</each>. (In particular, calling values() in void context resets
the iterator with no other overhead.)

Note that the values are not copied, which means modifying them will
modify the contents of the hash:

    for (values %hash) 	    { s/foo/bar/g }   # modifies %hash values
    for (@hash{keys %hash}) { s/foo/bar/g }   # same

See also C<keys>, C<each>, and C<sort>.

=item vec EXPR,OFFSET,BITS
X<vec> X<bit> X<bit vector>

Treats the string in EXPR as a bit vector made up of elements of
width BITS, and returns the value of the element specified by OFFSET
as an unsigned integer.  BITS therefore specifies the number of bits
that are reserved for each element in the bit vector.  This must
be a power of two from 1 to 32 (or 64, if your platform supports
that).

If BITS is 8, "elements" coincide with bytes of the input string.

If BITS is 16 or more, bytes of the input string are grouped into chunks
of size BITS/8, and each group is converted to a number as with
pack()/unpack() with big-endian formats C<n>/C<N> (and analogously
for BITS==64).  See L<"pack"> for details.

If bits is 4 or less, the string is broken into bytes, then the bits
of each byte are broken into 8/BITS groups.  Bits of a byte are
numbered in a little-endian-ish way, as in C<0x01>, C<0x02>,
C<0x04>, C<0x08>, C<0x10>, C<0x20>, C<0x40>, C<0x80>.  For example,
breaking the single input byte C<chr(0x36)> into two groups gives a list
C<(0x6, 0x3)>; breaking it into 4 groups gives C<(0x2, 0x1, 0x3, 0x0)>.

C<vec> may also be assigned to, in which case parentheses are needed
to give the expression the correct precedence as in

    vec($image, $max_x * $x + $y, 8) = 3;

If the selected element is outside the string, the value 0 is returned.
If an element off the end of the string is written to, Perl will first
extend the string with sufficiently many zero bytes.   It is an error
to try to write off the beginning of the string (i.e. negative OFFSET).

The string should not contain any character with the value > 255 (which
can only happen if you're using UTF-8 encoding).  If it does, it will be
treated as something that is not UTF-8 encoded.  When the C<vec> was
assigned to, other parts of your program will also no longer consider the
string to be UTF-8 encoded.  In other words, if you do have such characters
in your string, vec() will operate on the actual byte string, and not the
conceptual character string.

Strings created with C<vec> can also be manipulated with the logical
operators C<|>, C<&>, C<^>, and C<~>.  These operators will assume a bit
vector operation is desired when both operands are strings.
See L<perlop/"Bitwise String Operators">.

The following code will build up an ASCII string saying C<'PerlPerlPerl'>.
The comments show the string after each step.  Note that this code works
in the same way on big-endian or little-endian machines.

    my $foo = '';
    vec($foo,  0, 32) = 0x5065726C;	# 'Perl'

    # $foo eq "Perl" eq "\x50\x65\x72\x6C", 32 bits
    print vec($foo, 0, 8);		# prints 80 == 0x50 == ord('P')

    vec($foo,  2, 16) = 0x5065;		# 'PerlPe'
    vec($foo,  3, 16) = 0x726C;		# 'PerlPerl'
    vec($foo,  8,  8) = 0x50;		# 'PerlPerlP'
    vec($foo,  9,  8) = 0x65;		# 'PerlPerlPe'
    vec($foo, 20,  4) = 2;		# 'PerlPerlPe'   . "\x02"
    vec($foo, 21,  4) = 7;		# 'PerlPerlPer'
                                        # 'r' is "\x72"
    vec($foo, 45,  2) = 3;		# 'PerlPerlPer'  . "\x0c"
    vec($foo, 93,  1) = 1;		# 'PerlPerlPer'  . "\x2c"
    vec($foo, 94,  1) = 1;		# 'PerlPerlPerl'
                                        # 'l' is "\x6c"

To transform a bit vector into a string or list of 0's and 1's, use these:

    $bits = unpack("b*", $vector);
    @bits = split(//, unpack("b*", $vector));

If you know the exact length in bits, it can be used in place of the C<*>.

Here is an example to illustrate how the bits actually fall in place:

    #!/usr/bin/perl -wl

    print <<'EOT';
                                      0         1         2         3
                       unpack("V",$_) 01234567890123456789012345678901
    ------------------------------------------------------------------
    EOT

    for $w (0..3) {
        $width = 2**$w;
        for ($shift=0; $shift < $width; ++$shift) {
            for ($off=0; $off < 32/$width; ++$off) {
                $str = pack("B*", "0"x32);
                $bits = (1<<$shift);
                vec($str, $off, $width) = $bits;
                $res = unpack("b*",$str);
                $val = unpack("V", $str);
                write;
            }
        }
    }

    format STDOUT =
    vec($_,@#,@#) = @<< == @######### @>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
    $off, $width, $bits, $val, $res
    .
    __END__

Regardless of the machine architecture on which it is run, the above
example should print the following table:

                                      0         1         2         3
                       unpack("V",$_) 01234567890123456789012345678901
    ------------------------------------------------------------------
    vec($_, 0, 1) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 1) = 1   ==          2 01000000000000000000000000000000
    vec($_, 2, 1) = 1   ==          4 00100000000000000000000000000000
    vec($_, 3, 1) = 1   ==          8 00010000000000000000000000000000
    vec($_, 4, 1) = 1   ==         16 00001000000000000000000000000000
    vec($_, 5, 1) = 1   ==         32 00000100000000000000000000000000
    vec($_, 6, 1) = 1   ==         64 00000010000000000000000000000000
    vec($_, 7, 1) = 1   ==        128 00000001000000000000000000000000
    vec($_, 8, 1) = 1   ==        256 00000000100000000000000000000000
    vec($_, 9, 1) = 1   ==        512 00000000010000000000000000000000
    vec($_,10, 1) = 1   ==       1024 00000000001000000000000000000000
    vec($_,11, 1) = 1   ==       2048 00000000000100000000000000000000
    vec($_,12, 1) = 1   ==       4096 00000000000010000000000000000000
    vec($_,13, 1) = 1   ==       8192 00000000000001000000000000000000
    vec($_,14, 1) = 1   ==      16384 00000000000000100000000000000000
    vec($_,15, 1) = 1   ==      32768 00000000000000010000000000000000
    vec($_,16, 1) = 1   ==      65536 00000000000000001000000000000000
    vec($_,17, 1) = 1   ==     131072 00000000000000000100000000000000
    vec($_,18, 1) = 1   ==     262144 00000000000000000010000000000000
    vec($_,19, 1) = 1   ==     524288 00000000000000000001000000000000
    vec($_,20, 1) = 1   ==    1048576 00000000000000000000100000000000
    vec($_,21, 1) = 1   ==    2097152 00000000000000000000010000000000
    vec($_,22, 1) = 1   ==    4194304 00000000000000000000001000000000
    vec($_,23, 1) = 1   ==    8388608 00000000000000000000000100000000
    vec($_,24, 1) = 1   ==   16777216 00000000000000000000000010000000
    vec($_,25, 1) = 1   ==   33554432 00000000000000000000000001000000
    vec($_,26, 1) = 1   ==   67108864 00000000000000000000000000100000
    vec($_,27, 1) = 1   ==  134217728 00000000000000000000000000010000
    vec($_,28, 1) = 1   ==  268435456 00000000000000000000000000001000
    vec($_,29, 1) = 1   ==  536870912 00000000000000000000000000000100
    vec($_,30, 1) = 1   == 1073741824 00000000000000000000000000000010
    vec($_,31, 1) = 1   == 2147483648 00000000000000000000000000000001
    vec($_, 0, 2) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 2) = 1   ==          4 00100000000000000000000000000000
    vec($_, 2, 2) = 1   ==         16 00001000000000000000000000000000
    vec($_, 3, 2) = 1   ==         64 00000010000000000000000000000000
    vec($_, 4, 2) = 1   ==        256 00000000100000000000000000000000
    vec($_, 5, 2) = 1   ==       1024 00000000001000000000000000000000
    vec($_, 6, 2) = 1   ==       4096 00000000000010000000000000000000
    vec($_, 7, 2) = 1   ==      16384 00000000000000100000000000000000
    vec($_, 8, 2) = 1   ==      65536 00000000000000001000000000000000
    vec($_, 9, 2) = 1   ==     262144 00000000000000000010000000000000
    vec($_,10, 2) = 1   ==    1048576 00000000000000000000100000000000
    vec($_,11, 2) = 1   ==    4194304 00000000000000000000001000000000
    vec($_,12, 2) = 1   ==   16777216 00000000000000000000000010000000
    vec($_,13, 2) = 1   ==   67108864 00000000000000000000000000100000
    vec($_,14, 2) = 1   ==  268435456 00000000000000000000000000001000
    vec($_,15, 2) = 1   == 1073741824 00000000000000000000000000000010
    vec($_, 0, 2) = 2   ==          2 01000000000000000000000000000000
    vec($_, 1, 2) = 2   ==          8 00010000000000000000000000000000
    vec($_, 2, 2) = 2   ==         32 00000100000000000000000000000000
    vec($_, 3, 2) = 2   ==        128 00000001000000000000000000000000
    vec($_, 4, 2) = 2   ==        512 00000000010000000000000000000000
    vec($_, 5, 2) = 2   ==       2048 00000000000100000000000000000000
    vec($_, 6, 2) = 2   ==       8192 00000000000001000000000000000000
    vec($_, 7, 2) = 2   ==      32768 00000000000000010000000000000000
    vec($_, 8, 2) = 2   ==     131072 00000000000000000100000000000000
    vec($_, 9, 2) = 2   ==     524288 00000000000000000001000000000000
    vec($_,10, 2) = 2   ==    2097152 00000000000000000000010000000000
    vec($_,11, 2) = 2   ==    8388608 00000000000000000000000100000000
    vec($_,12, 2) = 2   ==   33554432 00000000000000000000000001000000
    vec($_,13, 2) = 2   ==  134217728 00000000000000000000000000010000
    vec($_,14, 2) = 2   ==  536870912 00000000000000000000000000000100
    vec($_,15, 2) = 2   == 2147483648 00000000000000000000000000000001
    vec($_, 0, 4) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 4) = 1   ==         16 00001000000000000000000000000000
    vec($_, 2, 4) = 1   ==        256 00000000100000000000000000000000
    vec($_, 3, 4) = 1   ==       4096 00000000000010000000000000000000
    vec($_, 4, 4) = 1   ==      65536 00000000000000001000000000000000
    vec($_, 5, 4) = 1   ==    1048576 00000000000000000000100000000000
    vec($_, 6, 4) = 1   ==   16777216 00000000000000000000000010000000
    vec($_, 7, 4) = 1   ==  268435456 00000000000000000000000000001000
    vec($_, 0, 4) = 2   ==          2 01000000000000000000000000000000
    vec($_, 1, 4) = 2   ==         32 00000100000000000000000000000000
    vec($_, 2, 4) = 2   ==        512 00000000010000000000000000000000
    vec($_, 3, 4) = 2   ==       8192 00000000000001000000000000000000
    vec($_, 4, 4) = 2   ==     131072 00000000000000000100000000000000
    vec($_, 5, 4) = 2   ==    2097152 00000000000000000000010000000000
    vec($_, 6, 4) = 2   ==   33554432 00000000000000000000000001000000
    vec($_, 7, 4) = 2   ==  536870912 00000000000000000000000000000100
    vec($_, 0, 4) = 4   ==          4 00100000000000000000000000000000
    vec($_, 1, 4) = 4   ==         64 00000010000000000000000000000000
    vec($_, 2, 4) = 4   ==       1024 00000000001000000000000000000000
    vec($_, 3, 4) = 4   ==      16384 00000000000000100000000000000000
    vec($_, 4, 4) = 4   ==     262144 00000000000000000010000000000000
    vec($_, 5, 4) = 4   ==    4194304 00000000000000000000001000000000
    vec($_, 6, 4) = 4   ==   67108864 00000000000000000000000000100000
    vec($_, 7, 4) = 4   == 1073741824 00000000000000000000000000000010
    vec($_, 0, 4) = 8   ==          8 00010000000000000000000000000000
    vec($_, 1, 4) = 8   ==        128 00000001000000000000000000000000
    vec($_, 2, 4) = 8   ==       2048 00000000000100000000000000000000
    vec($_, 3, 4) = 8   ==      32768 00000000000000010000000000000000
    vec($_, 4, 4) = 8   ==     524288 00000000000000000001000000000000
    vec($_, 5, 4) = 8   ==    8388608 00000000000000000000000100000000
    vec($_, 6, 4) = 8   ==  134217728 00000000000000000000000000010000
    vec($_, 7, 4) = 8   == 2147483648 00000000000000000000000000000001
    vec($_, 0, 8) = 1   ==          1 10000000000000000000000000000000
    vec($_, 1, 8) = 1   ==        256 00000000100000000000000000000000
    vec($_, 2, 8) = 1   ==      65536 00000000000000001000000000000000
    vec($_, 3, 8) = 1   ==   16777216 00000000000000000000000010000000
    vec($_, 0, 8) = 2   ==          2 01000000000000000000000000000000
    vec($_, 1, 8) = 2   ==        512 00000000010000000000000000000000
    vec($_, 2, 8) = 2   ==     131072 00000000000000000100000000000000
    vec($_, 3, 8) = 2   ==   33554432 00000000000000000000000001000000
    vec($_, 0, 8) = 4   ==          4 00100000000000000000000000000000
    vec($_, 1, 8) = 4   ==       1024 00000000001000000000000000000000
    vec($_, 2, 8) = 4   ==     262144 00000000000000000010000000000000
    vec($_, 3, 8) = 4   ==   67108864 00000000000000000000000000100000
    vec($_, 0, 8) = 8   ==          8 00010000000000000000000000000000
    vec($_, 1, 8) = 8   ==       2048 00000000000100000000000000000000
    vec($_, 2, 8) = 8   ==     524288 00000000000000000001000000000000
    vec($_, 3, 8) = 8   ==  134217728 00000000000000000000000000010000
    vec($_, 0, 8) = 16  ==         16 00001000000000000000000000000000
    vec($_, 1, 8) = 16  ==       4096 00000000000010000000000000000000
    vec($_, 2, 8) = 16  ==    1048576 00000000000000000000100000000000
    vec($_, 3, 8) = 16  ==  268435456 00000000000000000000000000001000
    vec($_, 0, 8) = 32  ==         32 00000100000000000000000000000000
    vec($_, 1, 8) = 32  ==       8192 00000000000001000000000000000000
    vec($_, 2, 8) = 32  ==    2097152 00000000000000000000010000000000
    vec($_, 3, 8) = 32  ==  536870912 00000000000000000000000000000100
    vec($_, 0, 8) = 64  ==         64 00000010000000000000000000000000
    vec($_, 1, 8) = 64  ==      16384 00000000000000100000000000000000
    vec($_, 2, 8) = 64  ==    4194304 00000000000000000000001000000000
    vec($_, 3, 8) = 64  == 1073741824 00000000000000000000000000000010
    vec($_, 0, 8) = 128 ==        128 00000001000000000000000000000000
    vec($_, 1, 8) = 128 ==      32768 00000000000000010000000000000000
    vec($_, 2, 8) = 128 ==    8388608 00000000000000000000000100000000
    vec($_, 3, 8) = 128 == 2147483648 00000000000000000000000000000001

=item wait
X<wait>

Behaves like the wait(2) system call on your system: it waits for a child
process to terminate and returns the pid of the deceased process, or
C<-1> if there are no child processes.  The status is returned in C<$?>.
Note that a return value of C<-1> could mean that child processes are
being automatically reaped, as described in L<perlipc>.

=item waitpid PID,FLAGS
X<waitpid>

Waits for a particular child process to terminate and returns the pid of
the deceased process, or C<-1> if there is no such child process.  On some
systems, a value of 0 indicates that there are processes still running.
The status is returned in C<$?>.  If you say

    use POSIX ":sys_wait_h";
    #...
    do {
	$kid = waitpid(-1, WNOHANG);
    } until $kid > 0;

then you can do a non-blocking wait for all pending zombie processes.
Non-blocking wait is available on machines supporting either the
waitpid(2) or wait4(2) system calls.  However, waiting for a particular
pid with FLAGS of C<0> is implemented everywhere.  (Perl emulates the
system call by remembering the status values of processes that have
exited but have not been harvested by the Perl script yet.)

Note that on some systems, a return value of C<-1> could mean that child
processes are being automatically reaped.  See L<perlipc> for details,
and for other examples.

=item wantarray
X<wantarray> X<context>

Returns true if the context of the currently executing subroutine or
C<eval> is looking for a list value.  Returns false if the context is
looking for a scalar.  Returns the undefined value if the context is
looking for no value (void context).

    return unless defined wantarray;	# don't bother doing more
    my @a = complex_calculation();
    return wantarray ? @a : "@a";

C<wantarray()>'s result is unspecified in the top level of a file,
in a C<BEGIN>, C<CHECK>, C<INIT> or C<END> block, or in a C<DESTROY>
method.

This function should have been named wantlist() instead.

=item warn LIST
X<warn> X<warning> X<STDERR>

Produces a message on STDERR just like C<die>, but doesn't exit or throw
an exception.

If LIST is empty and C<$@> already contains a value (typically from a
previous eval) that value is used after appending C<"\t...caught">
to C<$@>.  This is useful for staying almost, but not entirely similar to
C<die>.

If C<$@> is empty then the string C<"Warning: Something's wrong"> is used.

No message is printed if there is a C<$SIG{__WARN__}> handler
installed.  It is the handler's responsibility to deal with the message
as it sees fit (like, for instance, converting it into a C<die>).  Most
handlers must therefore make arrangements to actually display the
warnings that they are not prepared to deal with, by calling C<warn>
again in the handler.  Note that this is quite safe and will not
produce an endless loop, since C<__WARN__> hooks are not called from
inside one.

You will find this behavior is slightly different from that of
C<$SIG{__DIE__}> handlers (which don't suppress the error text, but can
instead call C<die> again to change it).

Using a C<__WARN__> handler provides a powerful way to silence all
warnings (even the so-called mandatory ones).  An example:

    # wipe out *all* compile-time warnings
    BEGIN { $SIG{'__WARN__'} = sub { warn $_[0] if $DOWARN } }
    my $foo = 10;
    my $foo = 20;          # no warning about duplicate my $foo,
                           # but hey, you asked for it!
    # no compile-time or run-time warnings before here
    $DOWARN = 1;

    # run-time warnings enabled after here
    warn "\$foo is alive and $foo!";     # does show up

See L<perlvar> for details on setting C<%SIG> entries, and for more
examples.  See the Carp module for other kinds of warnings using its
carp() and cluck() functions.

=item write FILEHANDLE
X<write>

=item write EXPR

=item write

Writes a formatted record (possibly multi-line) to the specified FILEHANDLE,
using the format associated with that file.  By default the format for
a file is the one having the same name as the filehandle, but the
format for the current output channel (see the C<select> function) may be set
explicitly by assigning the name of the format to the C<$~> variable.

Top of form processing is handled automatically:  if there is
insufficient room on the current page for the formatted record, the
page is advanced by writing a form feed, a special top-of-page format
is used to format the new page header, and then the record is written.
By default the top-of-page format is the name of the filehandle with
"_TOP" appended, but it may be dynamically set to the format of your
choice by assigning the name to the C<$^> variable while the filehandle is
selected.  The number of lines remaining on the current page is in
variable C<$->, which can be set to C<0> to force a new page.

If FILEHANDLE is unspecified, output goes to the current default output
channel, which starts out as STDOUT but may be changed by the
C<select> operator.  If the FILEHANDLE is an EXPR, then the expression
is evaluated and the resulting string is used to look up the name of
the FILEHANDLE at run time.  For more on formats, see L<perlform>.

Note that write is I<not> the opposite of C<read>.  Unfortunately.

=item y///

The transliteration operator.  Same as C<tr///>.  See L<perlop>.

=back
