=encoding utf8

=head1 NOMBRE

perlsyn - Sintaxis de Perl

=head1 DESCRIPCIÓN

Un programa Perl consiste en una secuencia de declaraciones y sentencias que se ejecutan de arriba hacia abajo.  Bucles, subrutinas y otras estructuras de control le permiten saltar a lo largo del código.

Perl es un lenguaje de B<estructura libre>, puede formatearlo y sangrarlo como quiera.  El espacio en blanco sirve para separar los elementos, a diferencia de lenguajes como Python donde es una parte importante de la sintaxis.

Muchos de los elementos sintácticos de Perl son B<opcionales>.  En vez de obligarle a poner paréntesis en todas las llamadas de función y declarar cada variable, puede, a menudo, dejar algunos elementos de forma explícita, y Perl intentará adivinar lo que quiere decir.  Esto es conocido como B<Do What I Mean> (haz lo que te digo), abreviado como B<DWIM>.  Permite a los programadores ser B<perezosos> y codificar en el estilo en que se encuentran más cómodos.

Perl B<toma prestada la sintaxis> y conceptos de muchos lenguajes: awk, sed, C, Bourne Shell, Smalltalk, Lisp e incluso el Inglés.  Otros lenguajes han tomado prestada la sintaxis de Perl, particularmente sus extensiones de expresiones regulares.  Así que si ha programado en otro lenguaje verá partes en Perl que le serán familiares.  A menudo funcionan de la misma forma, pero mire L<perltrap> para ver cómo difieren.

=head2 Declaraciones
X<declaration> X<undef> X<undefined> X<uninitialized> X<declaración> X<indefinido> X<no inicializado>

Los únicos elementos que necesita declarar en Perl son los informes y las subrutinas (y algunas veces ni siquiera las subrutinas).  Una variable almacena el valor indefinido (C<undef>) hasta que se le asigna un valor definido, que es cualquier otra cosa distinta de C<undef>.  Cuando se usa como un número, C<undef> es tratado como si fuera C<0>; cuando se usa como una cadena de caracteres (I<string>), se trata como el string vacío, C<"">; y cuando se usa como una referencia que no ha sido asignada, es tratado como un error.  Si ha activado los avisos (warnings), será notificado de un valor no inicializado cada vez que trate a C<undef> como si fuera una cadena o número.  Bueno, normalmente.  En contextos booleanos, como en:

    my $a;
    if ($a) {}

están exentos de esos avisos (porque tienen en cuenta el valor de verdad en vez de ver si está definido).  Operadores como C<++>, C<-->, C<+=>, C<-=> y C<.=>, que operan sobre valores no definidos como en:

    my $a;
    $a++;

están también exentos de tales avisos.

Una declaración puede ponerse en cualquier sitio, como si fuera una sentencia, pero no tiene efecto en la ejecución de la secuencia de sentencias principal: todas las declaraciones toman efecto en tiempo de compilación.  Típicamente, todas las declaraciones se ponen al comienzo o al final del programa.  Sin embargo, si está usando variables privadas en un contexto local creadas con C<my()>, deberá asegurarse que su definición de formato o subrutina están dentro del mismo bloque que el C<my> si quiere acceder a estas variables privadas.

Declarar una subrutina permite que su nombre sea usado como si fuera un operador de lista, desde el punto de vista del programa.  Puede declarar una subrutina sin definirla diciendo C<sub nombre>, como: X<subrutina, declaración>

    sub minombre;
    $me = minombre $0 		or die "no puedo obtener minombre";

Note que minombre() funciona como un operador de lista, no como un operador unario; cuidado al usar C<or> en vez de C<||> en este caso.  Sin embargo, si declara la subrutina como C<sub minombre ($)>, entonces C<minombre> funcionará como un operador unario, así que servirán tanto C<or> como C<||>.

Las declaraciones de subrutinas pueden cargarse también con la sentencia C<require> o cargadas e importadas en su espacio de nombres con la sentencia C<use>.
Ver L<perlmod> para detalles sobre esto.

Una secuencia de sentencias pueden contener declaraciones de variables en ámbito léxico (privado), pero, aparte de declarar un nombre de variable, la declaración actúa como una sentencia normal y es elaborada dentro de la secuencia de sentencias como si fuera una sentencia normal.  Esto significa que tiene efectos tanto en tiempo de compilación como en tiempo de ejecución.

=head2 Comentarios
X<comment> X<#> X<comentario>

El texto desde un carácter C<"#"> hasta el fin de la línea es un comentario y es ignorado.  Excepciones a esto son la inclusión de C<"#"> dentro de una cadena o una expresión regular.

=head2 Sentencias simples
X<statement> X<semicolon> X<expression> X<;> X<sentencia> X<punto y coma> X<expresión>

La única clase de sentencia simple que existe es una expresión evaluada para obtener unos efectos colaterales.  Cada sentencia simple debe terminarse en un punto y coma excepto si es la última sentencia de un bloque, en cuyo caso el punto y coma es opcional.  (Un punto y coma es aún así recomendable si el bloque tiene más de una línea, porque, eventualmente, puede añadir alguna línea más). Note que algunos operadores como C<eval {}> y C<do {}> parecen sentencias compuestas, pero no lo son (son sólo TÉRMINOS en una expresión) y es necesario una terminación explícita si se usa como el último punto de una sentencia.

=head2 Verdad y Falsedad
X<truth> X<falsehood> X<true> X<false> X<!> X<not> X<negation> X<0> X<verdad> X<falsedad> X<verdadero> X<falso> X<negación> X<no>

El número 0, las cadenas C<'0'> y C<''>, la cadena vacía C<()> y C<undef> son todos falsos en contexto booleano. Todos los demás valores son verdadero.
La negación del valor de verdadero con C<!> o C<not> devuelve un valor falso especial.
Cuando es evaluado como cadena es tratado como C<''>, pero como número es tratado como 0.

=head2 Modificadores de sentencias
X<statement modifier> X<modifier> X<if> X<unless> X<while>
X<until> X<when> X<foreach> X<for> X<modificador de sentencia> X<modificador>

Cualquier sentencia simple puede ser seguida opcionalmente por un I<ÚNICO> modificador, justo antes del punto y coma final (o del final del bloque).  Los posibles modificadores son:

    if EXPR
    unless EXPR
    while EXPR
    until EXPR
    when EXPR
    for LIST
    foreach LIST

La C<EXPR> siguiente al modificador es referida como la "condición".
Su verdad o falsedad determina cómo se comportará el modificador.

C<if> ejecuta la sentencia una vez I<si> y sólo si la condición es verdadera.  C<unless> es el opuesto, ejecuta la sentencia si la condición I<no es> verdadera (e.d., si la condición es falsa).

    print "El perro de caza Basset tiene largas orejas" if length $oreja >= 10;
    vete_fuera() and juega() unless $este_lloviendo;

C<when> ejecuta la sentencia I<cuando> C<$_> coincide inteligentemente con C<EXPR>, y después, o bien C<salta> fuera si está encerrada en un ámbito C<given> o salta al C<siguiente> elemento cuando reside dentro de un bucle C<for>.
Ver también L</"Sentencias switch">.

    given ($algo) {
        $abc    = 1 when /^abc/;
        $solo_a = 1 when /^a/;
        $otro   = 1;
    }

    for (@nombres) {
	admin($_)   when [ qw/Alicia Roberto/ ];
	regular($_) when [ qw/Cris David Helena/ ];
    }

El modificador C<foreach> es un iterador: ejecuta la sentencia una vez por cada elemento en la LISTA (con C<$_> asociado a cada elemento en cada iteración).

    print "Hola $_!\n" foreach qw(mundo Dolly enfermera);

C<while> repite la sentencia I<mientras> la condición sea cierta.
C<until> hace lo opuesto, repite la sentencia I<hasta> que la condición sea verdadera (o mientras la condición sea falsa):

    # Estas dos líneas cuentan de 0 a 10.
    print $i++ while $i <= 10;
    print $j++ until $j >  10;

Los modificadores C<while> y C<until> tienen la usual semántica de los "bucles C<while>" (la condición se evalúa primero), excepto cuando se aplica a un bloque C<do> (o a la obsoleta sentencia subrutina C<do>), en cuyo caso el bloque se ejecuta una vez antes de sea evaluada la condición.  De esa manera puede escribir bucles como este:

    do {
	$linea = <STDIN>;
	...
    } until $linea  eq ".\n";

Ver L<perlfunc/do>.  Note también que las sentencias de control de bucles descritas más adelante I<NO> funcionarán con esta construcción, porque los modificadores no toman etiquetas de bucle.  Lo sentimos.  Siempre puede poner otro bloque dentro de él  (para C<next>) o alrededor de él (para C<last>) para hacer esta suerte de cosas.
Para C<next>, solamente doble las llaves:
X<next> X<last> X<redo>

    do {{
	next if $x == $y;
	# hacer algo aquí
    }} until $x++ > $z;

Para C<last>, ha de ser un poco más elegante
X<last>

    LOOP: { 
	    do {
		last if $x = $y**2;
		# hacer algo aquí
	    } while $x++ <= $z;
    }

B<NOTA:> El comportamiento de una sentencia C<my> modificada con una sentencia de modificador condicional o construcción de bucle (p.e. C<my $x if ...>) es B<indefinido>.  El valor de la variable C<my> puede ser C<undef>, cualquier valor anteriormente asignado, o posiblemente, cualquier otra cosa.  No confíe en él.  Futuras versiones de perl pueden hacer algo diferente de la versión de perl que esté probando.  A partir de aquí, dragones.
X<my>

=head2 Sentencias compuestas
X<statement, compound> X<block> X<bracket, curly> X<curly bracket> X<brace>
X<{> X<}> X<if> X<unless> X<while> X<until> X<foreach> X<for> X<continue> X<sentencia, compuesta> X<bloque> X<llave>

En Perl, una secuencia de sentencias que define un ámbito se llama un bloque.
Algunas veces un bloque está delimitado por el fichero que lo contiene (en el caso de un fichero requerido, o el programa entero) y otras veces un bloque está delimitado por la extensión de una cadena (en el caso de un C<eval>).

Pero generalmente, un bloque está delimitado por llaves.
Llamaremos a esta construcción sintáctica un BLOQUE.

Las siguientes sentencias compuestas pueden ser usadas para controlar el flujo:

    if (EXPR) BLOQUE
    if (EXPR) BLOQUE else BLOQUE
    if (EXPR) BLOQUE elsif (EXPR) BLOQUE ... else BLOQUE
    unless (EXPR) BLOQUE
    unless (EXPR) BLOQUE else BLOQUE
    unless (EXPR) BLOQUE elsif (EXPR) BLOQUE ... else BLOQUE
    ETIQUETA while (EXPR) BLOQUE
    ETIQUETA while (EXPR) BLOQUE continue BLOQUE
    ETIQUETA until (EXPR) BLOQUE
    ETIQUETA until (EXPR) BLOQUE continue BLOQUE
    ETIQUETA for (EXPR; EXPR; EXPR) BLOQUE
    ETIQUETA foreach VAR (LIST) BLOQUE
    ETIQUETA foreach VAR (LIST) BLOQUE continue BLOQUE
    ETIQUETA BLOQUE continue BLOQUE

Note que, a diferencia del C y Pascal, están definidas en términos de BLOQUES, no sentencias.  Esto significa que las llaves son I<necesarias>: no se permiten sentencias sueltas.  Si quiere escribir condicionales sin llaves hay varias formas de hacerlo.  Todo lo siguiente hace lo mismo:

    if (!open(FOO)) { die "No puedo abrir $FOO: $!"; }
    die "No puedo abrir $FOO: $!" unless open(FOO);
    open(FOO) or die "No puedo abrir $FOO: $!";	# ¡FOO o quieto!
    open(FOO) ? 'hola, mamá' : die "No puedo abrir $FOO: $!";
			# un poco exótico, este último

La sentencia C<if> es sencilla.  Como los BLOQUES están siempre rodeados de llaves, nunca hay ambigüedad sobre dónde van el C<if> y el C<else>.  Si usa C<unless> en lugar de C<if>, el sentido del test se invierte. Como C<if>, C<unless> puede ser seguido por C<else>. C<unless> puede, incluso, ser seguido por una o más sentencias C<elsif>, aunque quizás quiera pensarlo dos veces antes de usar esta construcción del lenguaje tan particular, lo mismo que cualquiera que al leer su código tendrá que pensar al menos dos veces antes de entender qué ha querido decir.

La sentencia C<while> ejecuta el bloque mientras la expresión sea L<verdadera|/"Verdad y Falsedad">.
La sentencia C<until> ejecuta el bloque mientras la expresión sea falsa.
La ETIQUETA es opcional, y si está presente, consiste en un identificador seguido por el carácter dos puntos.  La ETIQUETA identifica el bucle para las sentencias de control de bucle C<next>, C<last> y C<redo>.
Si la ETIQUETA se omite, las sentencias de control de bucle se refieren al bucle más interior en que se encuentren.  Esto puede incluir el analizar la pila de llamadas, de forma dinámica, en tiempo real, para encontrar la ETIQUETA.  Tal desesperado comportamiento lanzará un aviso si usa el pragma C<use warnings> o la opción B<-w>.

Si existe un BLOQUE C<continue>, siempre es ejecutado justo antes de que la condición sea evaluada de nuevo.  Así, puede ser usada para incrementar una variable de bucle, incluso cuando el ciclo ha sido parado por medio de la sentencia C<next>.

Hay módulos de extensiones que también pueden engancharse en el intérprete de Perl para definir nuevas clases de sentencias compuestas.  Son presentadas por un identificador que la extensión reconoce, y la sintaxis que le sigue se define enteramente por la extensión.  Si es usted un implementador, mire L<perlapi/PL_keyword_plugin> para informarse sobre este mecanismo.  Si está usando un módulo así, mire la documentación del módulo para ver los detalles de la sintaxis que define.

=head2 Control de bucles
X<loop control> X<loop, control> X<next> X<last> X<redo> X<continue> X<control de bucles> X<bucle, control>

El comando C<next> inicia la siguiente iteración del bucle:

    LINEA: while (<STDIN>) {
	next LINEA if /^#/;	# descartar comentarios
	...
    }

El comando C<last> sale inmediatamente del bucle en cuestión.  El bloque C<continue>, si está, no es ejecutado:

    LINEA: while (<STDIN>) {
	last LINEA if /^$/;	# salir cuando se termine la cabecera
	...
    }

El comando C<redo> reinicia la iteración sin evaluar de nuevo la condición.  El bloque C<continue>, si está, no es ejecutado.
Este comando se usa, normalmente, por los programas que quieren engañarse a sí mismos sobre lo que fue introducido.

Por ejemplo, cuando se procesa un fichero como F</etc/termcap>.
Si las líneas de entrada acaban en contra barras para indicar continuación, querrá saltarlo y obtener el siguiente registro.

    while (<>) {
	chomp;
	if (s/\\$//) {
	    $_ .= <>;
	    redo unless eof();
	}
	# ahora procese $_
    }

que es la versión corta de la versión más explícita:

    LINEA: while (defined($linea = <ARGV>)) {
	chomp($linea);
	if ($linea =~ s/\\$//) {
	    $linea .= <ARGV>;
	    redo LINEA unless eof(); # ¡no eof(ARGV)!
	}
	# ahora procese $linea
    }

Note que si existiese un bloque C<continue> en este código, sería ejecutado sólo en las líneas descartadas por la expresión regular (debido a que C<redo> salta el bloque C<continue>). Un bloque C<continue> se usa a menudo para reiniciar contadores de línea o patrones de un sólo uso:

    # inspirado por :1,$g/fred/s//WILMA/
    while (<>) {
	?(fred)?    && s//WILMA $1 WILMA/;
	?(barney)?  && s//BETTY $1 BETTY/;
	?(homer)?   && s//MARGE $1 MARGE/;
    } continue {
	print "$ARGV $.: $_";
	close ARGV  if eof();		# reset $.
	reset	    if eof();		# resetea ?patrón?
    }

Si la palabra C<while> se reemplaza por la palabra C<until>, el sentido del test se invierte, pero la condición es comprobada siempre antes de la primera iteración.

Las sentencias de control de bucle no funcionan en un C<if> o C<unless>, porque no son bucles.  Aunque puede doblar las llaves para crearlos.

    if (/patrón/) {{
	last if /fred/;
	next if /barney/; # mismo efecto que "last", pero no se ve muy claro
	# hacer algo aquí
    }}

Esto funciona así por el hecho de que un bloque, por sí mismo, actúa como un bucle que se ejecuta una sola vez. Ver L<"BLOQUES básicos">.

La forma C<while/if BLOQUE BLOQUE>, existente en Perl 4, ya no está disponible.   Reemplace cada ocurrencia de C<if BLOQUE> por C<if (do BLOQUE)>.

=head2 Bucles for
X<for> X<foreach>

El estilo de los bucles C<for> del C funcionan igual que el correspondiente bucle C<while>. Es decir:

    for ($i = 1; $i < 10; $i++) {
	...
    }

es lo mismo que:

    $i = 1;
    while ($i < 10) {
	...
    } continue {
	$i++;
    }

Hay una pequeña diferencia: si hay variables declaradas con C<my> en la sección de inicialización del C<for>, el ámbito léxico de estas variables es exactamente el bucle C<for> (el cuerpo del bucle y las secciones de control).
X<my>

Además de recorrer los índices de los arrays, C<for> puede prestarse a otras interesantes aplicaciones.  Aquí hay una que evita el problema, al comprobar explícitamente, por el fin de fichero en un descriptor de fichero interactivo, que parezca que su programa se haya quedado colgado.
X<eof> X<end-of-file> X<fin de fichero>

    $en_un_tty = -t STDIN && -t STDOUT;
    sub prompt { print "¿si? " if $en_un_tty }
    for ( prompt(); <STDIN>; prompt() ) {
	# haciendo algo
    }

Usando C<readline> (o el operador C<< <EXPR> >>) como condición de un bucle C<for>, es una forma abreviada de escribir lo siguiente.  Este comportamiento es el mismo que en la condición de un bucle C<while>.
X<readline> X<< <> >>

    for ( prompt(); defined( $_ = <STDIN> ); prompt() ) {
        # hacer algo
    }

=head2 Bucles Foreach
X<for> X<foreach>

El bucle C<foreach> itera sobre los valores de una lista normal y pone la variable VAR a cada uno de los elementos de la lista.  Si la variable es precedida por el identificador C<my>, entonces su ámbito es léxicamente local y por eso es visible sólo dentro del bucle.  Dicho de otra forma, la variable es implícitamente local al bucle y recupera su valor anterior al salir del bucle.  Si la variable fue previamente declarada con C<my>, usará esta variable en vez de la global, pero sigue siendo local en el bucle.  Esta implícita localización ocurre I<solamente> en un bucle C<foreach>.
X<my> X<local>

El identificador C<foreach> es realmente un sinónimo del identificador C<for>, así que puede usar C<foreach> por legibilidad o C<for> por brevedad.  (O si le es más familiar el shell Bourne que el I<csh>, escribir C<for> le será más natural). Si VAR se omite, C<$_> se inicializa con cada valor.
X<$_>

Si cualquier elemento de LISTA es un I<lvalue> (un valor que puede ponerse en el lado izquierdo de una expresión de asignación), puede modificarlo, modificando VAR dentro del bucle.  Recíprocamente, si cualquier elemento de LISTA NO es un I<lvalue>, cualquier intento de modificar este elemento fallará (provocará un error).  En otras palabras, la variable índice del bucle C<foreach> es implícitamente un alias de cada elemento de la lista sobre la que está iterando.
X<alias>

Si cualquier parte de la LISTA es un array, C<foreach> quedará confundido si añade o quita elementos dentro del cuerpo del bucle, por ejemplo, al usar C<splice>.   Así que no lo haga.
X<splice>

C<foreach> probablemente no hará lo esperado si VAR está enlazada a otra variable especial.   Tampoco haga esto.

Ejemplos:

    for (@array) { s/foo/bar/ }

    for my $elem (@elementos) {
	$elem *= 2;
    }

    for $cuenta (10,9,8,7,6,5,4,3,2,1,'BOOM') {
	print $cuenta, "\n"; sleep(1);
    }

    for (1..15) { print "Feliz Navidad\n"; }

    foreach $item (split(/:[\\\n:]*/, $ENV{TERMCAP})) {
	print "Item: $item\n";
    }

Aquí hay un ejemplo de cómo un programador de C codificaría un determinado algoritmo en Perl:

    for (my $i = 0; $i < @ary1; $i++) {
	for (my $j = 0; $j < @ary2; $j++) {
	    if ($ary1[$i] > $ary2[$j]) {
		last; # no puede salir fuera :-(
	    }
	    $ary1[$i] += $ary2[$j];
	}
	# aquí es adonde last me lleva
    }

Y aquí está cómo un programador de Perl, más cómodo con el lenguaje, puede hacer:

    EXTERNO: for my $wid (@array1) {
    INTERNO:   for my $jet (@ary2) {
		next EXTERNO if $wid > $jet;
		$wid += $jet;
	     }
	  }

¿Ha visto que es mucho más fácil?  Es más limpio, seguro y rápido.  Es más limpio porque es menos ruidoso.  Es más seguro porque si se añade nuevo código entre los bucles interno y externo, ese nuevo código no será ejecutado accidentalmente.  El C<next> explícitamente itera sobre el otro bucle en vez de meramente terminar el interno.  Y es más rápido porque Perl ejecuta un sentencia C<foreach> más rápidamente que su equivalente en un bucle C<for>.

=head2 BLOQUES Básicos
X<block> X<bloque>

Un BLOQUE por sí mismo (etiquetado o no) es semánticamente equivalente a un bucle que se ejecuta una vez.  Así que puede usar cualquiera de las sentencias de control de bucle dentro de él para salir o reiniciarlo.  (Note que esto I<NO> es verdad en C<eval{}>, C<sub{}>, y contrariamente a la creencia popular, bloques C<do{}>, que I<NO> cuentan como bucles). El bloque C<continue> es opcional.

La construcción BLOQUE puede ser usada para emular estructuras I<switch>.

    SWITCH: {
	if (/^abc/) { $abc = 1; last SWITCH; }
	if (/^def/) { $def = 1; last SWITCH; }
	if (/^xyz/) { $xyz = 1; last SWITCH; }
	$nada = 1;
    }

Estas construcciones son muy frecuentes, porque las versiones anteriores de Perl no tenían oficialmente una sentencia C<switch>.

=head2 Sentencias Switch
X<switch> X<case> X<given> X<when> X<default>

A partir de Perl 5.10, puede decir

    use feature "switch";

que activa la característica conmutador, que se basa estrechamente en la propuesta en Perl 6.

Los identificadores C<given> y C<when> son análogos a C<switch> y C<case> en otros lenguajes, por lo que el código anterior podrá ser escrito como

    given($_) {
	when (/^abc/) { $abc = 1; }
	when (/^def/) { $def = 1; }
	when (/^xyz/) { $xyz = 1; }
	default { $nada = 1; }
    }

Esta construcción es muy flexible y poderosa. Por ejemplo:

    use feature ":5.10";
    given($foo) {
	when (undef) {
	    say '$foo está indefinido';
	}
	when ("foo") {
	    say '$foo es la cadena "foo"';
	}
	when ([1,3,5,7,9]) {
	    say '$foo es un dígito impar';
	    continue; # sigue en el siguiente
	}
	when ($_ < 100) {
	    say '$foo es numéricamente menor que 100';
	}
	when (\&comprobacion_complicada) {
	    say 'una comprobación complicada para $foo es verdadera';
	}
	default {
	    die q(No sé qué hacer con $foo);
	}
    }

C<given(EXPR)> asignará el valor de EXPR a C<$_> dentro del ámbito léxico del bloque, algo similar a

	do { my $_ = EXPR; ... }

excepto que el bloque es, automáticamente, parado, por un C<when> con éxito o un explícito C<break>.

La mayor parte del poder viene de la coincidencia inteligente implícita:

	when($foo)

es exáctamente equivalente a

	when($_ ~~ $foo)

En la mayor parte de los casos, C<when(EXPR)> es tratado como una coincidencia inteligente implícita de C<$_>, es decir, C<$_ ~~ EXPR>. (Ver L</"Coincidencia inteligente en detalle"> para más información sobre coincidencia inteligente) Pero cuando EXPR es una de las excepciones abajo indicadas, se usa directamente como un booleano:

=over 4

=item *

una subrutina o llamada a un método

=item *

una coincidencia con una expresión regular, es decir, C</REGEX/> o C<$foo =~ /REGEX/>, o una negación de una coincidencia con una expresión regular (C<!/REGEX/> o C<$foo !~ /REGEX/>).

=item *

una comparación, como C<$_ E<lt> 10> o C<$x eq "abc"> (o, naturalmente, C<$_ ~~ $c>)

=item *

C<defined(...)>, C<exists(...)>, o C<eof(...)>

=item *

una expresión negada C<!(...)> o C<not (...)>, o una operación lógica exclusiva-or C<(...) xor (...)>.

=item *

un operador de test de fichero, con la excepción de C<-s>, C<-M>, C<-A>, y C<-C>, que devuelven valores numéricos, no booleanos.

=item *

los operadores biestables C<..> y C<...>.

=back

En estos casos el valor de EXPR es usado directamente como un booleano.

Además:

=over 4

=item *

Si EXPR es C<... && ...> o C<... and ...>, el test se aplica recursivamente a ambos argumentos. Si I<ambos> argumentos pasan el test, entonces el argumento es tratado como un booleano.

=item *

Si EXPR es C<... || ...>, C<... // ...> o C<... or ...>, el test se aplica recursivamente al primer argumento.

=back

Estas reglas parecen complicadas, pero usualmente harán lo que usted desea. Por ejemplo, puede escribir:

    when (/^\d+$/ && $_ < 75) { ... }

Otro método abreviado útil es que, si usa un array o hash literal, como el argumento a C<given>, se convierte en una referencia. Asi que, por ejemplo, C<given(@foo)> es lo mismo que C<given(\@foo)>.

C<default> se comporta exactamente igual que C<when(1 == 1)>, que es lo mismo que decir que siempre coincide.

=head3 Saliendo

Puede usar el identificador C<break> para salir del bloque C<given> actual.  Cada bloque C<when> se termina, implícitamente, con un C<break>.

=head3 Atravesar

Puede usar el identificador C<continue> para pasar de un caso al siguiente:

    given($foo) {
	when (/x/) { say '$foo contiene una x'; continue }
	when (/y/) { say '$foo contiene una y' }
	default    { say '$foo no contiene una y' }
    }

=head3 Conmutando en un bucle

En lugar de usar C<given()>, puede usar un bucle C<foreach()>.
Por ejemplo, aquí hay una manera de contar cuántas veces aparece una cadena particular en un array:

    my $cuenta = 0;
    for (@array) {
	when ("foo") { ++$cuenta }
    }
    print "\@array contiene $cuenta copias de 'foo'\n";

Al final de todos los bloques C<when>, hay un implícito C<next>.
Puede invalidar esto con un explícito C<last> si solo está interesado en la primera coincidencia.

Esto no funciona si explícitamente especifica una variable de bucle, como en C<for $item (@array)>. Tiene que usar la variable por defecto C<$_>. (Puede usar C<for my $_ (@array)>.)

=head3 Coincidencia inteligente en detalle

El comportamiento de una coincidencia inteligente depende del tipo de cosa que sean sus argumentos. El comportamiento está determinado por la siguiente tabla: la primera fila que se pueda aplicar determina el comportamiento de la coincidencia (que principalmente está determinado por el tipo del operando derecho). Note que la coincidencia inteligente, implícitamente, desreferencia cualquier referencia hash o array no bendecida, así que las entradas "Hash" y "Array" se aplican en estos casos. (Para referencias bendecidas, se aplica la entrada "Objeto")

Note que la columna "Código similar" no siempre es una interpretación exacta.  Por ejemplo, el operador de coincidencia inteligente intenta siempre abreviar donde sea posible, mientras que C<grep>, no.

    $a          $b         Tipo de Coincidencia             Código similar
    ==========  =========  ===============================  =============
    Cualquiera  undef      indefinido                       !defined $a

    Cualquiera  Objeto     invoca ~~ sobrecargado en $objeto, o muere

    Hash        RefCódigo  sub verdad por cada clave[1]     !grep { !$b->($_) } keys %$a
    Array       RefCódigo  sub verdad por cada elemento[1]  !grep { !$b->($_) } @$a
    Cualquiera  RefCódigo  escalar sub verdad               $b->($a)

    Hash        Hash       claves hash identicas (cada clave está en ambos hash)
    Array       Hash       claves hash intersección         grep { exists $b->{$_} } @$a
    Regex       Hash       grep clave hash                  grep /$a/, keys %$b
    undef       Hash       siempre falso (undef no puede ser una clave)
    Cualquiera  Hash       existencia de un valor hash      exists $b->{$a}

    Hash        Array      claves hash intersección         grep { exists $a->{$_} } @$b
    Array       Array      arrays son comparables[2]
    Regex       Array      grep array                       grep /$a/, @$b
    undef       Array      array contiene undef             grep !defined, @$b
    Cualquiera  Array      coincidencia inteligente de un elemento del array[3]
                                               grep $a ~~ $_, @$b

    Hash        Regex      grep clave hash                  grep /$b/, keys %$a
    Array       Regex      grep array                       grep /$b/, @$a
    Cualquiera  Regex      coincidencia de patrones         $a =~ /$b/

    Objeto      Cualquiera invoca ~~ sobrecargado en $objeto, o termina:
    Cualquiera  Número     igualdad numérica                $a == $b
    Número      numeral[4] igualdad numérica                $a == $b
    undef       Cualquiera indefinido                       !defined($b)
    Cualquiera  Cualquiera igualdad de cadenas              $a eq $b

 1 - hash o array vacíos coincidirán.
 2 - es decir, cada elemento coincide inteligentemente con cada elemento del mismo índice.
     del otro array. [3]
 3 - Si se encuentra una referencia circular, regresamos a la igualdad referencial.
 4 - o un número real, o una cadena que se parezca a un número.

=head3 Coincidencia personalizada vía sobrecarga del operador

Puede cambiar la forma en que un objeto es comparado, sobrecargando el operador C<~~>. De esta manera se altera la semántica normal de la coincidencia inteligente.

Se debe hacer notar que C<~~> rechazará funcionar en objetos que no lo sobrecargan (para no depender de la estructura subyacente del objeto)

Note también que las reglas de coincidencias de la coincidencia inteligente toman precedencia sobre la sobrecarga, así que si C<$obj> tiene sobrecargado la coincidencia inteligente, entonces

    $obj ~~ X

no invocará automáticamente el método sobrecargado con X como argumento; en su lugar, será consultada la tabla anterior, y en base al tipo de X, la sobrecarga será o no invocada.

Ver L<sobrecarga>.

=head3 Diferencias con Perl 6

La coincidencia inteligente de Perl 5 y las construcciones C<given>/C<when> no son completamente idénticas a sus análogas en Perl 6. La diferencia más visible es que, en Perl 5, los paréntesis son requeridos alrededor del argumento en C<given()> y C<when()> (excepto cuando éste último se usa como modificador de sentencias) Los paréntesis en Perl 6 son siempre opcionales en construcciones de control, como en C<if()>, C<while()>, o C<when()>; no pueden ser opcionales en Perl 5, sin ganar una gran confusión, porque Perl 5 interpretaría la expresión

  given $foo {
    ...
  }

como si el argumento a C<given> fuera un elemento del hash C<%foo>, interpretando las llaves como la sintaxis de un elemento de un hash.

La tabla de coincidencias inteligentes no es idéntica a la propuesta por la especificación Perl 6, principalmente debido a las diferencias entre los modelos de datos entre Perl 6 y Perl 5.

En Perl 6, C<when()> siempre hará una coincidencia inteligente con sus argumentos, mientras que en Perl 5 es conveniente suprimir esta coincidencia inteligente en ciertas situaciones, como se ha documentado anteriormente. (La diferencia es incluso mayor, porque Perl 5 no tiene, incluso internamente, un tipo booleano)

=head2 Goto
X<goto>

Aunque no sea muy querido, Perl soporta la sentencia C<goto>.  Existen tres formas: C<goto>-ETIQUETA, C<goto>-EXPR y C<goto>-&NOMBRE.  La ETIQUETA de un bucle no es realmente un destino válido para un C<goto>; sólo es el nombre del bucle.

La forma C<goto>-ETIQUETA busca la sentencia etiquetada con ETIQUETA y continua la ejecución desde allí.  No puede ser usado en ninguna construcción que requiera inicialización, como una subrutina o un bucle C<foreach>.  Tampoco puede ir en una construcción que sea optimizada.  Puede ser utilizada para ir a casi cualquier sitio que esté dentro del ámbito dinámico, incluyendo fuera de las subrutinas, pero es normalmente mucho mejor otras construcciones como C<last> o C<die>.  El autor de Perl nunca ha sentido la necesidad de usar esta forma de C<goto> (en Perl, desde luego. C es otra historia).

La forma C<goto>-EXPR espera un nombre de etiqueta, cuyo ámbito será resuelto dinámicamente.  Esto permite crear C<goto> calculados como en FORTRAN, pero no está necesariamente recomendado si usted está optimizando, durante el mantenimiento:

    goto(("FOO", "BAR", "GLARCH")[$i]);

La forma C<goto>-&NOMBRE es muy mágica, y sustituye a una llamada a una subrutina con nombre desde la actual subrutina que se está ejecutando.  Esto se usa por subrutinas C<AUTOLOAD()> que desean cargar otra subrutina y fingen que esta otra subrutina ha sido llamada en primer lugar (excepto que cualquier modificación a C<@_> en la subrutina actual se propaga a la otra). Después del C<goto>, ni siquiera C<caller()> será capaz de decir qué rutina fue llamada en primer lugar.

En casi todos los casos como este, es usualmente una mejor, mucho mejor idea, usar los mecanismos de control de flujo de C<next>, C<last> o C<redo> en vez de recurrir a C<goto>.  Para ciertas aplicaciones, la pareja C<eval{}> y C<die()> puede ser un prudente planteamiento para el procesamiento de excepciones.

=head2 POD: Documentación embebida
X<POD> X<documentación> X<documentación>

Perl tiene un mecanismo para entremezclar documentación y código fuente.
Mientras que él espera el comienzo de una nueva sentencia, si el compilador encuentra una línea que comienza con un signo de igual y una palabra, como esta:

    =head1 ¡Aquí estarán los Pods!

Entonces este texto y el siguiente hasta incluir una línea que comience por C<=cut> será ignorada.  El formato del texto intermedio está descrito en L<perlpod>.

Esto le permite entremezclar código fuente y texto de la documentación libremente, como por ejemplo

    =item snazzle($)

    La función snazzle() se convertirá en la más espectacular
    forma que pueda posiblemente imaginar, incluyendo
    pirotecnia cibernética.

    =cut devuelta al compilador, ¡lejos de este material pod!

    sub snazzle($) {
	my $cosita = shift;
	.........
    }

Note que los traductores pod suelen mirar sólo en los párrafos que comiencen por una directiva pod (hace el parseo más fácil), mientras que el compilador realmente sabe mirar por las secuencias pod incluso en el medio de un párrafo.  Esto significa que el siguiente material secreto será ignorado tanto por el compilador como por los traductores.

    $a=3;
    =material secreto
     warn "Ni POD ni CÓDIGO!?"
    =cut regreso
    print "tengo $a\n";

Probablemente no se dará cuenta de que el C<warn()> ha sido comentado para siempre.
No todos los traductores pod están bien entrenados a este respecto y quizá el compilador sea más quisquilloso.

Uno puede también usar directivas pod para comentar, de forma rápida, una sección de código.

=head2 Viejos comentacios sencillos (¡No!)
X<comment> X<line> X<#> X<preprocessor> X<eval> X<comentario> X<línea>

Perl puede procesar directivas como lo hace el preprocesador de C.  Usando esto, uno puede controlar la idea que tiene Perl de los nombres de archivos y número de líneas en los mensajes de avisos y errores (especialmente para las cadenas procesadas con C<eval()>).  La sintaxis de este mecanismo es el mismo que para la mayoría de preprocesadores de C: coincide con la expresión regular

    # ejemplo: '# line 42 "nuevo_fichero.plx"'
    /^\#   \s*
      line \s+ (\d+)   \s*
      (?:\s("?)([^"]+)\2)? \s*
     $/x

con C<$1> siendo el número de línea para la línea siguiente y C<$3> siendo el nombre de fichero opcional (especificado con o sin comillas).

Existe obviamente un problema con esta directiva: los I<debuggers> y perfiladores sólo mostrarán la última línea del código fuente que aparece en un número de línea en particular de un determinado fichero.  Hay que tener cuidado para no causar colisiones de números de línea en el código que pretenda depurar más tarde.

Aquí hay algunos ejemplos que será capaz de escribir en la línea de comandos del shell:

    % perl
    # line 200 "bzzzt"
    # el `#' en la línea anterior debe ser el primer carácter de la línea
    die 'foo';
    __END__
    foo at bzzzt line 201.

    % perl
    # line 200 "bzzzt"
    eval qq[\n#line 2001 ""\ndie 'foo']; print $@;
    __END__
    foo at - line 2001.

    % perl
    eval qq[\n#line 200 "foo bar"\ndie 'foo']; print $@;
    __END__
    foo at foo bar line 200.

    % perl
    # line 345 "goop"
    eval "\n#line " . __LINE__ . ' "' . __FILE__ ."\"\ndie 'foo'";
    print $@;
    __END__
    foo at goop line 345.

=cut
