=head1 NOMBRE

perlrequick - Guía rápida de las expresiones regulares

=head1 DESCRIPCIÓN

Esta página cubre los conceptos básicos de comprensión, creación y uso de expresiones regulares ("I<regex>") en Perl.


=head1 La guía

=head2 Correspondencia de una sola palabra

La forma más simple de I<regex> es solo una palabra, o más generalmente, una cadena de caracteres.  Una I<regex> que conste de una palabra coincide con cualquier cadena que contenga esa palabra:

    "Hola Mundo" =~ /Mundo/;  # coincide

en esta sentencia, C<Mundo> es una I<regex> y los delimitadores C<//> que engloban a C</Mundo/> le dicen a Perl que busque una cadena para conseguir una coincidencia.  El operador C<=~> asocia la cadena con la coicidencia de la I<regex>, y produce un valor de verdad si la I<regex> coincide, o falso si la I<regex> no coincide.  En nuestro caso, C<Mundo> coincide con la segunda palabra de C<"Hola Mundo">, así que la expresión es verdadera.  Esta idea tiene algunas variaciones.

Expresiones como esta son útiles para los condicionales:

    print "Sí coincide\n" if "Hola Mundo" =~ /Mundo/;

El sentido de la coincidencia se puede invertir mediante el uso del operador C<!~>:

    print "No coincide\n" if "Hola Mundo" !~ /Mundo/;

La cadena literal en la I<regex> puede ser reemplazado por una variable:

    $saludo = "Mundo";
    print "Sí coincide\n" if "Hola Mundo" =~ /$saludo/;

Si está haciendo la búsqueda en C<$_>, la parte C<$_ =~> puede ser omitida:

    $_ = "Hola Mundo";
    print "Sí coincide\n" if /Mundo/;

Finalmente, los delimitadores por defecto C<//> para una coincidencia pueden ser cambiados por cualesquiera otros delimitadores arbitrarios poniendo delante C<'m'>:

    "Hola Mundo" =~ m!Mundo!;    # coincide, delimitado con '!'
    "Hola Mundo" =~ m{Mundo};    # coincide, note la correspondencia de las '{}'
    "/usr/bin/perl" =~ m"/perl"; # coincide después de '/usr/bin',
                                 # '/' se convierte en un carácter ordinario

Las I<regexes> deben coincidir con una parte de la cadena I<exactamente> en el mismo orden o tamaño de caja, para que la sentencia sea verdadera:

    "Hola Mundo" =~ /mundo/;   # no coincide, es sensible al tamaño de caja
    "Hola Mundo" =~ /a M/;     # coincide, ' ' es un carácter ordinario
    "Hola Mundo" =~ /Mundo /;  # no coincide, no hay un ' ' al final de la cadena

Perl siempre coincidirá con el primer punto de coincidencia de la cadena:

    "Hola Mundo" =~ /o/;            # coincide con la 'o' en 'Hola'
    "ese sombrero es rojo" =~ /es/; # coincide con 'es' en 'ese'

No todos los caracteres pueden ser usados 'tal cual' en una coincidencia.  Algunos caracteres llamados B<metacaracteres>, están reservados para ser usados en la notación I<regex>.
Los metacaracteres son

    {}[]()^$.|*+?\

Un metacarácter puede ser buscado poniendo una barra diagonal inversa delante de él:

    "2+2=4" =~ /2+2/;                       # no coincide, + es un metacarácter
    "2+2=4" =~ /2\+2/;                      # coincide, \+ es tratado como un + cualquiera
    'C:\WIN32' =~ /C:\\WIN/;                # coincide
    "/usr/bin/perl" =~ /\/usr\/bin\/perl/;  # coincide

En esta última I<regex>, la barra inclinada C<'/'> también es escapada, porque está siendo usada para delimitar la I<regex>.

Caracteres ASCII no imprimibles son representados por B<secuencias de escape>.
Ejemplos comunes son C<\t> para un tabulador, C<\n> para un carácter de nueva línea, y C<\r>
para un retorno de carro.  Bytes arbitrarios son representados por secuencias de escape octales, como por ejemplo, C<\033>, o secuencias de escape hexadecimales, como por ejemplo C<\x1B>:

    "1000\t2000" =~ m(0\t2)      # coincide
    "cat"      =~ /\143\x61\x74/ # coincide en ASCII, pero es una forma extraña de deletrear cat

Las I<regexes> son tratadas como si fueran cadenas doblemente entrecomilladas, así que la funciona la sustitución de variables:

    $foo = 'casa';
    'casa del gato' =~ /$foo del gato/;   # coincide
    'gato casado' =~ /gato ${foo}do/;     # coincide

Con todas estas I<regexes> que hemos visto, si la I<regex> coincide en alguna parte de la cadena, se considera que ha ocurrido una coincidencia.  Para especificar I<dónde> debería coincidir, usaríamos los metacaracteres B<ancla> C<^> y C<$>.  El ancla C<^> significa que coincide con el comienzo de la cadena y el ancla C<$> significa que coincide con el final de la cadena, o antes de un carácter de nueva línea al final de la cadena.  Algunos ejemplos:

    "ama de casa" =~ /casa/;           # coincide
    "ama de casa" =~ /^casa/;          # no coincide
    "ama de casa" =~ /casa$/;          # coincide
    "ama de casa\n" =~ /casa$/;        # coincide
    "ama de casa" =~ /^ama de casa$/;  # coincide

=head2 Usando clases de caracteres

Una B<clase de caracteres> permite que un conjunto de caracteres, en lugar de uno solo, coincidan en un punto en particular en una I<regex>.
Las clases de caracteres se indican con corchetes C<[...]>, con el conjunto de caracteres que pueden ser posiblemente encontrados en su interior.  Aquí hay algunos ejemplos:

    /gato/;           # coincide con 'gato'
    /[gr]at[oa]/;     # coincide con 'gato', 'gata', 'rato' o 'rata'
    "abc" =~ /[cab]/; # coincide con 'a'

En esta última sentencia, aunque C<'c'> es el primer carácter en la clase, el primer punto en que la I<regex> coincide es con C<'a'>.

    /[Ss][iI]/;     # coincide con 'si', 'sI', 'Si' y 'SI'
    /si/i;          # también coincide con 'si' sin importar el tamaño de caja

El último ejemplo muestra una coincidencia con un B<modificador> C<'i'>, lo que hace que la búsqueda sea independiente del tamaño de caja.

Las clases de caracteres también tienen caracteres comunes y especiales, pero los conjuntos de caracteres ordinarios y especiales dentro de una clase de caracteres son diferentes a los que están fuera de una clase de caracteres.  Los caracteres especiales para una clase de caracteres son C<-]\^$> y son encontrados si antes se les escapa:

   /[\]c]def/; # coincide con ']def' o 'cdef'
   $x = 'bcr';
   /[$x]at/;   # coincide con 'bat, 'cat' o 'rat'
   /[\$x]at/;  # coincide con '$at' o 'xat'
   /[\\$x]at/; # coincide con '\at', 'bat, 'cat' o 'rat'

El carácter especial C<'-'> actúa como un operador de rango dentro de las clases de caracteres, así que los poco manejables C<[0123456789]> y C<[abc...xyz]> se convierten en los esbeltos C<[0-9]> y C<[a-z]>:

    /item[0-9]/;    # coincide con 'item0' o ... o 'item9'
    /[0-9a-fA-F]/;  # coincide con un dígito hexadecimal

Si C<'-'> es el primer o último carácter en una clase de caracteres, es tratado como un carácter normal.

El carácter especial C<^> en la primera posición de una clase de caracteres denota un B<clase de caracteres negada>, que coincide con cualquier carácter, excepto los indicados en los corchetes.  Tanto C<[...]> como C<[^...]> deben coincidir con un carácter, o la coincidencia falla.  Entonces

    /[^a]at/;  # no coincide con 'aat' o 'at', pero coincide
               # con todos los demás: 'bat', 'cat, '0at', '%at', etc.
    /[^0-9]/;  # coincide con un carácter no numérico
    /[a^]at/;  # coincide con 'aat' o '^at'; aquí, '^' es un carácter normal

Perl tiene varias abreviaturas para las clases de caracteres más comunes. (Estas definiciones son las que usa Perl en el modo seguro ASCII con el modificador C</a>.
De lo contrario podría coincidir con muchos más caracteres Unicode no ASCII.  Vea L<perlrecharclass/Secuencias con barra diagonal inversa> para más detalles).

=over 4

=item *

\d es un dígito y representa

    [0-9]

=item *

\s es un carácter de espacio en blanco y representa

    [\ \t\r\n\f]

=item *

\w es un carácter de palabra (alfanumérico o _) y representa

    [0-9a-zA-Z_]

=item *

\D es el negado de \d; representa cualquier carácter excepto un dígito

    [^0-9]

=item *

\S es el negado de \s; representa cualquier carácter que no sea un espacio en blanco

    [^\s]

=item *

\W es el negado de \w; representa cualquier carácter que no forme parte de una palabra

    [^\w]

=item *

El punto '.' coincide con cualquier carácter, excepto "\n"

=back

Las abreviaturas C<\d\s\w\D\S\W> se pueden utilizar tanto dentro como fuera de las clases de caracteres.  Aquí hay algunos en uso:

    /\d\d:\d\d:\d\d/; # coincide con un formato de hora hh:mm:ss
    /[\d\s]/;         # coincide con cualquier dígito o espacio en blanco
    /\w\W\w/;         # coincide con un car. de palabra, seguido por
                      # car. de no-palabra, seguido por un car. de palabra
    /..rt/;           # coincide con cualesquiera dos car., seguidos por 'rt'
    /end\./;          # coincide con 'end.'
    /end[.]/;         # lo mismo, coincide con 'end.'

El S<B<ancla de palabra> > C<\b> coincide con una frontera entre un carácter de palabra y un carácter de no-palabra: C<\w\W> o C<\W\w>:

    $x = "Housecat catenates house and cat";
    $x =~ /\bcat/;    # coincide con cat en 'catenates'
    $x =~ /cat\b/;    # coincide con cat in 'housecat'
    $x =~ /\bcat\b/;  # coincide con 'cat' al final de la cadena

En el último ejemplo, el final de la cadena se considera un límite de palabra.

=head2 Coincidiendo con esto o eso

Podemos hacer coincidir diferentes cadenas de caracteres con el metacarácter de B<alternancia> C<'|'>.  Para que coincida con C<perro> o C<gato>, formamos la I<regex> C<perro|gato>.  Al igual que antes, Perl tratará de hacer coincidir la I<regex> en el primer punto de coincidencia en la cadena.  En cada posición de carácter, Perl intentará hacer coincidir en primer lugar con la primera alternativa, C<perro>.  Si C<perro> no coincide, Perl entonces intentará la siguiente alternativa, C<gato>.
Si C<gato> tampoco corresponde, entonces la búsqueda falla y Perl se mueve a la siguiente posición en la cadena.  Algunos ejemplos:

    "gatos y perro"  =~ /gato|perro|pajaro/;  # coincide con "gato"
    "gatos y perros" =~ /perro|gato|pajaro/;  # coincide con "gato"

Aunque C<perro> es la primera alternativa en la segunda I<regex>, C<gato> coincide en primer lugar, en la cadena.

    "gato"          =~ /g|ga|gat|gato/; # coincide con "c"
    "gato"          =~ /gato|gat|ga|g/; # coincide con "gato"

En una determinada posición de carácter, la primera alternancia que permite que la I<regex> tenga éxito será la que corresponda. Aquí, todas las alternancias coinciden con la primera posición de la cadena, así que los primeros caracteres serán la coincidencia.

=head2 Agrupando cosas y jerarquía de coincidencia

Los metacaracteres de B<agrupación> C<()> permite a una parte de una I<regex> que sea tratada como una unidad.  Partes de una I<regex> son agrupadas encerrándolas entre paréntesis.  La regex C<gat(o|era)> significa que coincide con C<gat> seguido tanto por C<o> o C<era>.  Algunos ejemplos más

    /(a|b)b/;    # coincide con 'ab' o 'bb'
    /(^a|b)c/;   # coincide con 'ac' al comienzo de la cadena o 'bc' en cualquier parte

    /espanta(pajaros|)/;     # coincide con 'espantapajaros' o 'espanta'
    /espanta(pajaro(s|)|)/;  # coincide tanto con 'espantapajaros', 'espantapajaro'
                             # o 'espanta'.  Note que los grupos pueden ser anidados.

    "20" =~ /(19|20|)\d\d/;  # coincide con la alternancia nula '()\d\d',
                             # porque con '20\d\d' no coincide

=head2 Extrayendo coincidencias

Los metacaracteres de agrupación C<()> también permiten la extracción de partes de una cadena que han sido encontradas.  Para cada grupo, la parte que coincide es almacenada en las variables especiales C<$1>, C<$2>, etc.
Se pueden utilizar como variables ordinarias:

    # extraer horas, minutos, segundos
    $hora =~ /(\d\d):(\d\d):(\d\d)/;  # coincide con el formato hh:mm:ss
    $horas = $1;
    $minutos = $2;
    $segundos = $3;

En contexto de lista, una coincidencia C</regex/> con agrupaciones devolverá la lista de los valores encontrados C<($1,$2,...)>.  Así que podríamos reescribirlo como

    ($horas, $minutos, $segundos) = ($hora =~ /(\d\d):(\d\d):(\d\d)/);

Si las agrupaciones en una I<regex> están anidadas, C<$1> devuelve el grupo con el paréntesis de apertura más a la izquierda, C<$2> el paréntesis de apertura siguiente, etc. Por ejemplo, aquí hay una I<regex> compleja y sus variables de emparejamiento indicadas debajo:

    /(ab(cd|ef)((gi)|j))/;
     1  2      34

Asociado con las variables de emparejamiento C<$1> C<$2>, ... son las B<contrareferencias> C<\g1> C<\g2>, ... Las contrareferencias son variables de emparejamiento que pueden ser utilizadas I<dentro> una I<regex>:

    /(\w\w\w)\s\g1/; # encuentra secuencias como 'por por' en la cadena

C<$1>, C<$2>, ... solo se debería utilizar fuera de la I<regex>, y C<\g1>, C<\g2>, ... solo dentro de la I<regex>.

=head2 Coincidiendo con repeticiones

Los metacaracteres B<cuantificadores> C<?> C<*> C<+> C<{}> nos permiten determinar el número de repeticiones de una parte de una I<regex> que queremos considerar como coincidencia.  Los cuantificadores se colocan inmediatamente después del carácter, clase de caracteres, o agrupación que desee especificar.  Tienen los siguientes significados:

=over 4

=item *

C<a?> = coincide con 'a' 1 o 0 veces

=item *

C<a*> = coincide con 'a' 0 o más veces, es decir, cualquier número de veces

=item *

C<a+> = coincide con 'a' 1 o más veces, es decir, al menos una vez

=item *

C<a{n,m}> = con al menos C<n> veces, pero no más que C<m> veces.

=item *

C<a{n,}> = coincide con al menos C<n> o más veces

=item *

C<a{n}> = coincide exactamente C<n> veces

=back

Aquí hay algunos ejemplos:

    /[a-z]+\s+\d*/;                # coincide con una palabra en minúsculas, algún espacio, y
                                   # cualquier número de dígitos
    /(\w+)\s+\g1/;                 # coincide con palabras duplicadas de cualquier longitud
    $year =~ /^\d{2,4}$/;          # se asegura que year sea al menos 2 pero no más
                                   # de 4 dígitos
    $year =~ /^\d{4}$|^\d{2}$/;    # mejor coincidencia, descartando fechas de 3 dígitos

Estos cuantificadores tratarán de satisfacer la mayor cantidad de la cadena como sea posible, al tiempo que permita a la I<regex> coincidir.  Por lo que tenemos

    $x = 'the cat in the hat';
    $x =~ /^(.*)(at)(.*)$/; # coincide con,
                            # $1 = 'the cat in the h'
                            # $2 = 'at'
                            # $3 = ''   (0 coincidencias)

El primer cuantificador C<.*> reserva tanto de la cadena como sea posible mientras la I<regex> funcione. Al segundo cuantificador C<.*> no le queda caracteres para emparejar, así que coincide 0 veces.

=head2 Más coincidencia

Hay unas cuantas cosas más que podría querer saber sobre los operadores de coincidencia.
El modificador global C<//g> permite al operador de coincidencia emparejar dentro de una cadena tantas veces como sea posible.  En contexto escalar, coincidencias consecutivas contra una cadena hará que C<//g> salte de una coincidencia a otra, recordando la posición en la cadena a medida que avanza.
Puede obtener o establecer la posición con la función C<pos()>.
Por ejemplo,

    $x = "gato perro casa"; # 3 palabras
    while ($x =~ /(\w+)/g) {
        print "Palabra es $1, que acaba en la posición ", pos $x, "\n";
    }

imprime

    Palabra es gato, que acaba en la posición 4
    Palabra es perro, que acaba en la posición 10
    Palabra es casa, que acaba en la posición 15

Una coincidencia fallida o cambiar la cadena objetivo reinicializa la posición.  Si no desea el restablecimiento de la posición después de un fallo de coincidencia, agrege C<//c>, como en C</regex/gc>.

En contexto de lista, C<//g> devuelve una lista de las agrupaciones coincidentes, o si no hay agrupaciones, una lista de coincidencias con toda la I<regex>.  Así que

    @palabras = ($x =~ /(\w+)/g);  # coincide con,
                                   # $palabras[0] = 'gato'
                                   # $palabras[1] = 'perro'
                                   # $palabras[2] = 'casa'

=head2 Buscar y reemplazar

Buscar y reemplazar se realiza utilizando C<s/regex/reemplazo/modificadores>.
El C<reemplazo> es una cadena Perl entre comillas dobles que reemplaza en la cadena lo que haya coincidido con la C<regex>.  El operador C<=~> también se utiliza aquí para asociar una cadena con C<s///>.  Si está haciendo la búsqueda en C<$_>, el S<C<$_ =~>> puede ser omitido.  Si hay alguna coincidencia, C<s///> devuelve el número de sustituciones realizadas; de lo contrario devuelve falso.  Aquí hay algunos pocos ejemplos:

    $x = "¡Es hora de alimentar al gato!";
    $x =~ s/gato/hacker/;  # $x contiene "¡Es hora de alimentar al hacker!"
    $y = "'palabras entrecomilladas'";
    $y =~ s/^'(.*)'$/$1/;  # quita comillas simples,
                           # $y contiene "palabras entrecomilladas"

Con el operador C<s///>, las variables de emparejamiento C<$1>, C<$2>, etc, están inmediatamente disponibles para su uso en la expresión de reemplazo. Con el modificador global, C<s///g> buscará y reemplazará todas las apariciones de la I<regex> en la cadena:

    $x = "He bateado 4 de 4";
    $x =~ s/4/cuatro/;        # $x contiene "He bateado cuatro de 4"
    $x = "He bateado 4 de 4";
    $x =~ s/4/cuatro/g;       # $x contiene "He bateado cuatro de cuatro"

El modificador no destructivo C<s///r> hace que el resultado de la sustitución se devuelva en lugar de modificar C<$_> (o la variable que sea que la sustitución enlace con C<=~>):

    $x = "Me gustan los perros.";
    $y = $x =~ s/perros/gatos/r;
    print "$x $y\n"; # imprime "Me gustan los perros. Me gustan los gatos."

    $x = "Los gatos son lo más.";
    print $x =~ s/gatos/perros/r =~ s/perros/ranas/r =~ s/ranas/puercoespines/r, "\n";
    # imprime "Los puercoespines son lo más."

    @foo = map { s/[a-z]/X/r } qw(a b c 1 2 3);
    # @foo ahora es qw(X X X 1 2 3)

El modificador de evaluación C<s///e> envuelve un C<eval{...}> alrededor de la cadena de reemplazo y el resultado evaluado es sustituido en la subcadena coincidente.  Algunos ejemplos:

    # invertir todas las palabras de la cadena
    $x = 'el gato en el sombrero';
    $x =~ s/(\w+)/reverse $1/ge;   # $x contiene "le otag ne le orerbmos"

    # convierte porcentaje a decimal
    $x = "Un 39% de éxito";
    $x =~ s!(\d+)%!$1/100!e;       # $x contiene "Un 0.39 de éxito"

El último ejemplo muestra que C<s///> puede utilizar otros delimitadores, como C<s!!!> y C<s{}{}>, e incluso C<s{}//>.  Si se utilizan comillas simples C<s'''>, entonces la I<regex> y el reemplazo son tratados como cadenas entre comillas simples.

=head2 El operador split

C<split /regex/, cadena> divide la C<cadena> en una lista de subcadenas y devuelve esa lista.  La I<regex> determina la secuencia de caracteres por la que la C<cadena> es dividida.  Por ejemplo, para dividir una cadena en palabras, utilice

    $x = "Calvin y Hobbes";
    @palabra = split /\s+/, $x;  # $palabra[0] = 'Calvin'
                                 # $palabra[1] = 'y'
                                 # $palabra[2] = 'Hobbes'

Para extraer una lista de números separada por comas, use

    $x = "1.618,2.718,   3.142";
    @const = split /,\s*/, $x;  # $const[0] = '1.618'
                                # $const[1] = '2.718'
                                # $const[2] = '3.142'

Si se utiliza la I<regex> vacía C<//>, la cadena es dividida en caracteres individuales.  Si la I<regex> tiene agrupaciones, entonces la lista producida contiene las subcadenas coincidentes de los agrupaciones, así:

    $x = "/usr/bin";
    @partes = split m!(/)!, $x;  # $partes[0] = ''
                                 # $partes[1] = '/'
                                 # $partes[2] = 'usr'
                                 # $partes[3] = '/'
                                 # $partes[4] = 'bin'

Debido a que el primer carácter de $x coincidía con la I<regex>, C<split> antepuso al principio de la lista un elemento vacío.

=head1 ERRORES

Ninguno.

=head1 VEA TAMBIÉN

Esto es sólo una guía de inicio rápido.  Para una guía más a fondo sobre expresiones regulares, vea L<perlretut> y como página de referencia, L<perlre>.

=head1 AUTOR Y COPYRIGHT

Copyright (c) 2000 Mark Kvale. Todos los derechos reservados.

Este documento puede ser distribuido bajo los mismos términos que los del propio Perl.

=head2 Reconocimientos

El autor desea agradecer a Mark-Jason Dominus, Tom Christiansen, Zakharevich Ilya, Brad Hughes, y Mike Giroux por sus útiles comentarios.

=cut

