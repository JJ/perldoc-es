=head1 NOMBRE

perl591delta - qué hay de nuevo en perl v5.9.1

=head1 DESCRIPCIÓN

Este documento describe las diferencias entre las versiones de desarrollo 5.9.0 y la 5.9.1. Vea L<perl590delta> para las diferencias entre 5.8.0 y 5.9.0.

=head1 Cambios incompatibles

=head2 Los I<ivalores> de substr() ya no son de longitud fija

Los I<ivalores> devueltos por la forma de tres argumento de substr() solía ser de una "ventana de longitud fija" de la cadena original. En algunos casos esto podría causar más adelante una acción sorprendente u otro comportamiento indefinido. Ahora, la longitud de la ventana se ajusta a la longitud de la cadena asignada a él.

=head2 El atributo C<:unique> solo tiene significado para las variables globales

Ahora la aplicación de C<:unique> a variables y subrutinas léxicas se traducirá en un error de compilación.

=head1 Mejoras principales

=head2 C<$_> léxico

La variable por defecto C<$_> ahora puede ser lexicalizada, declarándola como cualquier otra variable léxica, con un simple

    my $_;

Las operaciones que tienen por defecto a C<$_> utilizarán la versión de ámbito léxica de C<$_> cuando exista, en lugar de la global C<$_>.

En un C<map> o un bloque C<grep>, si C<$_> fue previamente declarado con my(), entonces la C<$_> en el interior del bloque también es léxica, así (y solo definida para el ámbito de ese bloque).

En un ámbito donde C<$_> ha sido lexicalizada, aún puede tener acceso a la versión global de C<$_> con C<$::_>, o, más sencillamente, obviando la declaración léxica con C<our $_>.

=head2 Hashes enlazados en contexto escalar

A partir de perl 5.8.2/5.9.0, los hashes vinculados no devuelven nada útil en contexto escalar, por ejemplo cuando se utilizan como pruebas booleanas:

	if (%tied_hash) { ... }

El anterior comportamiento sin sentido era el de devolver siempre falso, independientemente de si el hash estuviera vacío o si tuviera elementos.

En la actualidad existe una interfaz para los implantadores de hashes vinculados para implementar el comportamiento de un hash en contexto escalar, a través del método SCALAR (vea L<perltie>).  Sin un método SCALAR, perl tratará de adivinar si el hash está vacío, poniéndolo a prueba si está dentro de una iteración (en este caso no puede estar vacío) o llamando a FIRSTKEY.

=head2 Formatos

Los formatos se han mejorado en varios aspectos. Un nuevo campo, C<^*>, puede ser utilizado como ancho variable, en el texto una-línea-cada-vez. Caracteres nulos son ahora manejados correctamente en líneas de la imagen. Usando C<@#> y C<~~> juntos ahora producirán un error en tiempo de compilación, ya que esos campos de formato son incompatibles.
L<perlform> ha sido mejorado, y diversos errores, corregidos.

=head2 Operadores de test de ficheros apilados

Como una nueva forma de sintaxis edulcorada, ahora es posible apilar operadores de test de ficheros. Ahora puede escribir C<-f -w -x $archivo> en una fila para querer decir C<-x $archivo && -w _ && -f _>. Vea L<perlfunc/-X>.

=head1 Módulos y Pragmata

=over 4

=item Benchmark

En C<Benchmark>, cmpthese() y timestr() usan ahora la estadística de tiempo de los hijos en lugar del de los padres, cuando el estilo seleccionado sea 'I<nop>'.

=item Carp

Los mensajes de error producidos por C<Carp> ahora incluyen espacios entre los argumentos en las listas de argumentos de funciones: esto hace que los mensajes de error largos aparezcan mejor en los navegadores y otras herramientas.

=item Exporter

C<Exporter> ahora reconoce las etiquetas de agrupación (por ejemplo, C<:name>) en cualquier lugar de la lista de importación, no sólo al principio.

=item FindBin

Se proporciona, C<de nuevo>, una función para resolver los problemas donde módulos en diferentes directorios desean utilizar FindBin.

=item List::Util

Ahora puede debilitar referencias para leer solo valores.

=item threads::shared

C<cond_wait> tiene una nueva forma de dos argumentos. Se ha añadido C<cond_timedwait>.

=back

=head1 Cambios en las herramientas

C<find2perl> ahora asume C<-print> como una acción por defecto. Anteriormente, era necesario que se especificara de forma explícita.

Una nueva utilidad, C<prove>, hace que sea fácil ejecutar una prueba de regresión individual en la línea de comandos. C<prove> es parte de Test::Harness, que los usuarios de versiones anteriores de Perl pueden instalar desde CPAN.

El depurador de Perl ahora es compatible con un comando C<save>, para salvar la historia actual en un archivo, y un comando C<i>, que imprime el árbol de herencia de su argumento (si el módulo C<Class::ISA> está instalado).

=head1 Documentación

La documentación ha sido revisada en diversos lugares para producir páginas de manual más estándares.

La longeva característica de expresiones regulares C</(?{...})/> que actualiza C<$_> y pos() está ahora documentada.

=head1 Mejoras en el rendimiento

Ordenar arrays en el mismo sitio C<@a = sort @a> ha sido optimizado para evitar crear una copia temporal del array.

Las operaciones relacionadas con el cambio de tamaño de caja en cadenas UTF-8 (uc(), lc(), C<//i>, etc) han sido muy aceleradas.

Acceso a elementos de los arrays léxicos a través de una constante numérica entre 0 y 255 es ahora más rápido. (Esto sólo así para el caso de las arrays globales.)

=head1 Arreglo de determinados errores

=head2 Errores UTF-8

Usando substr() en una cadena UTF-8 podría causar que los subsecuentes accesos a dicha cadena devuelvan basura. Esto se debió a que se almacenaban desplazamientos UTF-8 incorrectos, y ahora ya está arreglado.

join() podría devolver basura cuando la misma instrucción join() fue anteriormente usada para procesar datos de 8 bits habiendo procesado anteriormente datos UTF-8, debido a que las banderas en ese área de trabajo temporal no eran correctamente reinicializadas. Esto ha sido arreglado.

Usando claves Unicode con hashes enlazados ahora debería funcionar correctamente.

chop() y chomp() modificaban las cadenas UTF-8.  Esto ha sido corregido.

sprintf() se comportaba mal cuando la cadena de formato estaba en UTF-8. Esto ha sido arreglado.

=head2 Errores de hilado

Los hashes con el atributo C<:unique> no se hacían de sólo lectura en los nuevos hilos. Ahora lo son.

=head2 Más errores

C<$a .. $b> ahora funcionará como se espera cuando $a o $b sean C<undef>

Leyendo $^E ahora preserva $!. Anteriormente, el código en C que implementaba $^E no preservaba C<errno>, por lo que la lectura de $^E podría causar que C<errno> y, por lo tanto, C<$!> cambiaran de forma inesperada.

C<strict> no estaba en vigor en bloques evaluados en las regexp (C</(?{...})/>).

=head1 Diagnósticos nuevos y cambiados

Una nueva advertencia de obsolescencia, I<Deprecated use of my() in false conditional> (Uso obsoleto de my() en condición falsa), ha sido añadido, para advertir contra el uso de una construcción dudosa y obsoleta

    my $x if 0;

Vea L<perldiag>.

El error fatal "DESTROY creó una nueva referencia al objeto muerto" (I<DESTROY created new reference to dead object>) ya está documentada en L<perldiag>.

Un nuevo error, I<%ENV is aliased to %s> (%ENV tiene un alias en %s), se produce cuando los controles de contaminación están habilitados y cuando C<*ENV> tiene un alias (y por lo tanto ya no refleja el entorno del programa).

=head1 Cambios internos

Estas noticias solamente son importantes para usted si, o escribe código XS o le gustaría saber acerca de o quiere I<hackear> las partes internas Perl (usando Devel::Peek o cualquiera de los módulos C<B::>), o como para ejecutar Perl con la opción C<-D>.

=head2 Reordenando constantes de SVt_*

El orden relativo de las constantes que definen los diferentes tipos de C<SV> ha sido cambiados; en particular, C<SVt_PVGV> ha sido movido antes de C<SVt_PVLV>, C<SVt_PVAV>, C<SVt_PVHV> y C<SVt_PVCV>.  Es poco probable que no haya ninguna diferencia a menos que tenga algún código que, explícitamente, haga suposiciones con respecto a este ordenamiento. (La jerarquía de la herencia de los objetos C<B::*> ha sido cambiada para reflejar esto.)

=head2 Eliminación de los símbolos CPP

Los símbolos del preprocesador de C C<PERL_PM_APIVERSION> y C<PERL_XS_APIVERSION>, que se supone que deben almacenar el número de versión de la versión binaria más antigua de perl que es compatible a nivel binario (incluido compatible a nivel de código fuente) con la actual, no se utilizaban, y a veces tenían valores erróneos. Han sido eliminados.

=head2 Menos espacio usado por las operaciones

La estructura C<BASEOP> ahora ocupa menos espacio. El campo C<op_seq> ha sido eliminado y sustituido por dos campos de un bit, C<op_opt> y C<op_static>.
C<opt_type> es ahora de 9 bits de largo. (Por consiguiente, la clase C<B::OP> ya no proporciona un método C<seq>.)

=head2 Nuevo analizador

El analizador de Perl ahora es generado por bison (que antes solía ser generado por byacc). Como resultado de ello, parece ser un poco más robusto.

=head1 Configuración y construcción

C<Configure> ahora invoca retrollamadas, independientemente del valor de la variable que se requiera. Retrollamadas anteriores solo se invocaban en la rama C<case $variable $define)>. Este cambio sólo debe afectar a los mantenedores de la plataforma al escribir sugerencias en los archivos de configuración.

La portabilidad y la limpieza de los archivos makefile en Win32 ha sido mejorada.

=head1 Problemas conocidos

Todavía persisten un par de problemas en la implementación de la variable léxica C<$_>: no funciona dentro de los bloques C</(?{...})/> y con respecto a la función incorporada reverse() utilizada sin argumentos. (Vea las pruebas TODO en F<t/op/mydef.t>.)

=head2 Problemas específicos por plataforma

La prueba F<ext/IPC/SysV/t/ipcsysv.t> puede fallar en OpenBSD. Esto aún no ha sido diagnosticado.

En algunas configuraciones en AIX 5, una prueba en F<lib/Time/Local.t> falla.
Cuando se configura con dobles largos, perl puede fallar las pruebas 224 a 236 en F<t/op/pow.t> en la misma plataforma.

Para compilaciones con soporte de hilos, se ha informado que F<ext/threads/shared/t/wait.t> falla en algunos test, en HP-UX 10.20.

=head1 Por hacer en perl 5.10.0

Esta es una lista no exhaustiva, no ordenada, no contractual y no definitiva, de las cosas que hay por hacer (o bueno tener) para Perl 5.10.0:

Limpieza y terminación del soporte para las aserciones. Vea L<aserciones>.

Reimplementar el mecanismo de pragmas léxicos para ser más extensible. Fijar pragmas actuales que no funcionan bien (o nada) con ámbitos léxicos o en tiempo de ejecución de eval(STRING) (C<sort>, C<re>, C<encoding>, por ejemplo). MJD tiene un parche preliminar que implementa esto.

Fijar (o reescribir) la implementación de las clausuras C</(?{...})/>.

En la actualidad las conversiones de cadenas de bytes a UTF-8 trasladan los caracteres con un bit alto puesto a Unicode sin traducción (o, dependiendo de cómo se mire, implícitamente asumiendo que las cadenas de bytes están en Latin-1). Como perl asume la localizacion C por defecto, la actualización de una cadena a UTF-8 puede cambiar el significado de su contenido en relación con las clases de caracteres, el cambio de tamaño de caja, etc
Esto probablemente debería emitir una advertencia (al menos).

Introducir un nuevo bloque especial, UNITCHECK, que se ejecuta al final de una unidad de compilación (módulo, archivo, bloque eval(STRING)). Esto corresponderá al CHECK de Perl 6. El CHECK Perl 5 no puede ser modificado o eliminado debido a que el entorno de trabajo O.pm/B.pm depende de ello.

Estudiar la posibilidad de agregar un nuevo prototipo de carácter, C<_>, significando, "este argumento será, por defecto, $_".

Hacer el optimizador de mirilla opcional.

Permitir alias léxicas (tal vez a través de la sintaxis de C<my \$alias = \$foo>).

Corregir los errores revelados mediante la ejecución del conjunto de pruebas con la opción C<-t> (a través de C<make test.taintwarn>).

Hacer los hilos más robustos.

Hacer que C<no 6> y C<no v6> funcionen (lo opuesto a C<use 5.005>, etc).

Un conjunto de pruebas para el módulo B estaría bien.

Un poni.

=head1 Informar de errores

Si encuentra algo que piensa que es un error, podría verificar los artículos publicados recientemente en el grupo de noticias comp.lang.perl.misc y la base de datos de errores de perl en http://bugs.perl.org/ . Hay también información en la página principal de Perl, http://www.perl.org/ .

Si usted cree que tiene un error no declarado, por favor, ejecute el programa B<perlbug> incluido en su distribución.  Asegúrese de reducir la aparición del error en un programa que sea pequeño, pero suficiente.  Su informe de error, junto con la salida de C<perl -V>, serán enviados a perlbug@perl.org para ser analizado por el equipo de adaptación de Perl.

=head1 VEA TAMBIÉN

El archivo de F<Changes> (Cambios) para obtener más información exhaustiva sobre lo que ha cambiado.

El archivo F<INSTALL> (INSTALAR) de cómo construir Perl.

El archivo F<README> (LEEME) para asuntos generales.

Los archivos F<Artistic> y F<Copying> para ver la información sobre derechos de autor.

=cut
